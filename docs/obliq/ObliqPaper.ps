%!PS-Adobe-3.0
%%Title: (Obliq Paper)
%%Creator: (Microsoft Word: LaserWriter 8 8.2)
%%CreationDate: (11:13 PM Tuesday, May 30, 1995)
%%For: (luca)
%%Pages: 64
%%DocumentFonts: Times-Roman Symbol Times-Bold Times-Italic Times-BoldItalic Palatino-BoldItalic Courier Courier-Oblique Courier-Bold Lics
%%DocumentNeededFonts: Times-Roman Symbol Times-Bold Times-Italic Times-BoldItalic Courier Courier-Oblique Courier-Bold
%%DocumentSuppliedFonts: Palatino-BoldItalic Lics
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%%DocumentMedia: Default 611.71 791.94 0 () ()
%ADO_ImageableArea: 30.82 30.82 582.9 761.12
%%EndComments
userdict begin/dscInfo 5 dict dup begin
/Title(Obliq Paper)def
/Creator(Microsoft Word: LaserWriter 8 8.2)def
/CreationDate(11:13 PM Tuesday, May 30, 1995)def
/For(luca)def
/Pages 1 def
end def end
/md 304 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
level2 startnoload
%%BeginFile: adobe_psp_level1_basicimages
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$i false def
/flipinvert
statusdict begin
version cvr 47.0 lt
end
def
/iw Z
/ih Z
/im_save Z
/setupimageproc Z
/polarity Z
/smoothflag Z
/$z Z
/bpc Z
/smooth_moredata Z
/datatype Z
/:f
{
/im_save save store
/datatype xs
$i flipinvert
and
xor
/polarity xs
/smoothflag xs
:T
scale
/$z exch string store
/bpc xs
/ih xs
/iw xs
/smoothflag
smoothflag
bpc 1 eq and
smoothflag and
userdict/sc_smooth known and
vmstatus pop exch pop iw 3 mul sub 1000 gt and
iw 4 mul 7 add 8 idiv 4 mul 65535 le and
store
smoothflag{
iw
ih
$z
iw 7 add 8 idiv 4 mul string
iw 4 mul 7 add 8 idiv 4 mul string
true
false
sc_initsmooth
/iw iw 4 mul store
/ih ih 4 mul store
}if
/setupimageproc datatype 0 eq datatype 1 eq or{
smoothflag{
{
[
/smooth_moredata cvx[
currentfile
$z
{readstring readhexstring}datatype get
/pop cvx
]cvx[
$z
]cvx/ifelse cvx
/sc_smooth cvx
/smooth_moredata/exch cvx/store cvx
]cvx bind
/smooth_moredata true store
dup exec pop dup exec pop
}
}{
{
[
currentfile
$z
{readstring readhexstring}datatype get
/pop cvx
]cvx bind
}
}ifelse
}{
(error, can't use level2 data acquisition procs for level1)print flush stop
}ifelse
store
}bd
/:j{im_save restore}bd
/:g
{
1 setgray
0 0 1 1 rF
0 setgray
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
/:h
{
setrgbcolor
0 0 1 1 rF
setrgbcolor
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
/:i
{
setrgbcolor
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_level2_basicimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$j 9 dict dup
begin
/ImageType 1 def
/MultipleDataSource false def
end
def
/im_save Z
/setupimageproc Z
/polarity Z
/smoothflag Z
/bpc Z
/ih Z
/iw Z
/datatype Z
/:f
{
/im_save save store
/datatype xs
datatype 0 lt datatype 4 gt or{
(error, datatype out of range)print flush stop
}if
/setupimageproc{
{
currentfile
}
{
currentfile 0(%ADOeod)/SubFileDecode filter/ASCIIHexDecode filter
}
{
currentfile/RunLengthDecode filter
}
{
currentfile/ASCII85Decode filter/RunLengthDecode filter
}
{
currentfile/ASCII85Decode filter
}
}datatype get store
{
[1 0]
}{
[0 1]
}ifelse
/polarity xs
/smoothflag xs
:T
scale
pop
/bpc xs
/ih xs
/iw xs
$c setcolorspace
}bd
/:j{im_save restore}bd
/:g
{
1 G
0 0 1 1 rF
0 G
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
/:h
{
:F
0 0 1 1 rF
:F
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
/:i
{
:F
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
%%EndFile
level2 not endnoload
level2 startnoload
%%BeginFile: adobe_psp_level1_colorimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/testsystemdict
{
where
{
systemdict eq
{
true
}{
false
}ifelse
}{
false
}ifelse
}bd
/rgbclut Z
/bwclut Z
/ncolors 1 def
/colorimage where{pop true}{false}ifelse
{
/ncolors 0
statusdict begin
/processcolors where
{
pop
pop
processcolors
}{
/deviceinfo where
{pop deviceinfo/Colors known
{pop{deviceinfo/Colors get}}if
}if
}ifelse
end
store
ncolors 0 ne
{
/colorimage testsystemdict
/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict
/currentcmykcolor testsystemdict
and and and not
{
/ncolors 0 store
}if
}if
}if
ncolors 1 ne ncolors 3 ne ncolors 4 ne and and{/ncolors 0 store}if
ncolors 1 ne dup startnoload
/expandfactor Z
/bwclut Z
/expandbw
{
expandfactor mul round cvi bwclut exch get 255 div
}bd
/:k
{
pop/bwclut xs
bpc dup 8 eq
{
pop 255
}{
4 eq
{
15
}{
3
}ifelse
}ifelse
/expandfactor xs
[
/expandbw load/exec load dup
currenttransfer exch
]cvx bind settransfer
iw ih bpc[iw 0 0 ih 0 0]setupimageproc
image
}bd
endnoload
ncolors dup 3 eq exch 4 eq or
not dup startnoload
/Dclut Z
/Cclut Z
/Bclut Z
/Aclut Z
/ncompute Z
/rclut Z
/gclut Z
/bclut Z
/bit3x Z
/bit1x Z
/concatutil
{
/exec load
7 -1 roll/exec load
}bd
/defsubclut
{
1 add getinterval store
}bd
/spconcattransfer
{
/Dclut xs
/Cclut xs
/Bclut xs
/Aclut xs
/ncompute exch load store
currentcolortransfer
[
{
Aclut ncompute
}
concatutil
]cvx
[
{
Bclut ncompute
}
concatutil
]cvx
[
{
Cclut ncompute
}
concatutil
]cvx
[
{
Dclut ncompute
}
concatutil
]cvx
setcolortransfer
}bd
/setuprgbcluts
{
/bit3x
rgbclut length
3 sub
store
/bit1x bit3x 3 idiv store
/rclut rgbclut store
/gclut rclut 1 bit3x defsubclut
/bclut rclut 2 bit3x defsubclut
}bd
endnoload
ncolors 3 ne
dup startnoload
/3compute
{
exch bit3x
mul
round
cvi
get 255 div
}bd
/:k
{
/rgbclut xs
/bwclut xs
setuprgbcluts
/3compute rclut gclut bclut dup
spconcattransfer
iw ih bpc[iw 0 0 ih 0 0]
[
setupimageproc/exec load
/dup load dup
]cvx
{}{}true 3 colorimage
}bd
endnoload
ncolors 4 ne
dup startnoload
/cmykindex Z
/bit4x Z
/cmykclut Z
/cclut Z
/mclut Z
/yclut Z
/kclut Z
/ftoint
{
1 exch sub 255 mul round cvi
}bd
/stuffclut
{
cmykindex 3 -1 roll put
}bd
/4compute{exch bit4x mul round cvi get 255 div}bd
/invalidcolortable? true def
/computecmykclut
{
setuprgbcluts
/bit4x
rgbclut length
3 idiv
4 mul
4 sub
store
/cmykclut bit4x 4 add string store
/cclut cmykclut store
/mclut cclut 1 bit4x defsubclut
/yclut cclut 2 bit4x defsubclut
/kclut cclut 3 bit4x defsubclut
/cmykindex 0 store
0 1 bit1x
{
dup/cmykindex exch
bit1x exch sub
4 mul store
3 mul dup
rclut exch get 255 div
exch dup
gclut exch get 255 div
exch
bclut exch get 255 div
setrgbcolor currentcmykcolor
ftoint
kclut stuffclut
ftoint
yclut stuffclut
ftoint
mclut stuffclut
ftoint
cclut stuffclut
}for
}bd
/:k
{
/rgbclut xs
/bwclut xs
invalidcolortable?
{
computecmykclut
}if
/4compute cclut mclut yclut kclut spconcattransfer
iw ih bpc[iw 0 0 ih 0 0]
[
setupimageproc/exec load
/dup load dup dup
]cvx
{}{}{}
true 4 colorimage
}bd
endnoload
ncolors 0 ne
dup startnoload
/byte Z
/$x Z
/padfix Z
/lookupandstore
{
3 mul
3 getinterval
putinterval exch
3 add exch 3 copy
}bd
/8lookup/lookupandstore load store
/4lookup
{
/byte 1 index store
-4 bitshift
lookupandstore
byte 15 and
lookupandstore
}bd
/2lookup
{
/byte 1 index store
-6 bitshift
lookupandstore
byte -4 bitshift
3 and
lookupandstore
byte -2 bitshift
3 and
lookupandstore
byte 3 and
lookupandstore
}bd
/colorexpand
{
$x 0 rgbclut
3 copy
7 -1 roll
/$l load
forall
pop pop pop pop pop
0 padfix getinterval
}bd
/createexpandstr
{
/$x exch $z length mul string store
}bd
/:k
{
/rgbclut xs
/bwclut xs
/$l
bpc 8 eq
{
3 createexpandstr
/8lookup
}{
bpc 4 eq
{
6 createexpandstr
/4lookup
}{
12 createexpandstr
/2lookup
}ifelse
}ifelse
load store
/padfix 3 iw mul store
iw ih 8[iw 0 0 ih 0 0]
[setupimageproc/exec load/colorexpand load/exec load]cvx
false 3 colorimage
}bd
endnoload
/colorimage where
{
systemdict eq
{
systemdict/setcmykcolor known
}{
true
}ifelse
}{
false
}ifelse
dup not startnoload
/:l
{
iw ih 8[iw 0 0 ih 0 0]
setupimageproc false 3
colorimage
}bd
dup not endnoload
dup startnoload
/str Z
/len Z
/smlen Z
/rstr Z
/gstr Z
/bstr Z
/rgbtogray
{
/str xs
/len str length store
/smlen len 3 idiv store
/rstr str store
/gstr str 1 len 1 sub getinterval store
/bstr str 2 len 2 sub getinterval store
str dup
0 1 smlen 1 sub
{
dup 3 mul
rstr 1 index get .3 mul
gstr 2 index get .59 mul add
bstr 3 -1 roll get .11 mul add
round cvi
put dup
}for
pop 0 smlen getinterval
}bd
/:l
{
iw ih 8[iw 0 0 ih 0 0]
[setupimageproc/exec load/rgbtogray load/exec load]cvx bind
image
}bd
endnoload
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_level2_colorimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/rgbclut Z
/hival Z
/:k
{
/rgbclut xs
pop
bpc dup 8 eq
{
pop 255
}{
4 eq
{
15
}{
3
}ifelse
}ifelse
/hival xs
[/Indexed $c hival rgbclut]setcolorspace
$j dup begin
/Width iw def
/Height ih def
/Decode[0 hival]def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent bpc def
/Interpolate smoothflag def
end
image
}bd
/:l
{
$j dup begin
/Width iw def
/Height ih def
/Decode[0 1 0 1 0 1]def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 8 def
/Interpolate smoothflag def
end
image
}bd
%%EndFile
level2 not endnoload
%%BeginFile: adobe_psp_smooth
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/junk Z
/$z Z
userdict/sc_smooth known not
save
systemdict/eexec known
systemdict/cexec known and{
countdictstack mark
false
<1861AEDAE118A9F95F1629C0137F8FE656811DD93DFBEA65E947502E78BA12284B8A58EF0A3
2E272778DAA2ABEC72A84102D591E11D96BA61F57877B895A752D9BEAAC3DFD7D3220E2BDE7
C036467464E0E836748F1DE7AB6216866F130CE7CFCEC8CE050B870C11881EE3E9D70919>
{eexec}stopped{
cleartomark
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse
false
}{
{cleartomark pop true}{cleartomark pop false}ifelse
}ifelse
}{false}ifelse
exch restore and
level2 not and
vmstatus exch sub exch pop 15000 gt and
{
currentfile eexec
}{
/junk save store
/$z 4795 string store
currentfile $z readhexstring pop pop
{
currentfile $z readline not
{
stop
}if
(%ADOendeexec)eq
{
exit
}if
}bind loop
junk restore
}ifelse
bc89dd93a62e673f17beaf79fc308801f2548cc0804b6e7e7211db7d71dcacee61d4db4b
cc4c192da6ec1c558421396b4eb1944f656db0dda1626374294528747cd1ee8e10b15c5c
60b4182960a4687e44c92cff1b5d29a6b48ab8be9f8115c642241a4901d75a2b2ba55d27
0620b884f37689503d9c3a603e89a1f7de7447e2b23145af7219c13aad065fe60313c4f1
7d1959166b8493e26ee828d6e76ac472747b40432571d2d101dd3e8696849eb59b70c328
a0d1978eea220593cb3024a3cdecb89dcfa2d5ab3990b0bbc1a0c3351bfbd614917e7ede
ef79cb8843325e4a81a80e809250ce8cf7297b5c684b53a56538b373cb085ec7436f82a2
e48b4789de5ac368defd97ca81e1e7a584b7e40bcf852c3d4f6cc387172784295be04ca2
0793987d64efc3cec658553cbe610fa9ebfe74341192cfcc6ecfd0a4843b740cbfd5ba5f
4c076050268792190676f76cacc26be628f8ae1c48419803c2a5108f6b1bec6664b06248
6a083d8092cb3c82b90bded3eed0387490fe971d6614c5d0259a846d43abb22e0dc06aa5
6911c9f53cf5524e138662db3fa2e6cdfe30873d916ed70e4962ed78b32491bee9a20a36
8be439dc6245d5751e6899e2214c07df7a87b66b1aba9a8196db2add3d3c4e3057dc9a9c
dae1cc7884a6f29a5568b1ad64143fd479b8b4a8fbef4db889fe42edaadef0276f79d192
245b64299ad347b03ecf887db96b16fc319a1c7e59718ac7ff7bc7bafd4523bd88fd5ba8
1730817c2f529d3060cb591fe565d778fc989e7e14f7c2a7b85785c53af35fbe738da838
cdf80c9a048f4d7dbd58e2c9f527d2d3b2ad633da1005036298ec8533b94f84e9246289c
f03336f4a7f657afbcbdd7b5e16187273c459f5626a5667db4fbf8b85ef2363ee6d89bd0
f402408cae3065fecf609fa290047e9656d853739f33b06d64a4a57f66f37f7da39fa89d
28962fddb76e8d05683c090664175dda6a1be57698894fd9f0f9d8da411b3f33b3b9c8d4
50a27c37e4a0e503418cd6c02cf60fa7fbb6f6f3e7509a45a54343ba3361168d895a27eb
6923ab65b019b188fe21c804629f2be2a20e6417841b4c8d5d68fb38db71ac7174e68d03
0611ea29f9ca740d0aef611a1f0003e1d136a539ed28d956a2a36bc7ae0ee290bd818175
3537e39be7777de1004964c769ec7e933b17c852cbd2da4cc100d9d3e141106eea9cc29a
b1c910ead768527a02711ac035262c93a4548f67fb501a971e0a86d819547bac7c09f5fb
aec454c9c7276f5e317cc8fd8876e7f90dc128f03052a756cf6db9876fe5a31c9d6a139b
d46eb34272ff7992b86c88420ab07e801a39e91afb3c048b40913dc2d984e0c347b3daea
4e1ce5a15c8df7b65a0b89136f6a48a92b8f096d708a2bea4390f0454dcc3d9cd4f6b24d
8f06faa17694172213c481ceaa1f7fe33f1389142f017874560e1b0272385585fc5681de
4a909566cdcf9af80dfde23e9ad55083bb9422ae57b99bf3d5f081a4cbe0172f236abbb5
06fbbee46987543fc545e81ecd61477fadec55640ce9e41f8cbcd409f0e64c1b83193885
dffe0c4c383de781943a2a73ad1e0cbee0dccdbc3bbbc010f3adc8aa597210cae47003d2
952b8e874e1dee33ef1a78180a3ef6b22e1a66385147f550678510b15ed1a02fc85e736e
818f03b188d6a23f070e5720195a8e4c295d27129a5adedc1a95145d5e758649acebaec5
3d14cbc9feaf3abcecc976c03d00ea640c3b852baad7d8ab28c593cb74cbe2e98ea0b35c
8827eb3def1a79af837fb8468b2042acaf226b1f6d11abab2884f3fe49772325d273f893
82badc7b3b26e43c3f6170eec2c607cbe22225b9469de5509d31bafa1729c416089aeb1b
3b5477a985acdce47557bf29130d6232d2003a4314bf46c9c9383c437f1f2597f361405a
b92f371458f13d8d400d78140df094a559bec9d240993f2d811f0d4eba7678773bb6c765
caf33bc77c0e2e156538b04423e513cb933d9ac8cec0444e0309bdb5c70f02a71f49cc99
7b8d98ecbaad1d53daa2811b07df94b2ec574326d760892fd1886703eed816bf2db96bbe
f2ea914cef918d251a1203d93d549aa438a1309ce179c233111175d9e8bb6064dc2d52db
0976650b1d5d194eab20ed3e500db4410852390e69e56e4ab71e97a87680fa620d8d32d5
b93e40cdec16ed20af734e792ddb938b8a65ccb811f369cc1e9e8819e76d7908e310e5ea
018c05d2db74abc0e8e5da75431324a3ba298820009d6fcc9d5693ec900aab8745112928
ef24a8da713dc8ecebb84394f0058335dafb459971cf20e8c15d40f35643a0c56c95bd86
faefe8e251fb9f79a6db5e481032f812454181a73375ab1efe575d745fe7073adaf60865
e992c7f5e969f4e267b323bb022a7f8b1b480a97ca735212b4d47aff196f37fa177c765a
f03487b323f2ce11314906d04dcb0c3c770ea581fcff70cc1553b4615a6d8dfd69001581
77a9fcc035cb44d630b99cdae09de33c09c9ab8bcc021e72fd88cccf3a9cd578a34a3f96
ae636047fc5f468d22cea0cf509e1588563c7e25d4f0d41b30373dfd1cb69a8e37a51a57
5d1cab7a3c9d04f3d388db04ed78d3e81e7b53dffa94507df197e467565d4169fc996e46
671f62236b00f4e9dc36bd3709400771ed4b335bcdb3c2974c0a00c03717ed980e98dc1b
2473f38bd1e1fe4da0fea5169aa1e06054315579a5898bbe3c9fabb829485562e9d25248
142575f3bfd311dde2297c7883b0b9ed0c3ffe3358880c8c77be01cd6408dc743634006f
d888ffc1e4562ed1166bbdcbe971a269afae52a8a384eaf8880433a053bd072accc62214
04bb18e98b9cebb3c05e56216b56174bd432e41b8c82c82d7114adb16ad941fe87c0657e
03203fc26ed43096e7e262a8f86fc07506b3ffcb5888bcbd3482977716a337a54c0649c1
2579b4322afcb34486a5593fb9d58cb16a0368f593c3c52608bf31c6a3b48a04be605c60
b15ea2670c3e89d293ba065db7d5471d3f56d7ffe3ba48814d5a1f4a81d9865d1f2340cc
3e5ced23ce6827065312bb9ae13e0d3cc53e79aaa764a229be203d1b45963d17e983f72a
f97bac50984a360768f459585745d94f7b77457bb8bc802332aef4e65ae7200d94750aea
b4ede71ade6ee000cf122866f514747784f7e497a6e48b82467515f474d38ec690bac331
d8246eacf2b10d7f1b1b74b1020843b3d934115e23fc1845e5161f5d494badc22f5e68fa
4d1cb3933ac6467e3cc58099adcf4832c156ce1714ee44c6368dee76483e47260dda3af1
97f938530475ede86f1b7ccfeeaeab2518f1c05ba983ada09c069d0f5e7e34c7832ec4c1
9e68e78a51e25540cadf7b64d1eca1141816aba211cea9b8aa4ff9542f26cd6adabe28bc
03c20d2fded392cc160e5ca6f8216611e41b504567927a560537a57e09dd8db552fab25d
59318ad3f7e6b6e10ad49fbb4caf8d5205d494666f5c51a599df65d2c89fe65c92ec733d
78205e987659e02d244684cff18d2b6f1d0d33ccae32339b840246a50cccebc952c7e705
d30fcb5dc94da2eab7ba3c7f9fe536eba4971a8b8e0744a0a094d531ae611042c347fac7
3b770c445121464594a2c5eb9d923f0fe2f33500b403e4b5daf64acd4a4a89d8469be57f
a393a844e082dec5af117b77e7be0eb6474eb47b00503bc68c809f0de147f7d0f1f68798
89b1781d09c0dc12c882dba17e23de1311321fa851a94c51a8801a4bf7c888e4805b1fc8
2fe638aaabb33b13ab0ae024b0b767108a068d562ebd11a91ad8706df9360a914927b752
ddb4d176f72661d12a6349a58a8d688b311ec8e1797b011dbb47760765b88a651b42cace
e60730553040e64711fff10e3285171ed1dae0545b6cfe3503b24f9d135d04d467372b11
ef3c1b9aa7c4272e281df0b6e7cc7e7984b00cbda5bbd81c939213c32176b5e062660e54
8943afe1e39a38cb171d7591c01ac4eea3963572ce008d48727ec8efc0ead1cc4c86d9ce
3d9d5c21f58a41359f2599d4cb15762366c3d3c5b7abe7970a312ea2fb14f5e74f78284a
624fe71f362f4b4d892ac6a87cf8794982964aa0e6153477da1484d35787edb8a2aad90b
3cada91934c118098617e1254d834d86154e6585628663741ae0d7bf339b168d4acec9da
94c12bd5449ecf97a7483e27c47160f838ac076f79b82fc0bd8a3b0011bd0bbb2e6a38ff
a7a63daf463cacb10f56c459bec699ecbcc52be2e5c57bd013c4682b01199cdd89ad2bd1
8584b05e6178c2d6fdc6e19a375ae4a91428d4c0aff2d07e5b6d159351475e57419f2ec8
a343d209e36ddb078027e03d4f179fbf675373c485be1a147ffda00821aba79187471ef9
55f197d6bf0f442244d5b4d1e8392ba11965b6bfa8db30c0e48984883a9b6ec840a9b6fc
93df40c82906dac253e0afd633c336cedac8dd7213e4766761ec3cf3a8aacb1fe1bf2d61
d64c5addaf1d836e199df0ef5e61029f1e6a28c17eba0d8bdf81f358058086ee365b4127
a1bb4b273b84a825fdcc4ebd3abdd7ca243788e1eb48aed96626bd2f2ef8a2e1a082acb6
64b5af60797d9ad021ac616e4d65c1ddbc4a74928b7ab089a10db9312a18d682cccce0b5
53e2f454af0ca21f59b96ee7d71a97db2607dba56daad1bef91c66c44f6fc53d2b4bfebb
876cd478243a9454e8864f65067787b96cb4b3f92a7c90f959ce3324c94590348a8d2709
f4feea7adaf4c56199da203d8f4b9866fe7362d86401b0cfe1913476eb9f7f4d4df0f2f3
8e7ee153c99dda1ccc6eec2cd1b76c52c553ceca04ad525fc17a4a7af197d158c02e6469
cd7e3be4b934ed0e1499153bb98b4363159a60c9ce892af085511cfc31cfa7fa1baf0e22
d138b6a54e93532486b633024d18afd6a610ede93b2a554abc44da890144ff060d1db1e3
e57df15229afe56c49e3c7f68e6ef0221942945f3c6675b498e94fd834bfcd869bba0a90
179d3eb859ea6b749871a62c0e8513ab69b63e35b5bf8060f25442a6670293cee9a86928
997a54929695b3eda64483ecdf8cfb2732729a652e08a3aa82ecb5ac45aad7227f7f7ee9
1d8c222933cfac18561f27939ca29fbf5eebd634555856519cd2f1573281514aff3c6091
5142196c57177ef2086958fbb3fae8f448118c435ae82b7b17a8445e0806b8442e1f9347
c7940af7342dc3d5638958f9a3952768f6c244920e281a163cc87fbdbec99080b8d7e24b
9e35e152aa600a6a4faebb140857e536bb819f4cd9992b9dfaa60ac33a8ff2ed14c791e7
0290e5f6d810488d672224bfeeca6907b41f46489091322b6830a8424fa2a0061151ee61
ef1cfb1a83c4538025605554ed3c734fd8e39bd6da4af6e5a57593da83fd9f511af49b84
5ef7cb34495b54070ea204daff2e266f5a1619928e73de256979f4afdeb42b889064461b
f7263f82a2c233d113de9ba4bc415ed68241bc3862a34050479aa86eabb80cef561ad640
80be73a5da7fbb4905bee2fbbbc7c85a5512c6e747a5eb18942e47c17e5da1127910d8e6
ed7a37d3b846cfda6b0adc8dd594ffe14995b32babcb4d99869090abd57e8ab397e33406
2c7790b673d184738a9e9d578f54ccfcdcc46200d2bb07c5dea46261680dccb4f011428f
289c2049ff81040685aec9ae8c9016c491d02f14f2c4fd79e053147520d59d034c470569
e602c662af4aafc5d2fb0d3af218b26b769ac25fe9999ba3c2eaa8a9ffa93a6f4b743608
f5797772e53cfd2f3c6a45b1a843fcfc6aedc66bc35db923bea051301fa5a959a11eb0b6
f02f7c4e6b004ce548b77e032e36f93cce55f507d5892b32da81a7ce5016326aacd06dd5
0a1b3c615abf06ab6eb1bd643f3c3d7fbc9e18bc11ee29b2113d5c458f20713d3b811da8
883f8b95557ffb1eaf229b89fc98f7623ff9140bcebc6b8677ad7d99373e5757292a3d6a
83a5c053e61224b4dc14e42626637e714c514092e569101ce75f0533605802455f03bf0e
336c0f9788569f3b2b4b79c01628abc3b243decb3c55e1273ff7b83ae61d936bd413580f
3f279437da1fdad63d785ff7bedd815a6d6e4964231adf28640794c33a30686e5f60fe78
c5e87ffd27a84452dc111bbd7c2d0b4e7781c102547f5533ea676a33b8d58918f197a8cd
a1e90be9620e43af9d5b07ee2ae5d702683c9a6973fdaafaec74d62cb29b18272b3f8840
a1a8372ddf4bfee1b7ea037ed41fdc2cb1cb4da3ccb3e121354db0d5bc83c4d4c323083d
75dd32c20607f81fcd221751c5af21775659e804b9941cf6fbe4c8846be20e546f88a588
7bbff8cab4489883fdd2be613313174c015d69eee40eee4242e173aaac87585597feff69
a64f4ef2dbf00dbfe9ad946892816711c7199d4068d8494ba1df614d9bbe1c7b63996e98
12b913966a42a41be0dc85feff232e625f4dd0b01cb7674b232e89d5da143f9d12a9d8a9
aa8b62038721ad9e4a6438cb842d1828458fc25e5b0b6ea795f7a14d2f55f1451c615f4c
211469611d1348952e655e1d93188c0dc6dd719630a42fe5baf8cde0c03b1e0aa76a2cd4
fec86a3042f8a2ea5af50a43af52c1217f6be45b152e47d165b89a54ede432f1eb3ed3ef
428c228dd53c44db15541704b99413b465ff65ca0e9d6be932a18eca713c71ba7dc89238
1e0c2c62cf8567df2f997e58ed2c1ffe17d2fc96db942ce3950e28d1287b85ff7d07adb9
059629dc89b9b0ed2213e45d8a20188cae18f3391887387bf8ba0a12fe21fa0aa521bfa3
718f7abe76388e
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%ADOendeexec

%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_customps
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
}bd
/popstatic
{
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div G 8{pop}repeat}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
%%BeginFile: adobe_psp_TrueType
%%Copyright: Copyright 1991-1993 Apple Computer, Inc. All Rights Reserved.
userdict/LW
statusdict begin product end(LaserWriter)anchorsearch
exch pop
{
dup length 0 eq
{
pop 1
}{
( Plus)eq
{
2
}{
3
}ifelse
}ifelse
}{
0
}ifelse
put
userdict/patchOK known not{
userdict/patchOK
systemdict/eexec known
systemdict/cexec known and{
countdictstack mark
false
<1861AEDAE118A9F95F1629C0137F8FE656811DD93DFBEA65E947502E78BA12284B8A58EF0A3
2E272778DAA2ABEC72A84102D591E11D96BA61F57877B895A752D9BEAAC3DFD7D3220E2BDE7
C036467464E0E836748F1DE7AB6216866F130CE7CFCEC8CE050B870C11881EE3E9D70919>
{eexec}stopped{
cleartomark
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse
false
}{
{cleartomark pop true}{cleartomark pop false}ifelse
}ifelse
}{false}ifelse
put
}if
userdict/downloadOK known not
{
userdict/downloadOK
{
patchOK
LW dup 1 ne
exch 2 ne
and
and
vmstatus exch sub
exch pop 120000 gt
and
}bind
put
}if
userdict/type42known known not
{
userdict/type42known
systemdict/resourcestatus known
{
42/FontType resourcestatus
{
pop pop true
}{
false
}ifelse
}{
false
}ifelse
put
}if
type42known not downloadOK and
userdict/*charpath known not and
{
userdict begin
/*charpath/charpath load def
/charpathflag false def
/charpath
{
userdict/charpathflag true put
userdict/*charpath get exec
userdict/charpathflag false put
}bind def
end
}if
/endstring 0 def
/mystring 0 def
userdict/checkload
{
{
pop exec
}{
save
3 dict begin
/mystring 6050 string def
exch
/endstring exch def
{
currentfile mystring readline not
{stop}if
endstring eq
{exit}if
}loop
end
restore
pop
}ifelse
}bind
put
type42known not downloadOK and{userdict/TrueDict known{TrueDict/initer known not}
{true userdict begin/TrueDict 8 dict dup /version 28 put def end}ifelse}{false}ifelse{currentfile eexec}exch( %endeexec)exch checkload
1861AEDAAA5472E4FDE5287D4C4E53EBA565E19358AEA5550A3550B39C26EE55F98C1D4C2CA2D63919AE617140BD52D3FE961B3CFC9F7CA38C3DD467FB1641238797A5642FED713B53CDD80F41A863595D7A82B8D7598E6EE7F27933BBBC5A58AB46FDCA84ED117437ADC525E4EA0D93CDFED129F6868DCD011E14210D9F3CAD52C5B33B1402DC0F86914E67BE0F63B2D12F3CD76A10C151CB4C2798487A34FC7181BE3C79B4FBD2CBB3540E86BF70FBDD8FF3D9B16424EF45871B2C818EF2346EA3CE37BEC8FE1D40

33DF000C886A940A0E1DD7A0AC40BD0CBCE29D0A81FEF9A5AEF813B8BA06F4CFE9527E601A0164DECE8FD10BCB2333021DACF6CD0D802E151AE96A82C7C10AD99F5DC43A9889CAA64EC4E5307DB9440000F35F79E51FAEBDA92D2F97390C93FFAD4D21411F932BFCBA4EB0666BDCE3DE8D1BBCD7B24CA0DA1A08E747409D9094A6417BFBE926A6300DEB2B572C63EF42C4F392637AC94290C58CC92681376B29B2726CFA8518689DAF9D01B93598C69BBF98F865C384CE5C853476A202F9059D3DC6C3025E697CC2AC

66B1E30CA6B566A9A61CC040FE44E773038251DD8BB53FED0BDF11F8AA276DC0456A43E529324252861E8FD4D06DD6331376E315B4BCB8997534ED06B0175C4078FC85147C69F444EE9CA1BE9649059C1E995631947FF372330DB97F421219E17E912826005B9732665C73E12043050366987A7B8AD687CD322D14E6DF7FFB894B18497D3F38037978563161854F0EAB66CEAC3377512C802EE1A0630A39BEC52B590DAAF5052BB8A78E570FAB15C1C2793EC7FB8F2FFC33A432DAC0DD7803B9D0503A2ECAE101DCE9

672356B6B624504E8831277D45CB7F80255804E8059671ED3D3B767479C6C4A5CE28DC38BFB809E86D8E02B2BD80479101031868468A128033F4E409B2DAAB4868379E2BD2622333D5C309B9649E86EC4FDC1C420D5CAE6A2767311CC207BFD09FEDF37EE8A3D66EB4782D9C663FC030B779E0AB02BE4584658CC25BB9BCFFBE006F41DA9BCE2CED2966CFAA201248D9AB714873EC6F933909A1F48C01F80023BCB24B192EA19588A88DA28D36F6B782D2607E957212299C3840557B14CDD260356826793A64E235CA

ADFA5D1C71A4B6C4E1330FC01CA664510B27F819D69D617E01387BB801BD470756DC57989DE20B61552F9C1DC383E25876E10900DBCD4B9E50F05E7C2EC528C8633784A121DA279F812C7965B648E4E00819A29C652F2B85F3534E245A696E91CC03ED9FE3F97CEFFDBE95361FEF985D1CF7CFFB974233FE820D4869EA1937E52FC7B2CB00BCF37CCDC72177BDB1904E1F3726A5FE9CA59BBF87A8C3513F99FBD037CBD6BB01E795B84DABF9595DDEF0E91C6435FD406DE84A172D2AE07BC78A3BD4ED195F2F09E3FE

0B4DCC58C81614D1F8173CFBAEA5FF6371A986232E76539524D293BE86340CD86B81A929036782CD707F699A2D8B40F7C6F91377DA1940F105B2AAC8ADF45A2063DA4A0C63D7F3956148FEFD364E6A05B349486A782FD2A1295F93DF8987D5A1DFBE894B98CE080BFD726E6C35CC4AB4121A301522AEB16BC7008E83AC12A8A7B711AEE12AC961C1DBE58D10240B3CC12A750EAF75F09BD536589C0226B9204D7E53BCC5761ED6A52CB652DBB682A576B8915B653E8F1A96628219545928C5BA4CC1FAAFE0A2C7B2C4

193CB23513DCC76752FA9C26B776902F0554A3D58AB47BFFB2056B98661B0D5957C6EF52303D791606CE0B7A46BDC13C1FC227C6CDFD421DF6215711A6F4A8BE501364B63BBB0EA6EA02715CD63281E292233AA46480104FD6FB7A9868CDA3B6060BF51088EC56C8F8BD3B9BDE892D8EA9CAF31D99A34F4410E3E97C7C3C34FA8517A9302793D9549672FF75E0E4A00FC92CF7E045752675852434655D892D19E0EF4666133BFBB532E0BEC7BCBE0A846B88E18AE8DC87FC58622485130DF26DC378CBCEF357EE718C

7D1B3CCC8E7F35EC43A26E5F40756BC7D998DACA6425160035590484E6B130C54387EE4CDBBFA356011D9D14F74A98F5ABAAAFDACC912CE099D5C92DD706A8CFFC23ED037FE6D1044362D0A7D5C1F901EC80AB886DB09A500817538B2D7B65C0ECDE477CFC86D32249361EC4522FE149F57DB19D44D8DBDC66B548CEE7763E0C8F10448C6E1B5AF2529FAAA5697D253C5BBFA14423ABCA1DE3819F019AD4A3BB6204A9BAAB063BC6B3A25A7677254F1F99FFDE4BAF13ACBDC5D9F2056E52B65C1228B93883CBD3120F

D9E4448F965D5498E5DA4445F4B191F79763F5FFBDA70B616A00EEBA0B6888F9F91E4EAE3A731A7F4044F9930F2FD4CCD65E9CA08648003F80AD4418E3E83E9A7ACC6696F809504420118CA186064AFCA07D22AE96726D0B7A8E58E9CFA4DFFB0BD5E982BECF889D250BBA8EFFAEB674C58DDA554DBD0E1972E846BBA347075E8196D08CC5D9173FAD91C9F5F609F3C8DB4162E8D06CACACB72EBBA2351DF2BF1D32423925BE11D334B1F7203EA6F30C0C0EAFE3392A798956B40089AA356B8A932E2B60AF888A49CB

56DC85ADBFD5BAC0748C02605C8C395F238A22B959FE9F0E49B77541D6398BCCD6EB02B30B4A91F07CDBA6DC4FB32B55226F47E454449DB23780537A12F1FFB395DEA05A8AA78A4F9946B074DF95B31B4B86DEE1B2492D03D886C1B01E444F34633D6015AC1CA90A7C6513855DB5A1C7B2F57DC8BDC2B9100D4C2BCF6628C0A12AF2AB7FC67806E97AFABB42EC46A4FFEBCE555B0AC2F64D8034A7FC36407721C4B0F3B4F3D16113990D043564E89B3D54E92366F88713AC3E28139FA71ECFAD17BC622CCA8BE58AA4

4D3EBFF06F49DDE7DDC37035E984CBEE06AB4D1FFB440B821A15651B915E1006402BF87342190932387FCF33EB79DB73E38EBF34039E799279D7C153446AFB3C4DBC5C375288F3F7C553B296B44A61F867DCF8952BF26A2D64B05A24DEBA1664BFE73AD12CDDA3756276D23B350308DCCE491417360FCA06CF1D497B4AA75EB700A788869F2FC357D8B1D153715A6F50985577A0FD1E35BF04A8AAFA1D0972D1D8FD3DE8A65DE81D40C4A1B0C8D7C6CD0EB55F7C2A3FCA1D454B74451E806452888033B2772F9C699F

C28A4BAC9E862F7DFCA301B788F1A51C44BFAA311FF93740CCD6F29D08BE0F6932E691EB43586925283D58599AED5F98114911D4C05AC4148CAC65F9AF0BF76433245A27B32D3FEBF5952C47E96626CC22A3264255A24E03A020A505D8440F16228C2190DDD0017A60D34144BECC33AFE20B56928FC199E9D9C30ABCF4927DA1A9AE1558A5702BB1B7127DE35249215F49763AD75C543D8EDF6781A949A75C7C78D422256A72318E1A45B1E587A2D502F5CA611DED7DDCF443FDD78E808A9C6EDFDDDC924BA5CA9EEC

C664D66C1B3E4A60A398ECB3C4CD3C9F7851270F05543794E2F88E06BF670889AC8602A2BBAD12D218E7B78924BBB7FD60ECE42B458FC6773F9E75B37D6BFE14A3979B6EB42157263DAFEB70F729868335C95D39E2EED0215F555CE879E325B17754D46F9DAD318E1AC50C7084A71E3184A729470D80D9CEE2768D2370FB7BD2F2008B0AF62A3A08B620C6E9206D7463FEE01631D796E240968237EFBE17A4F170D92D1F9CBB26BC0861E0C1F58F77F66453D437A50DB6D0D5F2E324121FF63311B65371C6EEB36E69

05F588F28F34A7B0EB57BF4368F26C9E86CC3AFDF6CD7167F5D9E3EF766E3E614E7D5DD6E145C36F314FEA99ECEBA54B846D4D8221882BE64FBFEE85647730885087B65F292229400FB23492929CE963191036FDD83C691BA127ACE32130E33C3C5FB423F980D7462865A6CB18A21973CE32D89E7516E0E03F76B84E8FB50326D95E36B05CD7D0447B9FE86EDE386D8DAA7E8B082AF4EB18A7DAE77B3C950A4C83B68229E9192AFEFD01F51546EF2DF730CB499D904013E14B0F5B6B2D726DD4D1B20AFDF10B56A49A

55B0D95AB7678DEAE39A7458F68CA514A3CBA87F47EB83ECD9F81AA4052ABF161F222F6B2F679F39D0286DE59F4FB75261803635C524348390DC3D6B042E2F4607592174ADB571D8072846DE69123DC3985805F498BAA31C76C2E9EA52C120081D8B7F0C61C0701230B722645CFE883F9AC0ADEBD3B1938272C73E9A7C7E629EF9B64A26BE9E8672A0DAA274775B78BA7F9675FD692333F04B982636705AC061FCD0CDB19002726FCEED6102C7384DAB536D21A788B4C2A11ABDF77A2916E7D7320B809FD71D24AD51

56C0697D2769CCE8033A0D24A52FDAEF5C3FADC461F538AC0BFCBA57AB3DA633832F5B9B98F67DE6D3356B0207F06E72554AC2383EEFC7092858C36C12CE8AED27F10452C889A6C60836F49E88AA479B273F4378A3301B64DAA9195E036DB88522C94EB797E4EE3024B8454FBCEE702EA5D9DCB7B6F766FDBAA34CF185DF8AE361AC556F31E21679B020116AA9EA08008714859B3B98BA5B1D0376F8CCF2E5AC4311E82AD6853ECA05DCDD9C87D8606EE20FE779BC17D5D030885AE7D1671DB1026749EEEF22D30420

4CFBC6A52B97ECB72DB9A6851EBE69EDCFD21A37BD4540E7947D6B42BFAC69C2889858B1F5A739E22DE2A29E7CBA66A9D2473CB0672193D6BE087B40551BA16D7F32D7B163FE65B05B53982D0945FF5BF55DE45E0F0A6D1EAF79D55ABA5FAABD40467E2F5F7517832E98F63B29DA2A5A6747B0513B97745CCF4EACB0858E4319E5EB4D45F2A8795A3E133256565F31D6532F85603D5731DB39FB097C1775835B843451416573994A0B6A3202804D870F868BAF3112E889B2EF8F5BC928492FF15E5E597F9FB64A3112

2168F6372B98DA557B9DF246B4F61EDFADA4A5A7DD414E6F2E17CCD7F95C6EBBEA2B91079C22D1B5A7114F27BB5C3705FBB28C99486B35D32127360212F0B685AB3C06F06FED57EE63BA5D08D91C863204BB8EB5453C3BF32E1E5714A664BEF58F16C747C1FF920D674D3353EF8E3F55D84C958A26D05F3D4FB82A55EF887B34B547647DEF1D8816A6E3EEBCDB91D20EFAAC5A500C368494F2B3846F69CCCB48EBD4B06D4329D8A85422BE1BD2F0ADBEBBA3A2F3E2A5D8EDCADC856E9263841EE18120992852668FB4

449CD3D74276939F5EAA292659626E0CEE3490F528A7E53818104A176213509DCD88C64AAF0446BB0A2883DEA5C54BA4779A0767A746F79F72F72AE3899A83991957586BCA101F7E4DE87520FEE0BFD82E7C7731628807B33DDDA0B0EB2D34604FA9D12A547E5827ECFF9E64352DB10960CB3B117AB2C837FA81829B21A271100CE7E7FD0518D4D352051F16AF38656E9775E4118FC50E21182088819B78606CF5F063DCF08DA5B7D533A3B71369BFE77D682D87C74D4245FD9926D5317B6DEB288B220D1EF7309908

FA85A07EB2B96D5A2A4D527DEDCE5F1AA1DD1B6DFF61E1B10DCB6CF2B913BA6EC61DAD73B644D3A754BE943F77A237D5DBF677AD11F6F9C5FB03664C217175FA95702E69FF35B4CE30B2BC673A7AB4A0B1469AAA122E4F4D3F9828C3AD7EA26DE31D0758863158C19801E7D96F3E805A45F45E71DB416D893AEB03F8CD39EB842C56383E13A826B1D81F89CA3783D7B935AF96ADD02DC15496F4D7232A463149B9A8B272F017F21632B675A008A11D19E0DE2E7026245ADA9D6DBA168D6A1DBEA1491E0DD5B3F56584

B9E1D0E1E7DD89383226F07FB3B07687D2AD646149E5BA39D6567BF954DDA0F72A0B541F596A44AF270AF0C72E8FD60A8AEE316E6C283D7A27E80C564F7597FAAA7093D02D5BAC8C00D7847C44426D1F9D0E9A5B930AFEFBD44EB103DCE64728D714E35FD3E56061D9682BD81A9FC41AC30CDE46FA5824CB72615BDD37F2230660E20460DA93E07B3290D13FAF954DE1379AF60F5F4579F964C423B71302660AC966F6D335A4B9BA08C6D60DE6F8296590C920CB36CCDB0BE842EBC070DE96CFD4DCA31D4DC45AC6A5

5E77B0D819DF4691A11C228143BDF7480F6847F1E558B31A035386777505EDF2EB6D91DF28FDB24563E5A9345A148C91534B6D4336F63C634554A46188DA9E49B80081FB268FA32A3D89EC898F7EE62CC7D64BB1C0695E070D1C464541DFDC623D0457CBB25C90ECC387FF07D37BFE7731C1A6EF0EFF70AC1EF7E8D26AC47EE8AE5D3BD523511B1FC953655CBD2433E12859B8E721E54C4C81EF4372D8892B27058D5B957318B1452209344E7FC21CCC2F75FAFEEC1697DD3603947320B996FCBC65094498589B6171

7E5D64D4101818C6E03E75CA1DEFBCCAC97D267E50239CF58294EE8006807B2C3D97078ECE6E983B951141733871B45A1D3899246D98D1395A5BAF1964C95B1AFEDF668DFC9D5F94465240CD9D49D576143454876DA4FC98802F347FF69ECF406C833D17D4A18ADB4895132E770577E7D39D6FAB267375BA9F5C7C77162159190911BC71578AE1C8121285B215C5F9B1E3CD88BABFBF228F9280C35ECF1851A115CE8A38C6FFE656B83BECAAFFD874F5B720EF18EA57D981CB1AC469F30071E1A4BC709FEF988E6E1E

4717FF7C37CE52DDB878B4A8F24F4B11482322AFC22AB5705C73594A8EAB4A370BE733F51B40E29AB1F8C5EBE1137B319505CEA62DECA5E338A89CD2C8750664246E7BFB3C38B30860A951920CC6AD6E089D4C656527DD7BA68C76157391770D99B15BE8FACEC17F8943EBF6A3DB839ABA7001C37B3112C6F5614916D9123B75BDC71FDA7D6ABB53CAA8621D6A0130E38F2B929B211CA4B53427B1063F2CF3978E52FB9ACD74C6F721455512EF30600B66B8DA6A7D56C43C8790DB84A6043DC03BD38B6CA0CC504271

35EFB50227B9C8B804D8C9E58CB78309E4F3AEC20C5A7DCE18C1C7171478D39CF532F057ABA7E5DB19D35BD51DA63EB05A6A15312F8FA3ED2637699BD1803A14961CCF49DC061B3BBA30AF017699BD2D2D38C7DE1EAA45B54CD51B9C57C80AE675E4521B49B5D7778C1EDA3B45B19EF04AA936955D00835328B61BF1220B6BC49CCBD1EDD0D90F18E879A859E3E20E9C3A7F3860D7125EDE6FE67CD3EF12783DBE274EFF59B348681BF3A8D2D297AEDF9E4A265C0D6D63271007874B17145792869127C6659696AB31

C02EB8304E9F396A7E033EBD08AF87F561D5DC2F37DF9EA60A472DC5D51647F8A4568FFEC5FC84708B2C17E55262570415212060235615B4C1DEFBF5CF5C4821491DCA10532149A3A34562C55AF5C0122950B45DD5CEAF82239B7F79FE34083FE4C72E07043ABC9917AFC9BE22655C51CC81C908C0D4BA39CB965EFB976C03FABA4D0973DAC112F5C28A1FF1D284E61A9B120D9C5030885A8754950FF892492863F7EFA99AAB5A3BFF027858F4F0132739B886A9CA2AC054A026A12F34418D8C3AF4EB3C9B468271D5

830E82B25F0ECF22F89E7CF33BE08D6909A4CA7BEB11F36CC953E45282CF9DFDEC04A3FFD266D3539085293AD22311B3FE1268C4CC68A8F63CF90FCB66257B601D55E1B0993DF149996C54DB707C933CD9312A913E5E7762A43FD40A8EE87D2824F18EDFEAC97BEC2DC7AF2950B5EF8B40E799FDEFA5DED8A39D9C846CFD8F591A063C55E56C1F3786D1D206D44C344780ECDC08045D50C3A7019A6E8B68EF744262E2761C9078DB24DA446B758876A96F03133489264BDFCD8B8B6D13505D68DC324313A0BBF7B1BE

F28A22DBAD4A4A7756BD63281D966B3B59A13FD5731F32AFF8225BD170CF917D65F3324DC172ABF6ED720DBF8180A91B36BA0C0B6932C87AD1748B16A8E3ADF82377A5B32F8E4D344664175FE041C7BA40460FE2B098211CCB10D4F8D50A8DCCA9E531D5C9702287951F9A26A5EB7445B591C2F75F2AA4805E95BC6800121AECBE620C4885C24DF5AD51A669111B55E2CC6D8051466A0ABF83B784258037A8E64DA90C633E4C03AC45C1C440A5F39E7F93398682DD5573461EB52CEC17E6CC6BFB58CBCC649F661001

B87A764C0FDEF4C56B4D809B648F77C06B9DDD0EF72AD3E42B95F983759109081808744BF5AE6D7B7ABA77D416C1655D73A73AAD6EE458C2EC48810728F77FBA26A88B252EA2F9E02136699330A59876042A31F207F3C095DD61A7DF3F902D553C6BC71C5766A914DB0449F32B3E8D8DA385356E6BD70BA76911CE05BAFC8966B9032B9AD00F68C65093DA1030CFD72C5421B359CD03843DE67E9103C74CD639A3C0CDD48DBE3EBF916FFAEC54B3B62C9E8C940025A9A81544763F740B878B7067CD60E3935A326C36

81FA46A6BD2B31F1EC5AA73235A8E7697D4EF55F78CA19B5305B2D948F8999D9A34FC3A81CA0672BBA61F334D227CDF302CD8D0F4ABA18F1E4E24E14B533FB9956256DF5167748064EC99BCACE9C9576531E133AC943F501B0503C6E671BCB11EFFECEAA4DEC1A85AF0BF65E0FEB44C5812F30D393B2BA364A1F82BFFC383A2EFA8022E2BD9A049070635EDC860F9C4FC764F0929CD9545BE15F20F54D05E204F7CB5C764738529442CB75F86401307394AA8FE005149BE23477FFBFD6B5C4E297160522069B87BFAB

0D7DDB21390992A450DE608AEF28EE9ED0BFC55DE395910CA8363EEB56EC7A85D23C4612837E24681E6BC245CB7373FEA5876BDF836D66001267A8F758CE1FA53D4E892DA7D188E9EA75AF62B07251EA464B95AF661E6C2B6A047F660D62D5DA7B46CC8E2C3AD1BAEDB6EA66DB18A6ABB7E8E0C7970FF729B70FAD0C61BA21D1FF32F8F9A46E379C65F7ED71F1581F2BA0C36F0A6E572C7B0DBA5C1B6D48A7D7C80627DD94C77FF6D9C7E9A4130F202DD750EE021E4C4DC99CE6A2DE272B017219F31A3436C284D1D3

6F6596D29652B9AAF5D2B9D0C5050D40BF91223D77FA9A72473BA612A6AF73BB9765FA8D706595B7905919EBA3A9CF4FD705B5D7242AE7429147F211A2F3EDC101A298C614E02960A440EF108788CF9941AC007BF97B4A87450EC7F82AD2C856851F3FFE97CFF585FC7BFCCFC859D8CEF8261688525C4B9F5E99771FE20C2199BB49D98DBB9EC01DC4B334174ED6EB37C4BB5E52FA3480921E80893D96211E034C4789310013F9847952472674D265F37855DED87BF4739CE6311D567FC69591EE524AE62E4B727B8E

3044C9ABF1BCD3DAC8ED7DD55570DE771980FAE5E08F0220915D9FFA42059BFC589C186A82C49B7BF9F4FAC6F62C3B1DAF48BA94DCF020849855C52E245A226C9C45527AF033872B0B29A7A1322395A8239AB1ADDC09B6E184CF44190EB5EFF927E81752680E6D69093560251071A78E207FA032E1FD82D7FF73C5EC311BFC802013B08E58375ADF3CD8272D992B4D7133B81CC66BF34FF372BF3646016B5F227928388CD3480EC5D1DE73A3FE1042330E6AE75608C0CBA83F57B241FFD53099BF67BECCF2FF323573

B2258458F04AA1B4A40EF44D62195018F7D6645157EA96D889654B651B27B86C8302A7E7F0CA678E1C9351E91B7E28ABAE8BAC043D054D125DA681236BF1F58CCB69507BB6A4B2D4EFFA4100919020F90AFE9CBC02F55B9542DCEE6137BDAFEB40AC8269CB7C42628EC0090E21D709B2B9F08DB49BE5C137194965A4E0542F774E61656C6A2E740302953FA96ECD6880B61D86B0C12369232B957752C92942B4A8FC6DBBA8AFB02353AF18A1307F1CB99CEEA1EAE4344998CB21038A38F2A8D731BA95DC4378220C9F

9484BEAED07B72A3B70DF6D8E8C0FDCBD6D2CC6B29B7F77F33A8A039517FE74488EAB5C487D1CB931C9B5AE07A772032604881984EB823FE54F3F5F440D86FF1A63418430B56B106581CC8C3453D71982C6684B12B1BDBF6D5353654DCAD9285C2EB09FF7A5EFE43D05B2F26B46AFEB3F4AB2955A7E67E862A44F01B71DD424A9A4500AF7033978F2059634FF214E890E77BC3BBC45F8741CCD7E3AB130E7948C49D524728C7FAF1B3CC3104B8D563472F5D1BC71DC20B744951698908C37ED36965DEE5BE5CB840C1

6DB43A4C8E1B8351566A878181C882C0E1BDA59881ED757579FF34156394AF305472189FF986AC470B7F17B627E55C57D68E83337DCF0575EAC9662FC928A2D7658C09EBD6C0F666C485AF7189E153F60F5468FD02D6E733054559D35B13F2A4F3C1AE748514E8D83D832FF235E0408616307CF4AA1B19777E6BF72765411E5A9378C54162670FE0D1DF4DEF83890AEE019E987109124F7BF41BAC603FC26F355FBE4D707A0F9DC683ABC0DD7D9A133F71F40A310FB504AF25D4FA195895511E1CFD359C42176EE316

072B27D45CC45E9845072841306FB527E0755B7E55527F7DDA7FA5AB6F4BFFFD46337365BD115F48E5AD41AAEB4F2EFDE86A8063DDFF020169254138CB35AA514620C2FC3898D06AA4A00FAD3A5D368C0C2637919BEB3E3FBC9835B1A0883B5427C1964AED0704FA2B5CBEA66B4AACF122657DBC0417DD772AFF20F3DCBDFEEBF658C9B94B98A2E6DA35C532C0D1F43F2BCDEF5B8A7E90925D856A0BA530043B950C76135A0EA25A1CD7621249F7ACC11712BC962404FE34DE72C0F52E91FABFFE3A7140A6F9D562D4

ED27E95039B6DD31B9BFEE14B3CD39182182E0FF5DCBF2442DEF75B5D5C69495F14954E7DCB64C7FBB276B082FB463EC5CE8D02ED89C8EC6D6F719ECD345FF5B905AA9498D373B39BE82B9FE4E37877B6A385A0EE7C1C54D4122571036E711C30C7054A8AFCFB3F655DB1D1F99B3830C2BBA4F650CC32F52C92D266D6EEAE469722AC429B8007B6F38EA45BD2F394BEF0C6A8BAA4D68363797461EA611572C611237608502147A476423FA828450045528DD49CB57D1EFDE0B155FEA49FD8475A46AC4CEDA1EE131B4

FFA1639E2D2575B210DF7DCB1C563A427F540D8773632CE9FA53603F371529B81743D7B8C9AB294F00C1E36A1A89CDD327986BDC928D9B70915E1B7F0C3F4E3FA696B6EE205CCD19CA887DEC11DA5C361AA6A1AF51DF5BB31A0F451858015BE8DDCA3DA116A6B1494F17D7DCB3D550FBDBF6FF5B5E1F820D722FDAB610E0D1E6A43D84EB0CDB85D5663513B655C38B6FD45B2853FCFFB0E1F70BCFE9F0CBB32ACB2F80708A62DD5365EB17B6DAEBD320B205CD4DA186BF8AD62258F8847298871108FBBEFBC2F11DE1

1771B6D8A5C8FF1238FCF009780DAFFDDE99CD48990D244F0118637CFB23D25CED46853D97CF7268484EA2983AA5E49C0448BCE91368F3285BEF6DD3709FACB0005D0BA788F8790B4AEA2D97B7E9655E8972B305EE0AF63783DB2337F71AE3C2945BD8EF16ACDEC0CEFF00681B6CD7FA4686DE7A39B2561DB26B0ACB7D024A6D72623A7CB122E867E3097A45FB106761B33F7DED0D4B0D1560EFD0CA30B4B87C8CD78BCA3908282C21262811EBE6B17E30659D35CCCF209181D813DA195C4F2BF2AA8A75A8F16C9848

92E23A4619680ED3FE1D5BCEF125925196CB4F5257624AB34FF11CD9B8A9324289844E3C3B8C57BA3F2E69914D6F903131B3ADF44BE4C8C97854C346CAE9AE1D86A99E98A8D44E1137634F4868211C95410F116B1A86FD49562774B06104E13EAD9D27F7EE63C1B0990DCCA0EF08AACA52BC144BC1CCF55A8020F3273F251A5B6B4016A68743C9EE464ACC5559B63786FDE78E21E1BD7A26C77D9BCEC13BBB21E8B7FB4B1A575E16E7E4D7A32455C9662EB530AADB5807CEE2B3E50ACC0FFF80B4CB2D8C614145A17A

6C3E1FD7359E7FDDC7131DAB620CCD55B5A6506E6980A649AC68C15EEB2356590AE7F78BB8499F657D79C01C2921380D41704C2E216DEA2CD0D4A6BABF25B945939F8C8181010982C482C7E98BFD18FC4B7253B4929A74A57D687C03CF4B77F54CC64E15824641D2F7E6C1E659637A7126D57BCD48CA5BB3CD9B741CF270E21C76144EF975BBB47023718AF9D85153DC6E27D9D01149F01F4DCA39889534623BC4776A7CD15C9A411B44918C849F382868DBCCF7E96389E236A7FCEC09C104863169F62BDD8FF62329

E0B47816A7F86C5DFBB38EC346829374FDE8DC05C11CF9636C33073F9558711E7524A1A2ECC7462074B63300FB875671FF9FF3F37BABA24C4621338FA314A5CE6AD0D18DB3D33D5FFF6A3304A96584F3A0E1761DCB5E6D7CF6DE7FEFC78CEADADA4DAFE67D66E8068108110FE4F0B2DF0A287340F1E1B0B51CD781969307E210B8ECAFD26C44285F59609E31F832FB579CA550E94862BC50E083280939F8C8AF68E36361773BB2A0777F0FCB4697DE251EB8DD44DEF8230B9CC3D4A713B61CED700057ED65A5F5FA17

E03AFE6D7A20EC3FACD65431FD4CCDF7AD087B1DFA4562389C8CC210C7425E1ADBB63CAACA728B9832DE0F3938587EEE315396FFDCAA7E2823B1A6F9C202103B4ACB630B841D403792AC9755E36B9450BD0EF2A661829B9FAD7B877D62A40E0239D1C7D139CD92C84ED70716D133D4A9BD8D3B422D729074B7CDAB4C41FBE1AB0087022C903A6A4A25DDF30438FCF4B2AE2A32D66BD083B856E561F7B58B305AD4C83C42C9B0D4FB4344845694B93536E89EC11B6CFC31FAEC80E407D2B64D36AF30B6AA1F4D26B0D9

E909711E537562E5E6DAA03CA3FF8720B8D27AEE2E00B1D9637E190B5CAA216FB9D2131DA0D7F3D8CC50EA40E94218513C12B871F75C069EADA786B1E40BE1053883F128D8E12C327FA169CFB3805E730502A2ADA96CC8B9FDA9AF9E1E433B4EF5899DA75CA7669B5740BFC2E53B9367519704F39599D43B5EC8EA9D9800A362B7CEB9C84AD13C2F9A3D05C2DBBFF918AFFD6B8BDBEE1837773E9C3D5A3F9F815DA202186B81AF517228F43BCEA4B8F5FB54648CA9DEFB66629D01E1158D877901B8B6122D0FEC2E86

FACCF1E77E714F99E183A019CB36E36A3BB7C216F6C2472B231988A592679B0A964975B96363E726D66082D8DFABE721CCF8357FA4B697281B887EBA5D959FD920A5B8F984F1DA0D8B19BC43E51FA9AF1235F2B357B4290B6269B64FE2D274A17C18FE41A95BA5CB34100BAD70C2D932CFDE87D0853C48B866E50ECA14FA8702D4FE24E95FA87CE1000C036784EBB2FB50103D2E65DEE5760B17F7274A8DDB217DBAF5095193D676FFC0231DE9D8A7AE6F23B7A22B17A8F87E04D4333155975BCE54C4BA7BDBC24AA1

100783F347F7CBDBD7DDA698040D632DD034BAF3B3BCB639C23D184489CF1E5C83D022559909802030D96DC91B6CEFF15C9C2D602A5223E01FA113C2F76B59216742FEC590A840EE11236E46E78638068543C3EA3F7D2E9D6805DDB94566579F57FFA200D6FFD806AE8E27AE8CD2C07C4FE2C30DD24ACB1AE4FA7F76634450DAD3566DD2269BC0912E3DE3E1DAA251FF192A54AA1ACB4D629E02350F480BC569F0D90D615F99EF00C915D6C17DBB791A5411BC4100A070353911A6F59F2DD30DA44C9C70806CB78D72

AA21E6E3B432C3CA31148C949EE949839948457C38649B27BCFB3D809F3367AC9F5DEB38E5A2205683F81BD9FDCBA3822972AC067C7E175BA2B425BB320770631196ADE5100322071D7CBDBE6231B7834CEE648BF2AE6143DC364B520723DC63C1A86CB281708F868AAC8CBE4264C98EB6A44845A2A351D2454038C826DB3C1F75257FBC22EF2555BA080C71CBD5A4DFC039F7BE334E04845DE70C9731B92F4C774728431665F4FD4CBB736AAF2024542CE60E808B814A02A16EA68B5974A314F5C6199BA161815C21

442CE4FE388D69C843925371A020EC8EEF998440497C7DCE1A1DF233D20901CA6EF6FAA2995CBC6AB73EC6C4DF1E7052BB321E622ADDFE40704620EF6286C2A843CD46B1D15D6306644F54E0CC80CB2934E9E808A587391FE26F3C400C25EEC9AA60332F50218930CFBFF067519C6A24A72DEB73A7FD02D6F5222EA7BFD97CDC53DF3D456BB3F19E4527A759A53070CAD2FC179C0862E3D0188DFD96DAA6A7F708F825CFEBB8D0E6174B42206780C27C4181C060621E13ADA00E6BC4EEBE8692CF0AECE36C706218C0

FE40628E7DB4FE79D4725B02B6758042CCECA3D57697188137B29251263B1B40F59053CA8D23625DBB7E1B6FC659D1319506F15AF95027D3F532FDE44FE4D0EE033B984F6C3652317167F41155F4B7C15A2473085015169AF8704E9BACE4780CA431DD288158CD8DCE9662AAE1AF94FAF3A6C7C2CD95E670D15A70C7C730810ABC4C01C2BD4E3C37897A8368D20BCA72D5195D7B3D927FB6285D389964E5C7FD69951331E218C6681BFE549E7B0A5F14D3328931872A135977A7CF39058D6D09A95C7872156BBA17E6

03F7004F119543FC2E0F9675BEFD17467972AD55A3E1938188123DE67AB55FD98507A0CE31AE847CF81C28EA83A53B3D50291E610D03B09D528AF87CDFDA20D694FD6597E4BC0B63A7F8DC1BB5693986B5845CA3F959C34B590F69A6CC17BEBDA27742D2C9C6775447B9FDF70888F1D4B25A9EB8BD5A7AB1C733CF240878D045F651E735928CED717ABDF8F1A828993C1519001D254761C4D9E8A8CEA00F9447CFB7335C688CB1E8F8B6C0F6ABF5ED6E7E53EA802EC7CC35BB579DE5EA0327C254403023C2F2146293

C8A2791515BD9C5B6EB86122BA8D982392C250237DA52FF9DA304BCFDBDDB31373ED5F36CC7677681C077C5DE383F03E992598B1F08933AE211160F7E86E1EB2EFC43684437F234780D625AFD9764A10E72B10672B9E9715116234378A9C8BFB4B0035F0BE2A3EA92BF927D90AA800A0C65F5405ECF3E6F9AE234F6256AECC7071DD7998485D818C0F6F60F88C2FCF3BE1C3ECBCF057143D5ABDCE28A400ED82613A14A6BB03A5E7B28F754A0490CD05B0A3B027204E0C689E9EF9CAE05C1B5658BB33E749BA9646CA

7199C76AC3CCF72FAE441F455E8FE4C1A925B0623DAAF08966346479F372F56ECE84C74E06D6742CA231C94269447BB2FA1474AC52BAB06D37B8E761D5A8C6AF2FD3B72A1757E0B5CC33B517AE310C630590A9EAE0329CA49F3BFAD23414653DF624CD2AFBFDA66C53D38477733A0D90EBF39F234AF04A4CFCB8E754999E6E0935BC0D40182AA4007C9C4137F087B0716F6690DBA50BF6A78B7BA92C6856C8A2F2FD0B64AB09D52F63E203A9531BF8B7B63F8B0DE4667B633AE0719F626A593B9D169901FEA1DBFA5A

6E03BD9164C178D66EE1CE749B857C299607900B9EED083582C07A0D330469FDF03DBF9FF0595D9AD4866B586979962180CE1E4221319AF2437C01B6440C5C338C752A3E161F49FC14FBF1CE39828C1D307B2F5B71F35B6E2345DB82B79B7AE0FF4AA1D5E3A71CD71BE499F9EF1914C526EF642DC6AD7F9661C827B41E8668AA7C6429B2292B7D6E5F03FBEE269C30FB89B1C5EFFDD8A533AAF28BEC5A91B758C439FE982F1F8B51F5FFBD0D2761C33FA5E70020914FF7A7AF725FE9AA49B7DB101322FA7B86A6BAE9

9EF93084163F2507AC1C516640A929A64365E870C85BC16492B135C8A4D5B359D0CCDB63862F883B256810C4502144B515CD92B81110E1845913D47FA538C96FD64DDC8C41CA3DF28438C0A407B6F29D5F8314D976962D43F770E4C864F68EA87B28F8BA73A66E880F45DE49E01017DB9360027381EC2C396B73B0A273BF6445D32A2B3157A1639809B5FC5BA8F9658B33C297BE9AF79C895790DF0F114A13C2FBD8006986F1C00EFD1E4518763B9A6616C61521AC8A04F363569C39ECF16EEEB55C9D5242D24F547C

58214DE011E7E78E2F46EBEEE5C2E96F3CCE21067BA4BFBEC9E4A248F076F80DC4AFC06D9C7BD8F5194FD1A477E02619ED308721C0D1D94BE9690565A3FA9D7E8B629415EECB952EF7A132266F4C50DDC16C3AA253FE1D73180D5F9C93A47573DA1EBD67A073C2FF922C42739E82257C0FF484B63D44D1AEB8CD6FCC9386DDA12BB82BA276BBD399E3FA08464189CFAD97AE113B47D008F13B75EAD449F4A8B811B37A390181A2258CC3518D7CBABCBE400F4E5E02030D67D96668A519EFF76029A39822B3743E230E

32B2744D1106B634C686B5D191719032A8FA8406D9433498D5914CB3531E43D42C8F35EDED59B2DDD6257E16D2605AB0ABCBA6B1B6C607E6117794C808170A2574DB99FC5BCCC072A88D7398F2071AA75B08F6F6E080ADF3D80F61C4FD13B7A37B8302460276EFE1CEB7FDD702A03B36FABF6D38F048BCAC04226B2A6354192AA011E72CBB9C52BBF6CF1F00E1A518C7851341488B0987C2C456598B68B50EF3D8888FBE99FCE934CC8F6EC02241CA8DF04486DF1ACED4833C17CF2098B873C13CAB6228DED4AF2760

0E4947DA17E46843370AB537475C80D5A3B0859A6BEE3FC0AECF1FB8971C8D342C444D3AF991C05269BE78F389CA2762CE800DD97211BF48BB998747BD90D32F702ED1E73593F3E3E5A42EED70C23771C2D8174C6D781451181205FD9A561775B30C32A8E98A7DA696D50393D7ECFF644C712BE72D1D1AD0CD876439C85476EECD344D4B79ED67BDCE76CF40CB26A6432C867C25A87D6D20D0DC983F1AA30E6F088E2F1D8206036B88E17457E92D6561F9C768D0F484834E1D9DE3E31BA2F35916C84BE1738F4F5902

9656B007ADFAC642551FF9CB7F446843B6F19DA4F7165E4590B9D5DC1FF2CB39559278EBB1CB65CAC5BAAE4E85D267B15BF5A5420BA508A4588B031BB49497B86099CC59F167AC57FA9052D645C68226DD2F0242ED689E58948233095CE9FDD1737BD2D2ECB8AEAEDEC649761429F26035FAD8505B2BABD771BC733FE3317AF2B69B7D5A01B604CF06FA3409BFFDF2834F53A9D959D6C844111EA428210B3B4402D2DFAE5690680A9E175567A53EC91029B0C3A8CA78D7C07274FB95912590367DAE915CBE69DD28FB

65024BB5574E37920E9A5CD253F9AFBD603D457F7ACD84728124416590CD64BFA174F0B382E05AB2C833FF827808841804197BB5A2EE24AAB1D4A4BB56D6CBF7B3D90EE005BA96115837B0CE4EC8CAC4803602C364D37F0252E0A335D24B99866DEC9E66DAB63A3E4992E7123D745EAC6F2F5231A5847320455077A52BC22BC66873C73746573BB4C37E2611A6D0679B8479A3C0C161B304BA4BFBBC96196D3490FA38805BBD325843F1C870D4EFEA6A85A9D358F6FDB24E3C5B0A2B73D0CD1B982F3FB1B0862C26CF

F83B051264F98D4F9108F3CDDEBE9255DB62AB8D58BB59CFD7A13EEC250BCB789143BF4EE34331CFD7EE42E7893085AC507C412B45B7BC9317E06DC7BB847C02073C42AE96FDC626FC407DC7C90678B2A0D0FB756D7835B2595B20FA557A49F07F63FC58B344C82E8709404437A3635FBF9ED7481DA53A42B88E824D6DB496B22C40DC42CEE38F1E61606BC4F8742D432240AEB56257DC37EACF5729CD6AC42CFF9AA0E366F17AB3D4B7E952E1139CD3444C64DC33142814B690F3A2FC19956FE1A830C2D84DAB26BE

8C458C8968616878388F4F3C9C51BF650B27AB112463703C0F0A5F4DD3D536FD7E4B972DD01E263005DF37592D722F57D79E198C4FEDE20945110CE813B403BF276A89CC429EEBB953AF1B5D98C4546681B2741CEA2E177CBEDEFFF4D8745E55305B91394A90A3995150C9D780F864B41337F417C9F6D77B267B88F0C75FD9C73235053069E707EA282A80CB59FF4BE295372574196071C355B029CEC2602EF3096568D6C255693B340C024B25DF46FF72C15AEB898D97CEFE57524E7F23A0E3A7FBE783338B15B9E6

C3CBC681EA6B7C32DEEF4C6FEA3E57C3588C73DA5ACB74B523B20FC06163E2C745097035C37C629C02EE4E55221EAAB6146B58512B2E975665E7B3E79107F84812B7A8A96BE900FA968A63A1E6FBB64654171756A48FF7278EDC445C2D6E14EACD7C3547AE42E8563B3575A221878E174EDF5D372B3006BBA36FD4C25007BE9E30EA4AA07F6F731473F9F4B2482A8F762FC79571C7FA60CF05230E8CC46249959A2D86775F7784AAE64FE7FEC88BF401262D71E9CD6B2B0181EC73C906024E4E502619168C30359C29

D317E4B43BAE3C40DD11E7BCAB7EFA8929B3E06FE2C7A0B81F923E0A0D125FAC6165FC2650B3B9D718EB338442A6CD3BA2734BC1AA6D35D31709C8DC8010CC6C41C21BC1D12D9EBA15FA8C5A1482CA306563A07E59E9DB9C3662F9D73C1F5599EB772662B74BAFEFDCF01BD4E8F2B2C24C5212EB56CD92CF32193567E792DFE91B39A1B17C4BEF11D84A7F11CEFDF0EC1E2621E59B1893114F6F7D67D145BB96D6E8AF1EB008975D845A88EB7C47D8E79A4761A0E824446F9F0DC709F23DB9B344FDF0B6468CF95994

7AB948EB506AE7DFF8B37859D8C52703AD5DDAC9622CF4B66DCD068A1DE4B999B46CDC7E80FDF4113BC42D71F9382F692E07B90808CEF13CAB857945C95BA549F32552328A74339247A509828AE6FD45347F65B704E91C88970951ED2738BFA092733C1BBB06B0CFA103AFAC855DF187764D16867876EE4B6BE7F5AAC4BF5C9ED33C401E60C36BE350C271AEFB4C5FC875347AD9A1B5A19A8C5FFAD67ADD966B237E58F76B26CEC820DAD184AFF917A001FC2236730BB7EC81C9859FFFE95615E796C84A8AD4FF66FB

2369B98BC0433323756EF3639D76F49AE2EEE80C237A50D80508DFC2FF511958A6057C48E2F6B14C5AAC611CACF3DC3960261EBDF781F9E36188B7F70C7E6F4680889DE16E7C3B10FEAA13D8BB427F572538B3152EED9B560CB4212D1C9085DC63669F3A8EFE12525483A58B14048449DAD66621990CF285C3F714B7A24679AAC69464E1897C818023CB1A0E14B2A2F88FC92C3AA04C914DCDA0BCC11AF48A5C3663A709B18A2F5A2B58B48BB272CD261C59C775A324753EEC926FDBA0C1FA0C2E2D2C9B895BC9DD8A

C663CDE5E1332EA1821E2955588D5473C87BE950BA6832DD4CD99425E5C9421B05859DB64FB9F0599D42F3F407D96607EF2E68FE3380AC7D3B719215B894565287D134C23DE7A2A4B37236F79745904FFFA7C8DFCD709E4B158DCFD764EEA97577B9613AF8330C7608F3ADCD8D961355053533F9131B1C3F07598BD19C65437FE4D0B069A770240C1F8259FC348635221FBF837BC7653095A28F2F5649B1258830E742E2FF2403E59F060B3D02B06BEE1E3BAC2506FAA966889BE0572CF29D7C49441BB9E28593AB33

3E4E4A0C4DE7E6E921FCFB0AF6ECE42A7E74E3DA78B1AF97DB75EC90F299336C6223D98794AE7FCD40FB262CA6E13D276D148E76AF21F934B553A58C3F0BF9E9602E021D338C3C6E361CE3CF4353CC33213988BC3E33D235F7D01BA366E10826AC2A2F13F147A7903AA71E9E508E9B3082D3BA6F22B0FDF195D8B6F0530494B9952D7C4C03088EE13CEC8420F2465CE46D2E42B7C127AA735E09513D0B5EB2DCA80F486765EE48D48DE8E980DE79DACE22F3ACBCD801DA0F7604862A557ECC6F326C6F539AE855F7A8

4800D82B436CCFB555B5D2BDD4E4F68339070A9D5E101D35C5576C8372911064E9BE20CF819CDA7551A226958A22E0D17E61F0BB2EFC6203E81F680987AD74E63B546F2F93DAE67421B1CD20B579C17E0C4AA3D511863E1A4190FCDC8B775659C7897385C838882F3B2790D1F32E374343BE455B4AB097C4FDEA5C0A3A41C28BFA2DB01B5F8AC545092F75645AA2B9EFD59B19A20A4C16511CA16B175775459F1CFECC2EFF90CAAB93541E34E0E4879BA4315D276045F8EBC425E661FF475C76E0896D76EEADDC352A

B663D7ED352BD516EC11F389107684C5886D27577DD6358628C49D892A42C5760C3459F6163D35CAC77815181F6D9CA3D7FD837BAAE42EA4B25EB60661C8B7491C45BB8634CB58820889C272C93E445DAB06417C5D6EC166FC96787F9F0A6D62F087D50615D88A3B55A01785D4DF07C7B70F3B8FC1EBA9E50412B357943C111169E9CF52CA501A39654FC3CF12526BDAD3925DFE2932FB079289F8E60CA5AD75C335C147AB9E65F5933C79059279DB4A58AB175210C641CDFEE2E4C6C5301ABA734EEEE9E001D297C9

410713431BB7D644A8E4F0831A3DFF84AEEC52522F4E9A1FEFEB3A337CCD80B32478DF80FD801496EF37C6A5274CB226E4BE5A4EBC0A76EE2637D69EEF11D8240B173AEB06834E449D496C93C313CFA954E79128121E0D536783D5F95C90573C3E27CC360293D552C04A1BD9E7A270D5228ECC6F1549094373704C4BE47F68F485D6603C54AB16D82DC0D13F28C634AE920D4FDD318BB9518C039D9AB6D101EF31FC27BA8365F456A1CE06E55D4AF6B61F1AA9E69B42544B1777F1E533E3945EDC2E21DA4E453905B9

BCC0D2AD6858B23DE3A197EB51EDEA30CAB7EF9A4EEAEC8800A88FE5B10F1C4C4A9DC6724118D468065D7AD5C2E877216AD69ABDE583B25F90C600DCAFCB93A21BE639A032E50F662F412CC9D33524F73298847BD647BA8511730D70E9F40C227D4356594244A2336F28AE370106B1D9A4EDF1F7643F09FCCC31DD1B92AC0E40CEEB1101FC19F9A54E400AA7D79C05FAB3D0419853E1717B04B966FCA31A2ACC8698153A46C2980D0DC24843BB21AD22FCFB9138C334A030C918C2A4F2BC694438170E914A988D839D

CA4912FAFC51A0BDA5C0E9E63EE1B17733C29609CFAF4559CB6F8EE84FEF85CC0E289D2403D0D7C1144B33FCCB30659FF9A86A3B391815229ECFE1D2984C5B2F0B7ED4B2F138A644BD25550BE2684F8C0FEC80510C9264218B2130218BA691B6C0C76459B22153CA6E1C16EAAAC7702E048981290C31D9FDB1BCB721831100F9F03CD11A5B518B5E9F7ABC610B1686E8BD1B9775AFF661544D693B1B4E11003313AF1DD0E21ABD7217EE13F52518B41BEFB4940406282F8BB434B1044980943D611650050C9EED7E47

8D192B07A8CC2AE4622DFE3BF9D69DF5D7FC30A34FCEDC5C244149AE45901D04E9CE5E5F57889459248B1897482393A2FD6186CC8325E082DEC270632B214A556A4AF4527E7EAC3B301707456BA8C0A605E369EE32EB46D84F2A6932FE151B463C936775B9EC8B0A732F8F7AC66BD7C48B245B3DECFBFFAC3D453434FAFC078492A0B873ADA45B0F08B7366727DAF93D55A3E6CD6F768230A4F75EA6324AA620BF2D56E0FF36CB3A2E08C3284EAF28CA1927495E631DC6372FBF7E16DAB5E1BFFBE4E99999143EF989

5556283DDEFBEB4CF4DBEFDB670EFF7254C177D17516680F0CB745DFFAC4BA8E70A3811DDA8F53EFB8412D578DB0B78967326BE61059729F7604C3DB26DE022242320AACE70FFC2EED00BBEE43B65BABC7A602A3E17B53532D9C78258E8427CAEDBE0398850F0D999D78D547D5694F27AA86D01062B020BC75770B27AE791265CF57D8C35A36C6BE9118C6179F4CD0E87E8CBB676B73F546DC3FD4674B0AEEB9BE8D3B360676EB44240D84F9A6A39E184D5772BC52EFC9C7680636396D0E51E364828FE5C7EA5DD8EF

3AB70DDBA33667962D213523EB65AFD74806840E2E9CA6436BFDB7648406A767C89FBE037B976359E60F624DA3DD9EDABFB11AFA6365864B568586795174E9B8A4F5A3C31140B1E0E6B00ADB87C896A3C16023FAE8D0EFD1C2ED24AF46CB1AF921DD9330D9E83FD90BCCA9C9A1BC6CECF8E14B5598F776D3C65CAB9AC7F349EFAA5A407B6A1B6C3B5EC24720FFA676995B22EDF0C3958BF8CDBDE1B84F69920501389E498C9768D8767D66293FD9B166D47765981AE70BD3F1F03A8B8D04A9EE9BB962C0A3945FD5C4

1C9AF06B268F2BA3638269BB95B1A9AB40E68CE877F928FD771C1D55326013A95FD853AE477A5DA321C177A59FF22DA97876822B002704C76477B3E60BDCF1805D0CA46E6CE53D300E70533F15C77C13FFEC049D2860489E0826DDE17725C7FED7C08A2344DF761563BE9DFC3CED4C414D4394197BC26ADB7418B5F4E4ADE0D3837DFE32159AF9AF155AB16567B4FFCADA7410D684A85033F688B471DA3DA42D5CF69FEFB7188427BD128621CEE1E829467835528CE2C3DB88CB9587B68FB4FFC1867A0386C8DCBC9A

F6433F857681EA716CFB2D8E092EED7C85BC09C9D1AA474DA6E147D17A6DBA41F7780BCE42FE5BD4600B9F1C24B1FE19B003291FC4BA8B60ECEA5E89066E0F9CCE3FA2C5178B730958B5BBA94725AD06FA7EEFF815253BB344FCFAD2F7700A631B2BAE92849E5F65952256A68F8379ECAAF6FD75252F4AF06B8000F4CD7BD3878A5055C8030AF28E4F7856752FAF26DE8391449243F930246D643763B8E57EBA4652678D1C83263618980195B6AC7C37A86C8206BF84B56CAC9C3B96E40D57FCC3FAB3764A2440F8C9

75E5881C39B90F510D88A1F1C5436958BA285180B865647CB9306DB4F91551195E15C9E277ECDDF887BD48425E07A2E27C51DCFA68DEEB5FDAE19ACE847A76BF50E64DEE83C2096A3A26293DAEA7553D497A360FBB4559FDCB5C579100133514FD18C3FCE08C17A8458844DBECE2A6DEFEBB7CB7E6158EB95AC419FA2C776820EA4C6E73AC09566A9A34C16C3C77CB17036E8A61680DC3309B63506A788FCDB078E8E5453EB3775B4A990BDA69DBB14EC2FC626873CC3B8EE785E08D069AF8EA282B882775C648C093

AFA55B35EB89B21BE72320C6EC35F342EEE222645E2672E322A84B26703BBE0FB075EDDF94B00AB1CFEB7FCD648A016092088FB99EC4179CFDFE6ABFED566CC9909D16A6F39DA8C483238A0B388E1D7405690C0B1DB84F56AC226735EC9DD74FA37D0CF0EFB13F7D8EBC1F6455EB26B303F0CC649359E637097B5C71DBA6680374F9432A003927EA76B6972244C474FFC13FB7D8A1366BB980BB06BE1F8A77EA8497D935ECE50898B99E0F7CB68C57F2380D25CF58EA747C7472E14F259C22C76D9AF35027A00C5C0C

BE6F88E15BA291EBEFA62516EAEE1641B54009CC4150682EABCD9C1F1BCC2CCA7D32E101DCFAB83599FD34B741F629CF9402F7F99F12D39D745A4DD721720854DBEF0BE448E74A3C1AF1895A9FD4CA0179E4962E3225228251BFCB179D4E849526672FC072F590970DF0A1F786406408BEF5497DE948F45E11165507A240FD06566212CE2005D47CED962507D74778C1C2B8CC72B05A8C0950E133680CF3065BE891E3CA209F61A6C0D4DA757040EA8E8E87C2E9836E1CE3C8D36CB4FEFAB7C9D38FE622E36520F102

4566BC89EDFB9F8E7B34D74580DF53D1B13862A625A99ADEB2EED8B6343C490EEFC40F2EE9BFE3EE51D9BCA5D764E9B47A5DB9FB45459595266B39C2ECBC458AD4C70A9834E1940052ED476409EF9ED46AA0AA8BD6F329B4FAB6A49220ED6DA230821DC5587C76C63D15DB75873E63CE81BBB9263697E27C58647CB362F49BD48DF6818ED8F8DBBAEE42BB83622DE4D46904AF877581FCB7BC6824783B2390E14B233D10B6DE527DE3F1BB479A8C4D0258089A17EAF11441237766A899CD4BD2FD47B8021DC97F10A4

6178994134E7706257891F8BBCFD7D1CB131089B33C3F9F44465CD34D92F3338A4A5BE982416162B518DFAAE7802D12E0EA987A9ADDC30B857D0357F3F0E9B009C92003D9746641AA2B4DE57D33145E3B2218EDA45AF75B703C7765376EB8A50FB50133B46D4C734A49C3BC14BD6B3BF7AD5136BB7D69AF46EF0DD1BFD51D82C7916F26862E0C9AC8AFACEE4797FD3ABA6A531579C3437393648689D528CD1CCF99FF01C94362E0005FE6244F5FCB86BD44F72698C0BA0D2B389E8F2F89C72BE5588A27940AED8E6E6

9ED2F0AD6BE5A34D4460EED88470D789412E45A61D95E462DA6805B93FF142AF77434A5588A867786836842A13BE94831174DD01655412892E01CC80D53A1114FF0C017FFB27D588F6FBE58E71F9582A734FFF73124A4E7D94B7FAF718D7ABF2298A1F611A0DEEA7751FEDE2234EB210561532BC74F13109749957909F2805ACCB9DA6C57166051099A8E1091620FD62BDDE5F18232BB601994C3E51D3001C23701D9AE9429B21EB2394A79111207F036235065610F9D3D0653688FB43129AE6E3F6746C8DA5C422EA

65D964B2A62E8DF5BA0A221B58254BE15C92316349678A9E569E9767B539A60D3FBA8608A08807A301DA1C1803AFE72925E852C9D9BCC27D5797198599BB310C8AE9AA60852D125642A962C92FCCF011140681DEC48E922747C8555031B3E8EFCA71BCCCE28049A7296BF8A5A45CAB14287C550B9B7F20109AFAE2FA06F8885A455F6C1334DBDBCDC23B259E6964FC849125E68CB4FDEF304CD6195396A1FE3EC06159CCCBD40361352512A2BC0BDB56F6C5B013618E5D2189B5D3BD0D6F05D8E12621F9567BA5E627

02DC60FB5F1AB47EF9026B2D3601A6C2F53B67FCEE8888EE92038D8D77F4DF6A982CE6C65E258B60E95EDB3E9C551B523C95557D88FFABFA496000B1E1265E9013DFC5981D344B59424056A8B00EE1F78499C54A3B36BCE0C54009F338D01D6ACE5D68F82EDC3D6CA3276E93D13413FA76E17CD4FFF70A7EA4286809E357B2978C28B6A54F9038247DCCAE91981BD182DC65E69D09115E3656156F85D61C2F624C333B50A657F9659EDB17EC06AB86B43A249918893E6BE6E28912C0A6E87BF7AA92E5CA7FA46C8BE9

0B5E33927DE6CA086055292E96647207A37C2F415E5B33DE54A2E461402EF2888470DC6F0B79311ACEAABA8A347319ABD7FB6FDCF57AE94842A857DB6E6AEE0090B11C5FD98E20B1A6F7AA86F5D1E5FD0EFDA1D639591DDF29DEB34C3EA02FB4D3EFF6C3584203090EC162AAC39EB8D7AA69344E2E21A4E61C9D95803E6DB82DAFE4FD65D60DF41B8CF5F00C87BF677AC34361E910728D3CBDAB6EF5E7208D5CBFC3CF1F486508C527F392C3939025B3E1F7611A866B16FC382335464EE1442C5BCFAF4778AE906207

57E549D919AC463F32C6BD2D13C68DA2C454EEA9EAC1E12E5DC144FFC031E829A0D78E8EA9F6C3E093AD3009B22731A1ECB6EA3FACEBFCC2CDA458D10CBEE678A48FFCC2B25133C1576F0C385263231C28289477C4C587AC35422B057BD2F10B5A12B1A0B4683BE742AA9AD845D98C1447BE675D68736F7F0C14540239480E52E65253A3CDB10B77A8B9FE0C365C5046E60BB09216BE6D7B01CD8B1C4E28B937E701F4250F396C088814165D8A47FBEBED4857467C9C129C8AA1107F7111D3D56F035495793AFD916B

AE8F43C28D23BDD7C0BCC7A2E6EF6A147FE0799A5C49DFA467E388FBFDF92990A2669AB9CA5A7F29EE4803EF7E083E20A48429056686436A366A4A064DA45ABEF5C46EFFF3BBE2A02D66152C852FCA3045A134043AC5D0AB8651D0EB19DA15DA04854A7112D4EB7E2FBAA7003A733020839005539AB19C6DDA2F77AE6AE53B50117161B20DBCBC179F43DC2D827831D2C4BDFCAE9492E121A1B561FBE67C3690CC646C0FEA64CE8D902FB1C59B10A203A96C6CFF9C3770368F1B86E97DD00856F5B06AF7A4ED52C1F8

2D4DE222F03CFD14D25B1BA37512F347F98E2B1626912BF114E7545B5536C5929DE14D7D6684518DB39028831B4022B55063B764228278CCEEC2A9D38DBD1D88C0438308BE3E07CFE7CDBBDE5D9C1631FDF65DE79CB798C88DDB21C3E915983D92C1365C4C2437599D10BC65591AD2211844A5AFDFB84EFA4AC617ADCE4FCD2D431BCA5DDF4697E3EE826F3CF2BDC88D69BD1F49B30CC8E44B3113C05DE727D83D9947779828E588DFCF6B0E3BB9816A0F408214AB5E366F811948D6224B828102D9AB9CA0B31685EF

60D8357D60819D1D017597ABA752E67763F451FA09FE7128E95C4EA6EF60AFD231ABEBD4C5E7799EDB3A640D99798B1442268FB6EBBAB026F1C0EBCAF3C0689CD8DC0EC4F54D247C26BA1B48B1B5C8F439B3C885B153B11C2FEB89E2951348E0420614B40601587A33EC429B50F9D00DA0E4D719AF22B4C3A03B4611D07C37879497189F0750667F520022DEDCAE5829DEBBAFF5A15046BDDC0F271935E182A4A94ABCB8BDEDB5C892B7EE3A070F89A127D1C742A1EA6A59EF6E64B343981D03835E001C5203E34404

B50196B9D0E9FA4FC0092471093977B4F728F999DB03736EFE4670662CAAD2B3AEC31EAC38B0B20B4E5FC51AE63E6019627FEC0AEDDC37B6ACA3B43731FA8456D8EF84F18212D8FF5552C269DAC83D73E675578B63B81AC122018BD3D0097B62E27655F6D0AEC52761FAEE0119CACA714CA14AF20D94020D6A197B0BCD480163AF8A4F6ACF788FF42C65C4A9FFFA36EE085E7454E5AD29F3A0C0D936C770C942C1A76C5D34F991E5C1F12ADCE95DFF95C085A914A94D390719BBCDC12E0CE7888164FA4F2036839650

835C3346349BBF8B5AA7853A3EA6AA31A86FFFD784A346701E4783E087EE33CFD58B116A4684545C61205662C7C5AD33EC962FB464F5CC3C56313CE18553D5C8A7534ABB8D90BC5CFC07ECEEF345F300624E176CAE9DA2A7D28A516FABE879E104D2DC58F750063C71CA70C761514FEE90D0E451E35A014837AEA32AC92B39B7AEB81BB669CF7CB5E43A65F9A591648FB54A9BCEAE25A10659A235B8D953254BFDF5B3C0C1A24ACEA9CA37246AB5A18687128B42DA0534067C2B23E4C6234788DC96B5B25CB85D288A

089D129F6B61567969754F4915B335D6D0A77D67442238C669D3FD591C69B8AEC194A187FE22652049BF48D894B49906748C4444808236D61064E5977B2C683F6C577B9F9E52C4CF8F6A7AB49CE28F7992341E9865C2F477DC719E5EFE366117555A2063C112B0C486B918BAD78F593B292099DA067390605134644AEC7CC90013456260D8649FBD91A02D80CCA3FA3BAF9BC72E4E7DDAF089837B3012126A015DDF82551BD34FC4F62C5CF37D37DEF5BEC77894A08649E873249164D61970D93FCB131EFC73308256

093F67100D4206B04429F83C6C8D24CF2CD4DE484721275BF3EDAC2ED839DFC11837D3B779CB511F989CA62D4179E88343B8491B3FDCE197CD5DD5F31CB2A803276577E8FCEB548A3C5E73383028E39B0B4C462AF3315A2B7DCC51D89243C553632E6D333FCF17F2A62A3FC9C74B81741831049EBA7C1FF5CA7A3181639F7679AB9A83304A1B797FC9261143455646D983B852DD506B443D1A53D0C24EE8ABBAE85654A6E4735F3DA0907D8797C9288CC4452502C04FF16D851D172F443C395497B70C7D76A33B21C5

BB55FC02A87802D460353B9967A70EAEAA83B9E329E9C9DD5803AD8A1A51BE01460349415D596ED15D28CAC66ECA74514B4044A8A220B3344B3D2ACD6B6D214DCC9A1A08E49C5901246616D69F51EA5B534BD513EE6B31868546D977F0158BE460C7946EADECB78639FF1FEB8C32F93503FE3A49BD15ADDDDB76C8AC905E6E391474B2BA5C9EE87AEE657092F6A7533D78B5415475DE3997289ADE9AEAAA0AF982BFCDBF3B27AA60BD949A67F8DB351645E451F83E0210EFF7F98F6A632DC493B76221A2B43808065F

EF50B979636EEB939F9E21D9B369CCBF65F29C33D5D7A2C3590321A2E9E0B36DC63B9832A88BBAEE60C993C8008A155322271AC00206B79B43101920E114C2A600FA5260BAB18287271B3E60E261186E9DA7C754170AE4E627BA51327B4CA4A2942DAEF7CCF5BAE5A3C6C1A4BDF90EF408BD3A1EF6C13988F33CF72D2148F0F1D8B338D50FBAC7904B30AB0E58406F832D5EF27AA57E82374EDAE26A88BB55E19A3DB8532B736CBFCCED21437B926ABBC25F0672BB3BCAE17678F17A22E6353F04F224E46349519C78

69C3B5A4C6ADA46491FC788D2F797CEFAAA495633D1C010AE62FDD2F64CB080E9BACBB29E5CD5972599CD98AB13E7276DCDCAE1B299DA2A855A73C3342DA8EBCFF515F09E80DBB5C8CAF370A1C89A49221B200BFD090B27F18A4E4CF02B4A347D59608477C3AF1D62C0B3B42E035E2E0923B2F70DC661783B2BC00413F15D4B147B07CFAC3E78C0030900B8683766B665AF17DA5F469C1259C77A9FA9454166BF7B83107DA51F235A60EDD0BE279CD81A8852101636EE8D9032C692C27CE05CF452E46D2BAABC62A3A

D36C8E525DA52EB855AAC60B12B57D82EC12DCFA9366C5CFC87B6A26671B5B919F9D2039F71B595462C3AAF7F7A6DDC6F6CADE00B81A98C7F3555414E1B36282F8872382B53547059119AFD2D903A7CE0A750CDC0E285D4AAB1BF44E6710CFEC5F6A390DD572122B1129978EE11C64666FB64A6CAB13913C95B38D382FAD9659D862197959FA4CEDD87B26E6D5CD56EA2DDF5C9AD94706A7E04E4D9AFAD167862CC4CDA532137CA893ADB61B4DDA9FCF40581074E3220D83D99E9987DC11BD8D7AC029BB1DBA7AEEE6

2F05052AE2A82E690AC8CAB2D6CE37BA5760CFB41DBEC096C721D75F6033327BF127888FA09BD44BB959853BBD8474228E490BAA27024A107E73EDC7686733EB6087700FD5634E4B49A6BC5A993D5BA1ADE6EEB695B3F339ACEAA67FC3A3FD01C8451A424A233E11D3FB68DCFE64396F4A9D950A82C199439807AB05A61D052CEC7E4B27CEA43ED4C7EE69D5CB69C9B286B8C9BF0F7EBE844F28FA4F95E8ED688C415BEB4EC0380EEEF28C4DC7E805D3E360C889A9F99BA7BBA7703E6D40A8770989F614FC0B6ECB26

73480B3D5CBAB7BB967D3AC80A7592F95DC207400D03C45E68F419C287DE1DAD8FEBBA3B36B33CEF055F823ADE7309D4C130BFBC9E853885CB38DEE41404D7AD5E0E7CFBEF49FEA4B70601D24968EC6A32A02FB33A3EFCF8691C3ACA5F1C1EDF911B429B7825EF7CE90603BB81930B2FC003366CC339D98069D31EDBFC2806DFF6EFA8AE945FC65E4F6F09CD2293594050962A44CCB26531171C5F947971060CEFBBF907A333D69244BA1318FAE758F939B86CCC0C17EBE442FEF5FA76305AFA1B8B02A05F092F0FD3

13B9B6EBDC4E0E09292B66C44D57412DB2A8ABAC56908C960936C9599158D869961FC6584937AFD26AC7A9B1F08E9F476A5CCD2117D021DBDA45BA33D87E995A8C7DA2EF5686F2DB801E7D2A1F658B0EB1CFDFD7C313DAF7E441991D1F40B871F19423F1BAF8DEB244561D04241B2411CA6D722091AC9EBD66B0B0EFF0FE4EF162E510EADDDE5B49CC6E8B475F4725542DB82389FED08565D9AA941BDB76D5166978ACCDDF830D64B73ABA1CBA866B84A1EB4CC8356A6EDB48D1A738299B785A5FB8CF89CFE5C59D99

D0F473AD099EEBC1C29561F1AF62EBBF0F62685CF80037BBEED27E4A3BB28B14756244380C507443FCAA162A2FBF596A92735A5880C19A7DF9A5A4277FF251869A3533F9C46F821BDCF3C0C669F404A8948D313DC30C575016EE2C97C95374567874198FAC6D5FAC8925E0CE1251321EE236DE8C67F737990AF4F42991EFFB1F7DFADCD51C0B694CF3E253AFAA50FD5DF0FCA1C8E3D3542FE3F03BA3FE12E913F0E25E213772767730236D0626D69E9041767A66D08680DF644BD63AFDB6B845C08825FC089FE3FE09

C6767FF876BD32575D345007160ABE8DA7EAF4078CC61DE97CF6EB8C79123E8BB868B3531FFBE55191428E2A218EA867A96C8C6A50CA81114D430174F30F0A6A14AC8CB797EE69D89137525FFB34F74D8DA13FF0165E4B7A4C9CBFF6BA56976A906EC8CFEC147C21938C2A0176657B9291CD7466F944C52A34639726A8D2705606DD693763EDD35148EB30344E9428696D4BDDEF84C8920AD4904924443B532FFCF3F007BE2FCF542CD525C6A9C9B51427B24E35FB054EE4FA18008303460822EC58386B4F8AF1AC1F

B8A9D236BA58FDC61866C6B4F546D2C71697C6E4C5FAEA5CF75966844564F0F75FDAE2412E20F2CBDBC0203B412841AB3513585011F38FE3ED68707CF2802663DC9800B20E43B85B5FBCB949533551A550C983434ED29A7E59AE69EDCF9B835C275C2DC4229A6AFA61735234818F4F97C3F084CBA9529DB1619CB8635C7D0C5AB9A8E38456B49DDC3506A6080E086729416DB00D472CF45BFDD05622F36727D3E10FBD6EE940F96A2A34CAB83890224BCD3DACB058CE5AF3F02FB997C1A4C9CA8028EE040223E9715B

1AE1496C0AC3FED3308D4B948913708042BA0859229344CAC3D1502CE2CE7CE69EBDF51045EEEFE0FEAD0C26D4AEFA53695E96FC44D5E6FB06711A3D123310D2BD59C49222341737A88E71EEF4063961A59B7F2C44FD5EDAB21AD339AA9F65C6C90DE4F4ABAC2C65AB5211E622F79992158E5DD448BCCC67D1FC0172F167160F5DB5387E42D995CAAE7DD53A93B8E65D6821B270A451E066C3199831D00DAE583506ACD02D5AB126EAA81681BB8C5B23FCC98718B94B3A397B62DD8E0AD5A69566DED187A91760F82A

F84C4446D46578934AB6B4D49BBF746B1F9A3AEE2221C61FDBE159DD561AB8781CDBA10297C9A980A797A1CA026DA2203CAC57A5659B2D0FDEAF924F0D97F39832A4C9E266F57AA3B0B2A616B0A8A27DC4A734990223F9209A75241BC0A38842F7A80AC9C02AC5C5D5B810B0945908F7ED906602FE1937548FB31E6D81297AF61108EA09FA46583FF7B27F56D07CD2B5ECC2D0FD3567CE8157A3431278E02E3A688A34EDE60A6DE90CA123803CAC4349D2FF0BDD82B20071B6EEB862C280D52CC0C75D215DFE797D86

369FFC28E01B6D890ED06FA942756A252CCBCA9E25E3D6AB93B7D9872B0B71E744CAFF1D8DCF5C5B302F19E0411F0D3935FF1CA867BEEE89C9530DA330E64B7FE05C98551D2D9301F23BE2B5E078CD6CDE92A2EFFF755B9BB2AEECB974C2E99B3CC94A75D1076AC748EDEC5541E271B756EADE31B96C2B3DB8D815E77BF69BE8365E33FF8FB4E0165BE7C48AD647A7FBCEBB83364D79D1CDB019CFE4FBDFAFAA641FD30507B691ABDC924D9E618C9BFF7EAE795880807EF752E815F9011D15B8CE413A7B4E203D9808

0623F4106FFAFB99299E63B0F94D61E8AD5856AAEFAD0001A3C7EBD8A1A83532A02947F148C0AD1E78C9BD3D2844D9FBEE52E0821272DE371272AD05934651350F74CFFD9527A6060A29026EBED195A034DA077AD60A582F3213F58EBDBAC6CFA57DC2DF8AD3BEA5DBA2A49968A2C2F71DF05193FDE964DF226DFC02BAC7F1FFEE3BEDC29B1560FF82AD29227833758ABB2EA54DCBAFA92BAB00993CBC769FE9BB81E8645887B10E12B7DACA36C4B651635B27499D516A6D9EB375313EAA72961BBF4E3A62A0A373D0

C57E6C588245C84B578547C30E3150511B0F17B492CD8993FED4BB637FDC8E940B669D3DAE618B53AB849BBCAAD337E50F003874A5A620D49B77A109E0F31355204F44968760B96F498C614461BCB43F2559C988E84695EDC99E2925FB2B9ED2903783ADE1C6AFF964E2181DED72FD9F78BE1A0EDF8F27700288E2B703A3E9C578BDE2EDE4A7977A913D280C5942FC839BE96FB886F86287BB1C76DF83747633129C1F022F60486C1C41F97ACEFBC0986562280E0DCFFB60B54F678E6B9B81274BCB54CC14333C7F74

FDB62F2CB078AA73A62989835CCE912111478C3672AF6F81E73D7AF6E609EAC689DA88DF3D641157429AFA2FB7F027F8B0158A6DFCB4407527441AF54DDF32B9517AB182A2C1FC9C7E42A1CD79A65FB8F48C2A5F1B6C026F55D8C9AC0159FC95E52552C85DF6575A0569219F3C2ED52D927DBCAC206C81BBBB20F6A7C149653751976814AB9F2AC75CB0105A19E9BF7B6810FC484D56FCF8324E0FC16BC915EB86170FE66A29C560D7D3A2CF14C725191EB7B6634C8E7462D4F1DC6C84FFB1FA78B6EBDCBBE665F8B7

69F2CE2E7078DFC42BD38B4E30B8E0623B1835F5EDF744D82E87C691DE1D565CABDD4C4040B63BDD5533F769701F84FDE934DD7F89425A0733E0B39F668A27BBA668E640DB502E3C4E1274B8A35E6341F31FA6DA81B42FFCB6D275E44DD4E758B7A0FA37B87A428299BAFBC42D00FA31DDF8C099A34EDFC4A0038494D036A3262C13B0B3FABD2C998FCD18F342ECAA95949C87681CBD78960220EFB525A8E6278BF0A53410D4A7FA5585C07296C56A3454F6AD8F5C95BA68E600A1120AAF1EED827244212B72BE464E

595B3049D2A01A84C7555C1F0D64AF83881EABC774E5A04F4E9AD0130244C6F04CABD8513734C10226FA4A9956439E72679F28A870D6E1B57D970DC94F2584CCBA75E9BE6DC758FAE27832C410BFC069B875C91EA2B561BEF7534B05CA33E0A584989C5BF5852242E179B52EC0611E7EB2A58E101FBAD04946145D7BE284F57A0BA431A6118864F93BB9994FFC983004ED8B552D778983619ACD27F696590CA56D383289A41618BB8B8E8E2D36B0050B85DF5EC1011634168E717AF0030B1E219390967EF3ECF8351A

8C870E70AA219A3E03C2C142CC1E2EDB4B75C97856E196B4AA06B85BC97E769BF8F0BD612C1F60E081362581CB8A6FE271391DEC952F876181E71B5E49E991E16B4A06738EFC0EF55AAFCECB4C4159CD2DE4D335B4D83956BBA0B3E43A47955187C878B3E73848175E2BCD9C7F84B47E70E938CC57A49F61BC7A7AC4FCEFB752E0CAAFB95CF1DF431980E9AD692EC7588C6D6133BB2D4850F1BABC8E533CEDB885B2E8AD62288B1D03254E8C43CB94F8EFED37E1456B8AD79619D7F18E383B4ACEC3817D566CEA4C8B

B25AE9D733B95543FCFE21A19835F6487876224660A82034FE8018BB376D6C369740D8A60F468D078E4911833C5900FC0EFE8040792CF97D2FC93718855877A0CAE10000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
 %endeexec


type42known not downloadOK and{userdict/TrueDict known{TrueDict/render known not}
{true userdict begin/TrueDict 8 dict dup /version 28 put def end}ifelse}{false}ifelse{currentfile eexec}exch( %endeexec)exch checkload
1861AEDAAA5472E4FDE5287D4C4E53EBA61D516861E6B44ABEFEA3F41AA6265F561EEA329F99C57BE14D599EA9627B771E47DEA5C3F4348515CCD2F77B6D7A104A321F49A3F7E10CCB09E0F18E3DB6F66BEC10C986A33AEC7BC881833274B6807D8D4F3871CB44A265B633E2C2E88DB139C9E100B819F507490A87FBC0C2B35F2D264C5BF78F3F

BCD4069AED9FFF05234274FFA12D9FA2205799ECA89AE87295C17598015BFC7E1C31769F9496E96CA921DE592EFD6F1F750AA4E6EC470B6C094EF710F5D52F74A4DE887B9D64E60C8194DAA4A97549158F44A258BEB54121B794A70AC586FBC1C7FC08E30901D89FFBB02A7E6B18AC4AA0B87C05A4F8FDA2F7A947FBA46D1CF7CFC24DBF78B2DB3E9768B86982D8312BAD12A1A77862F21120AAAD32F686E88749CA078F054DAE900EFF33DE0F508EEFD7A605F271626FE8C629A60556339D879D0049C47350BD3F67

C051B5610706E203DBF71AE4F022A716D1E1295916BC44576C02C55257ECBF8F5E9978ABA5742AFC086D508004673EF7F634C37BEE15A5A2D7BB9BDF95946025CCD907FC204526D009010D953A648F332CB7C1F4C094C18D16FF74303642A5C522129A1320CE2375DB5354D81EE91BA309143F40F2EEBE2C923FEF9A2E82D1192AAA3D65E1FBFD3A2FB898B7BF45EA41B2D98C80E736CB4DF517AD013A09B8027728007E608709F2492DBF145A782E5056A54677D237F743042C77BA748DE556814E31BF124E4EA043

081DBB688A63D3DEF0A54C44AE435AA184180B30C6CEF3D9515DDF1F1998974A77EFE67EEA6F0EE9DBCAF5AC7F49AC49F5DBF093A96A943DB165BC81558F72DEA242A46B424C2245E92726A0ED5DEB702F488DE84A248137C29812514D077CAB67AA0BB30D18431DB3A0A03FBBDFB84593889E622636DE8DDC651512725E702F174A0AC617E94F528DDDB567BAC531E9D4A5571124811FBD53CE7B519691F99392B27E62A9C5C904F9B21521D336FE10287A84B2B6A5DEE847D22F7A062777E91B6C48E91472CD18A8

C3F2E5317BBF9EB737A46593987EC1C972C27FA204FB59D59FC6DA487EDEE3ACFF771A6A2EEC32FE4378B6FAE314454605F271AC0579EA382FF19D7E75DD5020E0E8BA9BD142280D59F39AD362E267CFAF0145997A6AA9602D782193F67F3EA1E199DB42CB9C80285FA7E2E28F97E5DD05E9273CB9A6ECC5C2DC7F47C63FF4640D840CDA0F775B826EE06CB8F318F1CB2A79249C639D68FFD1F0230121442185D825AAF3AA95D179E8589B0A1868B4AA8B588DC9F27E366602F73E7996DE83E8F15F1DEDD3477E05FC

2186F7A4918C3F3BCB5306F22685639EC6C33EDBB70A5C79C627CFE9FCBF7605C5D64D5CC09E934E14FE746AFF7B3A0033202D1F10752D79D418308AA0D16B98A7373FDE8FE28F0FAABC46B65949463E020580B43A99D355FF1424998FFA8A242AAD3D2B57CDAEDBCBD7EABA48D401AE54840D338AE621A21C2EDF6056DFB5B585F84628376426111D97DBE58C944A6B9DD9CCE9FABDA3A09083A5DAA9408CCCAAA71BD7CD7E6C7B29D23D9643C1A33FEC705C9D17F44AE8F1D88C672397588E4F07CD8C579A63D380

1D58E6D7C178A4F0A502269531576132BB4EB53E75ADDACAB718992B06FE4CD1A03AC0CFDE20E3E2306E8C2763A1CF6C49EBF66608AC420174133481D6068E61FB009C95440F2E1988713E5ED9735061AF2CE5149A92218F05819CD35697C28DC00BFF9DECFFFBBC3992B99F2A42C2A95B86672B8DFA1B5849B2F19F6FCBF37AF2C7F0BF87931209BEB51C49C00822E65427DA586AA08A2CEEC94F076743042AF365B5DF679696F5B30857F4D00BDC3833D2BF87D2915798604ACE456CD69DD4D1CE1DCDF0E8A3AC71

0F41F741A0622A13AF8B0136DC17F7C0B9D64270F955CDEFE3833BBF97D5134FDBE11DBC7B6391581CF5E5281D1C6F1085F963566955DABA32CEB68076C62783870995C468A2CABEE6B0CAAE21E9536247017E15F4F47A225FC53786B2B5CAF485F0F3E093C0953A16C3D1021FE4EF6DD6B9816E422A39AF591AB03F9DC76E052D7E8A0DEDFDE9D35BC88CBB8FA4693DC26A71C8D1E61DD5CFAF42890360F3806E3E02CE56D754A6B5DFEECF9EFC2513C4D63AD9727333B4795A2C3B071F9F7778AF76C4B057B3B1F5

6DF1DF4BC6D30C5ECE465C2A3C97BCE6E9C7675938671CE32379D589C8631A3A465CCA2925A0CCD58CB2D85A124C5A27BBA1B811AF904182E5323B087EF7A916BDA8F253FEB8EBE44FBF5171C29BD204A4E10A812AA46AAE0B88E563FB7F119F6DA9679CEA40E9D66B3198E6ED8ADA6A79ECBB657E1234159DC811C66C3200027CC9DABDC508D610555C0462AA274018AD7F25F2C9FF6435C257B9CCCAD57A220AD491B36C62281CC95AECC1EE9FCFAE4E6703F12A6642E92606AB70B2DAA9A03E69DBE7F814B16402

A58C50956106C9F9D4ADB6D06ADEE309A3771BE22559CD7419EC67FA84FD47E3CC97546344C982BBD63544860BF4EC044274BD67C2AF0A7352DBAC5183FCAAC3D04E9F923B2C7389405C96B3C71418D5A6DAAF8422FAF3229418765EAB198679E1BAE62EAD505B67C84DEE812A2B727A2188F476A90B0BF78023173BDE4C781D557C615E1871CF361C494C1796D06925125A70606863198B0FA1496B04E367F8527E641080B185663C9A32926B8539A7B4077EA27352C4A0E41FD869D11317F0EFDAB26C9F0FD4CB60

6BE364A6AC5476A532EC2CA5FECBBDE484150E0E2A9CEDDE066D821D6BB51085FB372EF5968DFCB16FE13996EA1161091F7298A9B813684E5EC58B7551461616D433442C7770D4670C1C95584686E50EDFC5DA2C9EE66B498D8E2B1F204F308D5631F98B668E3EA969233326797183E444EF1209F1563B60A8332B73FF6B511DD6FBF87DB10086D7DCF66EBDF929C6F4E95FC74CB4C80789CB8DDC7A6DD6E4935545E55FF777ECA8A03B3521FF2F5FFF72E749350BECE6D478A0F28E179D639F3156F54B5AC0292A60

99C5E7F2D50C792A33E3338EA4D654376C86FA665386EE6624C5AF3F51FEEAEE722FACAEF4553F795A224FD8E8EF9076824042432EFA70AE978C1855C17199232B2F2A551888E024F91062856EA362DF7DB1B6882C27C4CEFB993D97D32A63F25EAD0CD8E9B55B96AED3E06AFBCC0B2A228E860F05D371C9F8EBF67DED0B0ED24E230D8E79D01C16A9A8E0B85C32025286B884F807EE7264C489D0A289BCBB711FAEB1F118922D19D9481A68E598DDF17ED26DF449F0A9484367FC5DCC6861D05A8FEFE4295BA80D69

6A9305CA6C47CB279EE520D313E6001A82F3EED6B7286E1348AA7C7B44D8796BA71C0461BA5CB0996AC4405145F0C2B2FFE30F61F52AF08C01A9A53F278AB66EB33335CDE3FC01753F1E6B68B8DC251DEBC8567CBE3BE025E2B0792F8BE0D914B8F729C223DAB71E29CAB0A13294D32014BA1B3B91E80AE989EC7A91835B3B8885217B6A32106D672E49840C8D4EDC19B6777DE7C3D004371EEB3207251A0D18F3CAAF47B4C555755551D952B3EA9A3A1EE352DB161A9F7316A5110AAB33DE798BF69C366EF87516B4

E0ED22D50A7142D964DAF7FAEBBB56B93742A1606239B52854264BA62424E6FC2EDC6509F5003F8B6E3618DA9900523A4286D6E78528400A9BFCFA1E2E2FDDB09FA993DAE2631392B55283AD51D0F7FA006BF43BD3E0864E5E8081ECCE10395662E3E0C0E5986CAA738A9F58107E4670514A538BC828E067C0D425C60CA1CF2F9714A150277834678620538FBBE3A0172AAFE0AABB26FE907A1CF99C84F796784AD5152A0D0B14C4E45AB5E2590B3BB1F17119FC92AD39160856C35F64520EB3C49F826E25A9A6CBD4

115A2822052C5B9F56E2E7C0442D0498AC55D96A91E4D80DA062E644EE7C3C04E14AFC84521976FE27AFDDEC1CD1636ED6E0259BDC590CC5D18DC0461002555AE792B012ACE808FA7CEE68FDEFA04CAD5103D76BEDBA015904D2F7916F0170CFF5F6B2D51D2B8BFA231394D44F64524ECB64F4170BD3C2A4A5BEF2841CF47C5E96551B5ABAC4A9C43A400B1D0236B14192A90786E15B642D4AEB876C943E41D667ECE444091182FFD5673936D0609E0B4187557362A54DFB75496622CE388CF929FE6B5AFEC76231AA

EB1B3AEDF82831CE8B4ADCDA23ACFCF519D4CEC99919ED5D3C91840EE3AC7C07B71F821CC982709A7FDA6230A91BA00B25ED9F52C95ED286D6DD80E3C12B496189521968ADA7147E4D0E812E156DB9195A33D565162427906F907A9FD08E6E1CD5D65306D219D14996B605734AD3B5CF200627FAB98F1ABB9507B618F1DBAA43212B450B4B431BD5C3F51C447574C4FF57696E6D5B773269A63A9A1033830C5CB6D984BCB32A8506D478B551B31A71DF1A215C5A4435DF7117FDC8945B02A1BD212431FF861D23C29C

AD989BEC623F7809FCB26C736163126B2C43519CE72D9737711741B2037EFB3A60000110D7F2C8EE16BE6FB9A8FE906A742CC5BB3ED52A3882859810CE3813865B352620F08B9FFA16C10DC601AE8CEFC83AF1360F1E4A2BBEE41D4EF78A387766C750D16A9E88E4535B9CF7641AB0FDCF69374C26D7BEFCBAEE854A352591D0EF050B20A22C584FC27EE179BB29AC543DD35C61BFC87810D7393E65E62D7EABC544A2E1A316ED9F7C6244D36F5BB0B473F81F7F58DBEDDDF5C377544FE67A800B7CF6A7D2EBC63984

140E8EFBCFEF2B3583DBA03AE52CF6496A91953948F8C23332CD31C0C312854E7238F3646567D681FC0BA32146EE448D8F1D1FDFA1B8E5188280094C8E470CDB430361EAD7A850F80E63B7FE1689B68FCE20D46D831153DC9F9DAF83FAC7D9ACB4ABF71E9C4656A79AB46638AC59BCD43151CD7E50BE3730E64D583318BE4FE0E6EB06E58E5B9C76C5D32229405E0BFCF7D4A690BC13A0793FADA35FD6A3B7FA47CFD258676D6BBA3DC726AE19FC410ADF5DE85017D480DFE135958CB4345792C3C7EB6F50E77671E2

625E44DD6BB3DDE8B06E29EE9A3CF2E1A01C7EC7143A447024396A9C960C4D14EFAEA510254A7C73758918A6CD7F94057C147D037EF0CAA4BE7493F6490CAAB83713F7831393E7443B8A76D4D257E457355FC5595358A697D4E6933A79E1DB23839509626081B3AB1E91D405D03A92AD926178807653C4F0BCE1EE2D37329D9B9ACF684A17DB8C077DE318C122002F21DFB7A5C56EABE159CD516B825A4FDAD6060C468278EE32FA93C14CC75C8782863E53E9AAA36890ED30DDE7506AD5F12E5CFAB963E3C51834E7

E06C48575C98E1DB702DBD2BF82D1596B9663B34FEFC46D3C588626E3044D2F0B69EE753D4C0818D732C2735D6C8C8DF959D0BF6E3A38BF11525A17892949B59AC01FF0CD275B84DCC04D47488D91660582A57DA33E23A8F127BD01C46F4FF6A282C6EB36045930C78DEB48E5C46F602EA986DA177065BFA94E4C9FC80402938EE0CE9ACABA6F1AA8804FFB3F2031BE98208ACB4976DA470E31D5C8034633404D0418D7E788C04889862E9EB5CBC1757AC01137828EEBC4E9F47A0F6BBED728CCA0867BF80D07F6A76

ED8F0FD940636474CCC71E1E7E10E8BF28ACBDDAB024778D74D7D951904D51B4233B29AA0BA1561F998B7F4EA1563262F6211861C58924AF6F163EB77AD68B1CBC7CBA8A852470306FA40B6FD08B64AB59BD5CFB2DD82E753E4A9EEC9BFA30254D1DA54E857076D4DE0BAF672AB31587A7DF0756A6B2521BE938803099DA148FF163854F2FD3EFDDEB22CCEA8E0DB77ACEDBEA3420EB257A65EE2A08B74A1D2705D454B487DDA26622A307796B2E61873FD6C5466490BCC303C90FB3CB148A77B9C3F0863E9F4F61B3

6540C2E1C4811FFF5C7BA4CDDC807CC50B5ABF5FA3E98C0C54EFBEEBBD78CF5261143E8DAD1714F25F855DCCD517AB636CC29CB6BA014D6577B1FA2212CB985F273F8BB52F75FFFBF234C8E0D5DC6BCD8E54B2E77545FE35A406A6C26C483EB346F52E86A13A694529F2069941A71541D3F0E1988F08CA3EA553EC909ADFDDB33759646662A5D4D8EA8CE44A90D5C60B444F169452067B3581425A8404403924770D83431460755C75F52BF42D23131E9C704F7898D7E7F0B8B88A623A423875E59F9928C79085170D

46934A8FCE39624A513AD99535C557C6CB3F988670C6F752080EE3920C528970633D9A83E0EBFD1D35B903A07B4ED1B32FA91D280E0E3EB0700A9FA6FCAE70F99CDD1971875A56C8F6185B911DF58B4895D0F80541450B9B98E40838E66D869CAB3143F528BBE7D8CADD33961270D231C7FB5660764842CF195B654E1D4DF4359C114735E7412C395E628A18D90088E4EC88E72CB1B4CCBCCC7DA056458D44AFE5977075AB0C85F531A9390B1D7E7CDFF9EB719A4DD2D5D8E3D5D74E591AC9583D7822E80D420D7869

247150077EC2D448B80671694CC90BBEED4DAE7B22D425E3103BB2E43AA4501C6183A4E9993BC194C0381B986CD7B6F34383FB5788C8D0176601B1B170CA5D4AE28916F03E945F331AB97B3C24952EB445054191D62D9EA083B9E6DCE09AA5534CA12E273A55F5D594044ADB7B3083B7F2442F5DB85FE2309831F492DC3CEC98D63BF21686AA21856E3464B0E79B070696AC7DD3E367DA2CB7D9742C1D75ECF0DF46FA1202BBDC861C6650E98C4C49FA4B1C74C1229020092B0B7E4DA40FD82E00757FEB1A888CB16F

CF266C45B6B9A6093955A0DF0C1E974648A38E1B6650A21AFC284645294BD4F146DA9CF8D0C6C5ECEBEACC6C22A57D735DF41B67815DF8A5FC7788776E603067B6A1EFADC3DBEC84F7448BF9FF23ACF233A5FB850FE1F2374A324C6EEB0042C41BED091772AA22A139CA382D7E75A40D666166F7D7601D86A1B0FD71B66B7C1BAF210B8F3AE23F5EAC2FD47E8A8D9C4DAA78A0A4236CF79BE24A725E9297E5806D80D7295F5322031B083E950C7BB9BF79E759D724413A6CD6E84B3AC84433988E6E36FA3922FEA549

05C7083197823B196D316EAD2D4F34DA595BE04392AF83405D9A3695BFA739B710E2F187776AC7CB3E6B97E3B52778532DB88DA829B54CA0757C31417A436723327046F914656E1EBA3B6AFCB44C30744A37AEDFCE4A4B65500CB7330E7392189D38BFE1C64D330ADB7C6ECBF5F58987CB2F41023C5C7731193D2EC0C8B6845436B8803194442B6C8954EE5EE75EF02DB6475573C5DAD8E24E1C28948ED8B05A70C7655949E120DF205173498E05DE282704552FE9E73FCEB17B035836390C4A0D31E14AF9D4DF5728

028F406E83E045C0A540EE5555F9E9F1DA84B220B09CA9D196987FEC306B73B061C2F3BA9EB267EB79BF1D5698FFD905661C0B064008D6E30D752CD07A1899F82D5D85329CE49B26A59E7720CB375FA0061332FB2B440B4C9D00D299944DF24F8DFFA6BD234AC7CC75FF8BA922B82CDB5E86F8147BE02BD0143B40E7C91FADE5F124B88E451F0AA4D9465591B7C5A381CB1C9B1D0A18177DE4A522BE7C1C205C16E1F1EFDDE7FBD60D1537A94DCB8A60F8A688A924658C5E74A2D4A74BF909C0AA67B15EF87E86EDEE

33693850C16CA241D854127DC9E63F3CEA37E7C85CE58CE8B5BFF264B2D0E4B5F03B61BC8590827D2B9D67A94112BF0EBA0D1A88861B6B64DA1EAA6F12B01D53275228E69D6BE2A1788B37B4EADC88368310FFCC4B006A7C8F92F09CD31316BFE7B5ED6DC6A6981724C6A5073ECB4B3F2037BAD7668513F3D9E9EA5EDD92AAC08224C417E10068B5647C93BB5A06E6507DF914082C0AA9BD6E7640F5722ABC6E7EE7B776D28A27C0E1E026E68D2A44A6DE168C3F363FBC42444FCC5D5EC89803BC6AA7A2C27EB18F57

A6BCD4A37378E5806C86243008BB05F86B93FE11B05AA369A56A0F96FD413153ADF87B34869869C52F9466321C8E57B3072C18B6273E668D7FC990192143468D9B61EB407A6E094A0B0835ABA9E3537E1F974B6823EF0F8EC023499829CEF7B334C56B16842ECCF40DE0BECDEBD5DA6FB917FCE49AB546FF0E6817C01D14BBBFBEE65C251359F52C979AB9C12579E06D3C0658D64A610CC9B84F7D73AD1096A6C43F5C2802493EC5C6F9D432FC26CB7E45FCD41E3A7829853F3380B61D83AEF2F96D18EBA626FCB7DE

CA9B801332E321C9E62A345E1C049A934B6812672041EE283871978F3B019F2198F0C9DEA713003C1FA37A9CD8E164CFAF7AF95F92723D7D03B533BBAD7AB92D2D4447E9188EC2667777EDE290B6734BA6DDCBC687A223D929D204FC7DE8432B8F3EFE8A5E9A553B9F531977BF00F644AB91EE41F5BB7BE06CC69E0759F752E0BD618D6909C4F4868A2B1BC2B7A97B3A26AA92543DE059D30A4EF8D9C62FE5CD6105E10B21152B42E5C05380A0015CEF43BE1F8C1B81BC5F87D507ED9173DAB1E027090A5F761C9807

06D688D65BC737F3C9FFE403542D380BB99FF60E0CB0C5E1707717C4ACC6D007BC4C67A666EABADC690F0A702EE2C9A36595AFF9AA1DA3688B7AA16FA09FB5091C19AED55CBF6FF2373429E3A6381388E04CD77E94C4FED3060166C2E088ECC53F79D2B77E753C79ED0BC3D13D8F33857311FCA74520621F98A451863B301047AB3CA58DEE3CBB1A7287025113453C7F285B84F9A64E2C66E1940893B7509FA368E73B533B09898A6ED747207C10F6B1ECD808388101C8751D1FD32C8056205C83E4DE989EDD725A4F

96F5AD02D7B4A63E8A26CEBF9E26AB8A21E1A8B87EBF4A87513B398B912449361CC59CC0D8F46D63B7A81553D461DE9D9B46D861D6DA6EEA5212D81C4ABF9C591ACF6A1759AB855FABF12143D12F46ACABED307F23F1C04D456A9F607D99486D874998CC52D294AA5170555250B67381B9CC77F6155DFDA86A084CAD623ED172EBFECF8A1FF6C0294875B6893B405755EF619519F2D8C2AFDCADA5964B811C8B6E422DF13C4AED13A196B2C14FA2E76CD26D4396E902A5028E3AAC8B98260451589B88CE2B4C4A23FC

D8C769E991F90B335AEE9DBC3DA3D8AA32772F37B94B0ACA332000BF18FDA20DDFD7D65EAC88EAA2D1155EEDAC4A62B2F85C66B92872DC9319807D8C62D3A8D95E019C42A097A54DD80111EC24130A559CE3977A38CDE8C5C4B37E52FDD49EE956FD66CA1CB0A29AC2D482F0E17F1666573D4890829E21C4C3490781E48CC41A05578FA0C0CDDD62B78086FB9DE87378B2D0CA311B3C8807F5EF8402CC15327EC85E8212D6739C218A12D88E7E9EC6A8D00FC6CAB1EC025C90D491EE305C81721B1A4BD257A90B669D

5861A7BB8588E0728640A2622DF22BE5E787F95F0FCA3B5B2F24F6B4A6D3CC2F5FCC4873D999DF931FBB3FC5591247533BF53013985FF8922FF44F74DF9C37E314BB6461D071F144DC7B14871D86D7C8A01ECC05CF4864B855FB26761BF9562F9E03B6A29271F4F030B29821EF2E4A76C0498A23E723653EA5E63AA2E23AE407BEFA06F5A178030275F5406496672AC4F63EABEA58EACBB2C750118B6BBA58FF0DA32FCBD57EFC99A5AFE649C15854D7857454DE5BCBC9FBAF4AE77BD4254E98E181CA1120D6ED2EDF

7AF37FDB68600941A21AAD5DF910E39095E30DCA8C0AFCB10C80858515698057F19927E2EE5A0429B8E7CD73B6626F559EB49F6DE9B8BC4CCBB41DB84683411A5BF9CBF510A1C6B39BE54E1C6AE7A6ABB4EC3CF251BF27C39DA391869D43D6BBD1D94464EB3D8BF7FF46880C7A101914A7A6B6D3B4512D514DF879182CE8CCB9C62AA4D4D323806EA3466CF9D075FAC2770232BD693A3CD6E0C499A70EFADE31E65FCE6391B1F6B9B7CF9C8287080610A019421FC53A6D49BBE7355FB6B33F70006EE97DC759759878

79BE914859436935D909004C861F24B101FD74C679DFA9CECC0F37BF61A4CE7992FC0D1AAFAF9A57C2DDF23409DDB40F509F6B14B6309BE827FBB68886E9BF8EA3673DDB04C41A30D3BA32EDC6916C40DC693CCBC47EE499DF9746AA6EFCDE477D8ABCD27AB4C771A48F0472125C5B5F43015C42822A5CF19E15F261D50A56C688FA6BFA7CCEB62E623E7CABBADF1ADDFF86D5E87F721A827EC12B5046250446CF89A1AB266F7CFC02B4F8F15AACB92DA3B3E9E9475220A6EC6F0B0857DE23B842BBC6363A04CA52B1

5AF815034089F571745CB5C144C235D553D5A10244390A5DE45CA12E290E3C9B7E3FBCB02D487C4BF540463F0E4808D6F3F9D55C8435A3D849ADE039B16360A94E8B8ADBC69D6B61DB605596E3BE95AFCFAED67A9D998893A5E0F93312F0B30546E17C69C35538758EE0BDCDEC9E30266745150C12882DFE9A2533D13130EEE36C0E05AFFFA422DA6355BBEA19A312DF159F094811E86F4D78BE476113A61C9C5A0776D138FE937580ADB80BD8B1A98F8C0587EB176934A0D143AE32B81AE66779ACE3D33325FF2D36

A7648CCC8251A79507CAD09F1016BF77049987E3A5A328BBF4A90D70E906737CA56FF1EF91BBB58FD7E769A547CD5DB3663CB11E446B7A3A3EBEDAE1C3CFC06A98AA4C90E98C5BDFEDAE934CC61E42CC2618D2FBA426EA97202C07B49E17CC65CDF8615687D9AE6C616D2BDDF14870E0963DD5E2580AA6911FFD57D7FA8D16C90039117526F3DD9A6E3DFB1E554133A4A421CB03CACF15551E192D32FAD3EE410D661C4074E208920AD8A6FC4D0F24E668FFBE9C5671D3C3F28EBFD9E95F49CF9C03DC11FC1D9AD85B

FBAF725709769CB8F461866585A2F1B93A074ABC5B7FA4548DD80F4EEFCDA32F5E6545982D977B5F11704E73D08BEA4D1D4D047A71DC3BE69768E7DDD4B80AB8BC90130A3417C8A41A3899A4DDAD64FF917C686BE67FCFB43F8B508A3D2E053B2F3F97C0574CFD340FC8E7A92472C420DA811B61DCC55743E8D5EBE6250B2E9CFA606BB843C0713F8976798D675F8E173357AD4DB7E3530C6D4A71ADFB3C98246A2FF0824EE3980F0B1A3F95DAE33BFCD4EF4FCD1FCF780A949A7EE699A3ED29E0EAA42F5BE3F85121

2E6883A12A168BF6125BFF6F1C2337581A39DD9E2C328ACF36646B7682CC50B75B2E1CC2C9718070A3A3894597149A09F2E5EDC58248A1EAED9B14E48F13C13C2E0221D3C0981DE04A08CA10C83873DD3B23F2E310CBFB3DF372FF257B2B6D36E63AC9DA6C3081C7DDDE110331731294ED962C65ABA1F9C9CA785985EBC965A93DE267AFDD7F6E3604FD3632DA3100B4437E40F44AC98396B4425326DBBE0C88B189721A465F33DD57D05C5BD95A822549BFC611F90B4C49A22B76C6006FDAEEBFEC18BBDEBF17EF87

2DC140204FEA1FF1E131C50AA4126828F11147B3882AFAED5D9C1F6F1B9F43EED8D0E957B909E333B3C3E7FDE21A292F9744E49392FAA46AFF27D13743F550E5929EBEF5985DEE2C0E419AAFBD130C5337B9BCC51C442D59D4BAA87F1B5A7805E8C57918089FC9EEC715517D9FFF8E7036EFB4D1B2CEF2561DCB7B2B235E69565D9FFCFB8B1460B72CB421745392BD327B4FDBC4C945BF1A3A8EC0A7C7C948ACFA90E91B1422AAFA8198255DF3ABC02BF1603E985C96055D0309C328663DA3FBF769A5AEB526A8C078

800526CADA363E38A54572B48D6A9213B5816C95139DA6CEE71B4556B16584FF56926DC2FCA6BA8E88B3566A6DBB4BEE5135EF7DA7B38322F48B9190E5A9325500A1DC6FE3AF2EE8374E660C2FFA0A6D21E4FF1B4E94B36F6F9BBF0AAC62FDCA5DC221E6BCD1F6193692F30F57DEA75D69A264AA8910611B4BBCFE1D880500D8C78E07534BF53C70ADEACAC02F6047497DCA4F03967AC3EA09AAFD6C5EAB146FE2DA7A7C99D4E5D6E29B1BEF93689FE3C298AC0A38721EF6A10CCAEC71D8AE2F3BC5A7035D97A702C0

A828351B8B893765C19DF8A1AF0149F5DC1B8AB2B323C5633B8777EF50509E50A72FF57E84122914D60B91245BA1A1A4E2F8E31B95EE3FB4FDCFB2DC491A9D7F6475EECF5A9F17EF41AC8625C43DD20A72C8831871B579F8632AF8B09BAE31F8793A476B049B51924614DC8E3FF6CA0A16F27DA53E2F5868B0A565A50057CA468E3B90B3B1F73AC20CE8B82CF833DCC50643F174F071A5FEE7A0D9BBB3130BF9A1A414A63982C0A0430E9D69DC33369BAF62D1BA21A3FDA8F91324325716F1286DABD1CAD913616A13

17E6F8EE4F44D4EAA7D3C884FD264CEA35244306B1E503BBAE643B3415AC0AF2CD3BD92F0D094214CAB6CB2EE39F80E878ADE0EBD3CD716ADCD88223810A423222D5E7A0F453D15AF6C6F0962C792A49744792C2E102B49B2C900244C4BC3B22BF161F025E0DCFCDCD02A49331EDF0A1689A6A7C6BC8AB29D462719FA5E89500FBD6677547AAE6A404A430B34C4606580578C2848DD99F20D8A98F87900713EB037D2517CC0FF2E3D9E52C20CCF0EC2F8A2191A802DBC8D4CA8C7400400CB43D21C1E7236A31205935

7776FAAD77FF0FE525CDF7C5E462BDBB4EA539088928792D694142E060BE791F3AE6DAC08867A8493FFEDF396F29008E651B304839B54064D5FF429077F5B6D4FD108F01CEA4439A2348A287444D04666110958728D055BF922219B482FC6DD8E341847BAAF605B59FEAEDD02085196F029B129688A6F52A89230B4C068E42540A2283DC504C01733DCF0D2201F7382097057215A798FE7B0287ED6578DD63449DB1CC72C81951DF59F3F4945F696015CAA02C8104B66DC66CD065F96AC793534A644541DED838DF3B

F7BA3C87D4333732B9C70720895B6B7E85EFCFC4C849D6F3CB74D0F66253D7A37C30DA58FF79F5A008F77302E3DF3F77CDF7F6E3658B99E4066273329CC0C5E907355C0678E173E5135B24972A86C6EC0C4C6EC82E6CB2B28F00D18215D3C84611004499F211FF45E690C30533517EF5130EA161CDF9FEDA3D46D3AB285F1531DAFBE0953D63B510486DAE8537088E8718823B88A72C6466182D8D293D94F8C92AB16F01C1F5CB9041272B927FE646570DB421748D521995854437C5727C1EF328923F04C5D7749388

9D8E0DFC96C8B99C67CB5E5C3EA1A7E2316421AAF4A0B0BB980B6F3159AA2E142712E0095AE534DFA217B7E7BF68A16E354B067E93C6B458540D2175B849435FA423CF153C5DE1F217FB7E1D696569879EE11E4140C5EBE4FF7E2988599E0A359D6E660D44631A52B2B46AE01C25CF903816FCAB8D392A1CCCA93F0E1BB9F1C8CD40DFB64066663CEAF56318EF836BEAE3039A9B53427D1FAFD5A731BB2EF20272760EC95E20A355A613680579D72413E0DE0DBFF704741D5E290FF707293C7D0EE8AC0439C1211674

027580736ADD2D9A0BAC725C7B5F807533CAABC964E57E0F61D5069454DEADE05B30002D7515861B1F1AFC681BDB522010DECEBF55C551881903AA6086A0866364B7508450C30C75F344D9A13304D5C51329A4ED7596DC4E480216674893D9007057DAE43A1F2B685E2FFB6CB205953DB7968EC8FDB08B92739E7FBD7CC14FC380C005A31A2E09E45EF86957ECE3886B36956BB2C9C31B347A28E67C02FDB69B68F5BD956CDCE9CBE4E6EAA08BE7A9E137BF7EF62206D59526B27AC97875CCADBE6E6905E974433F39

CCCAEA34D5F8A8DA08F4AB4779D5CBD3D2A21B210E40952CA656781EF5FFA0C6DFD0C6D2CFC99A48EC1E7D0D9977A312B398F7E999148ADC26AAA3DD6719FE2415341934A07948E2F0233661769D37F379DBBECCD1521CC3889BF9B3EFA7F6D7BA0881CF5E66886ED7B083D52E8CBF3926152AAFFB58AC77AB2A6B8C45E9256C53DBB4A456DF9B2BAF5D905B946357B088CDB311E2263A0EA9BBB0614B4EDCB47613E78F18E641B531D95BA45573F3B8903A6E5874F0B2C98A65B07744AA62CC2FC6E741D17B4C7508

7BE54805480D64EEC42F159DED5CF4C739449EC88A4E2782C63C972B5B6D2A9BFEF615E687911FF1A1F606764F9CEF48CD5F6DDFBC5F5EF9DBFE6FD2444B3EB2F87659267D052BAE95142FB50CE9DB0D4AC2127967FC4C3973978A1C730DCCF5469432A1296B154AF4ACE64A994FAF684AADD72CABA823B2371D40B9EE6E9B321C5C6B193BEE340E6FAB142AB8CC0259AF86B8D03D509F2496E05EBB3D1250D8281BA3DD4AFF4D30EC23DBB0D121968D6AC794245F5A5746B0E857945D85D9B4C304BD5A99DA735897

3B3BF33D7C463D3F470EC0F7113E0FFC1F5DA457ED01B2F55CE7C7092496BD64265A682D761A7D86BE90634AB16006220DD5D5FA088478EFF1663C9C5C9E68CCFB2B54BB7B80B578E5FEC0434B1FE073358C7A3EE5AD4861CBF3100CBD75DC49F62C8D393F8D60DA13F298CC2827A7D6E33CA45AE59731E4B30F97BA3A8A827389398A1F5E8CECBE6A9D4F8AB88EEDB77D782C7305349D6948B87B14A41015496E4C99A345215965499338996D6B89D392B1DCAF2BEA7DFE2BEF945800644AAD9D46EB7F7A9001A9FF

E063D2F6626B7A88E188E914FDEA90C5BABE0C682FCAD381C1136584618CFC2563315073D94CCB27D2BF7B79DB107F9456A6D9875F044B6D3CB2275D1FBAB50AE8504FB4669F84B769823E9AC6133AD6754BCC501A75BD1364655173134A888E5DC17D7F0A2DFAD9E67EDD33B7C9F4C9E6DBA67945C4AE66CEE463F6425FE29FC78D23E6CE2DC00B567D9063900A5C265B8A32DCDDA0E0E8B6A07F8460BEA4EB71208F6C7F71F82714C91FA329AC1B8DF6C6DAE50D1668996C07880A2D0FEFBA629BED5DA235961F87

2C2B576F7F0CBEDA4D4A506C2233534359EE5664518E1935F9C416BCA6E7C020CF380283593CFEE1C4E9F8220693F8F6D4D6F0C8872DFA3FB9995DD33CDDFDA02FE5D07583124F493976AA36A9E112A0C917003E59E03BDE51DA5960ECC5C7AEF871AE825C844C7783A5E781105BD2E79476D279E26701E2651CC82DB980DDA8D1C23F4D06E0A3C6B40F0BE5CB2ACE6BFD1028D976A441C2DF5F454C2CFEB6CD8770D1275B976B045AA97DDB5D3383EE116D486B9385ADEB25CB995E34A51C968F187A21D5B2EEDF05

5775162E4BC3BE24F31F76A334835FCF3B4ADDB5667D0B2D887ED300038C0E0704697CFDF84F231EC211A46BEDE0101C6B2D9C22B89D5615E22ED10D0C15F0D067BEBEE90E455E97C940FD641845DA15AE92AE7FC6CAE145036764F9615114B45434B8AEFD68D8DD8578FCDAA7FDC880C4726D901BE9676155C5C8E41A3D09609A033EF01DC59F12BD55994B2FCEA7FBD33C8434C1EA316D5AA96F2E2EA47A6FDD2D43DF2F324F3AF326901804CFDA9495CF479880677628EAAB1510E4779786171030910D4DCAF963

9CB2D818A776BBA487BDFC99736702CA57E23EA0F70A7D9D93159DF33FEF09A44E8AF59563C54FF280507AB2BE9E98DE490CC76DEC3ED3E2463EEED16903C6888313E635BAF7263A53DC1AF764EBAC19CE8B4EB8028EAB43FF37774E1D94D49BAB85402CFCF6045D4F7267020761384F81EC6F05408B3304E3677EE4D6722BB36A95F42781CE5448801C017677E464CFE69701E150EE7A40216A39C1DA1227C8DBF6C33AC9A823E3449009B6A5E280DC59843F48FD031CB72F279E1F69AEDFA402A4BD74F8D8499AC1

E2F49A44AB2520185A6C482E9AA06F5EDE3EA33857C5CE6B901BBF04F241E46B3AF7DC3749DEEDE9B0688A1E9A9B127573A157C82EFC04B50EC51AB227FF4C783D11269D6D0B74C8258B0F80CC1CE141FAA39881397BBF534B234C00A3DD50B234A41F6475E4C84671CEA174D0EE4A3E27B93BC327B58B77A7EF0DB133DC10E5FF66DDAD7DA8AA69457D3722270E5D9EEDB63A3F001879A9995E27637A1F584AB4BA57D90EAA223C7D88BC3E53CB84313D5CC6BBE2A94863728E62FBBA551CE931D8C874CDAAE3905F

0D016FAE152739D9C4378D63D1E1C317C51AB801D02FD16A6D57702C592FE1795725A945E5AF1D377F127B6FE89F857C7B035831B22DBC71D66F2F987DDDD90F9578334298B4251CA9EC750F60CDFB1F950F0C54CD03F39F28296F1BFC092FBEADFD27BFCC414E0BF02D222931867C9D0068B8DFACCEC738DB859A26DBD89D4F7A626B10AA8F0FB93C8E8200285A1FF4160852373894996B3D5DEA45E3B9EEACF67277C245E7C27A8724AC3AE541F3A6884250B28E1100491105E033F45034BD4C325C58A608B74AD3

61E9B7792967A45E24FF6E40E9529793CFBD7701A14BDF873DCA7148AF53836F1EFDF20FEDAD49684AF77E5FF8D66331789DBEE740344EE97A1D872B00728CB586C9F4039AC617020BF44A188F3B6A17F7A0E3DEE95A4D9656A27049615B2893D49C209DD08667532CCFFE428BFD95F77936D5494101C61A5885328F732C49074B39695EAD4DE1766F4FAFF464A1B62981FFE307633072D5BEFB11B34BB3FB9AB1DA92AFC87625A4E7CEB9FE81160BFC2E669B2119E4B0D90595269D3C687327240075053097E1C457

1563D7784E48B5FB52074C7AE8759413B30E996CA7011E1B1EEFB82A53BF2DA35CAB36DAD668F29E4F04985D164B4EFCED5328818811A66E83F9BBD86C66C3FA966E667AE1D10874A942EC7C5403C88F5F1EE3E0E7B2E02E6C825E2D399B492F01848864242BEFD59C4E96F88FBD1E8C64887D774EC70F5332044866FF391151CAE6D11D8F959BCCE8F334B3344172C6AE031E5FB6A61724F85A7F73F77589B8776A67CD80C6D946C6EA5E81FC365B476A1CC9C4524FB0E92420186543CBCE53AB1538FE74F8C04B2C

C8352E79D94C4BD20586F142171AA0ED0EE8DF6796CF43AAB2A358357D585A178F7B05C14901A7EADA687632650813473582C2C505F37A36A9BC32740090FD1B398000AC0507E7449C679E5660CC3A618F6108DA8A7DCB8DDD135BE05EB8C877CEB4B402061BB7F61651D2AC5166FF7CAD0B397217F8B9A8C1A5622C76546C9864D2E1A96B4C2D97AF6AF6B679755C4833868AA9A4740BE4A2C3D96E039DC53286B51A6E9E5ECAAA538A6E71F779A29E9ABD0584FFC1E85A28B58F2D8FDF8A830626E1111D3FFF6721

73D3F4956999815489948EF6F5FF1C000250BE18A7C55DC846B67667096B6F1730D6EE0BCE2380C376536658676047A17CB26EF2AFC9AB1669A76CE2DC76451BE16A48BB63A0FC5EBDABB21235BC3BFFD469072BF00AA35C93305E0E177BB4A3625EB5F096CAE2382A83BE4EB35911CC27E4DC41612F65F94E49F385AA1EFE9EA6FB4C83A34419BF5BF81E74A2411E5314D7F25B6B2E7A4EF4FC97C6BCA7A428ACD2B4BF64FDE87984B53D61031A0420FA0359F0CEB739C738F5D06A51208312FCD774474FB6CDF610

5EF0B9AFFFAB3FC7A5B9828823BDFEEAC2C541FABBFE94CA8CF48199D62E83EA2C4C2B5ED394F7DDB7D6E9E1837F12671C4D0ADB931D21F21D29E020BBB8C27F4BC903A515DBF5301C24A626034A4C73DA7FAF00134AC2517B196EB63177B4F570B7F972AB9091B8C891FE756496E80015784CD10B4629B7142D902A32DDB54E9AD0DD4135BDC6EFFAE6561418D9E5A3F0E452E7E9D93DC286B161BBCF7C58F64CE668E39AC7ECFA10667FE54EF98CCBF761B7D64EB9A2DA9448B280D1FF2E6EE0DC0604F468AE5CB9

CA88F9021539E1B7CDE1E3DDB95E525686001A9D6EFC5D2F109ACE5F7BD17F158E2707C4981E1F18A79ECF430F99E0E82A984B0E63E16E9B576EA3D61135291AFB759188EA98AA48E8C022030908D3E4894E181C228734A8DF8C7F43EF3A31FF47ED47C7DC2008B9EBD60BA639C45DF16C73C40C829D0330C93CD8DF8AB0448C723FDCF520B06ABE5DAF040D65EC65C9BDDC34D64A7D66F6EA08E07487700FE94EA082F3B371AFB411390148F7D842DD631C10C9C71D0EEE4087D8CED7CC5F5591281C0075A832044E

9655A67A442F4B1CC25395CE294C32389A8DAFEE17FA17B193E04B6FE3C3BE4E9BC1928BAB6E371D216F783CB45E93C4D2146B7D0F593EF1E51DB123A1536D10DC8E24CF489489D24CD16D061FE65BCEE43DFB1C0CB49E9B9B3FE3E90BD06F65F0AD7BF3159F7262B88EEAE1B810E8901CAA6C9B4886AB2E4E2DC9F48EFFC1803150A3B1B1D245522CA45AF2F2BD354B155357E3B21B565398FB77631C4D4C4B97C6A9BD5F0CF9AC78CDAC195D60C452B97B9AAF3EEA41D51C712B937AD2B0AD0146F43877D5DE08EE

A613FC43DAB6A35507DD4C5B16A15632F6B560989F4FFFB61E745600FA8195B626909C9CAA1F6FEF1DAD830A0AA1DED41DFE40FAF60CA521F2236695DFEE1E565AC8A6843300F9BB50ABF350D0DA08B63D14456D6A79FA750351978EC91C9776BD079133D493E94D710748AAA942BD094273F37CBA21F92D6CC954B1B5344E0C6C032F9333B9A48D1690A2390C1E6E242159DAB70FD4993C7D9A5890084D4FC39699C868EE8CB4DF9B380FA8D4E1A5348D1911D25E66999C397F702785EBCB2DB743A3F60DEC3CDF00

7D6B4DAE27EB0D19FEC9D16869C53C671A07B6A41BE6510EE28351CE6D57C47B88A6D2714BFB3FE7DD0ACA3CBEF6ADE67A22B5933097A6ED43912E0DEE684BE12C10DB917B3F0A93A366E5E17734F389F7C916249E2E3A3588027B28DCDFACF323A2E04B8CE2B175731F6C4DF3F379264DA19D0674397BAA53EB0F56D62DCD679867E5BB61ADF84D02329AF591CF4A7ACEB161F4FDD54733A790067CECE133D8FC54185AABFA75617E969A70D3D0476026DC2779586D1D98CACEFC2F5987F34DD2718A4642112BAFD7

62029530AA2E69E4C4FA9DC076FBD3507D24BCEF23B17767F9AFA0978B4169EE26967AFDD11EB1E0642737AE91FE0AE410567AAF0224FDF5BFAB8D96BDB2D014A1125D7D9BDE80C60B091CCA1C3688B54EB48523809DDF596AC9C4E367A827B63D34DA617C9941687BA7FBB70FB38E5511C6E9A0DEBD38493269212E6103E4CF2903D066BE9DF2294C4562FD545FAA87EF4D6EDE2AE710C4C4F88E225B7E88E353A603FB7E3CA799648EC5A26C824F6A83E7A578317BE0E39E4BB89638DEF533DFD0CDA2D5554FE861

43C9DA2318CBBEF2ED8A8F9CDC524BCB0E1CA4EC4312CC758400D2D18924BE0BAD405F8F49A7F2B2F4DB0EF8E35AE1B2076CA72A63116B8B8F6B0D1119309235708B79C20BDEE1A885416670F89B1E82AB77741EA56D9352EE2654E7B05C8065C3DE3612FDF407F183A74BEBCF57A30FC418E8C8E7B45BC7EE81485738E0F4D44930EC65DF87AB20B72277BFF12E4E43F3782B79F1DF1F6B77A54CE0BD1618A25EF94FF51FC3ACED63108EA0F623D8ECDF2CAB4984F0E5B363FDAB41B4E7C823375E347AA6A75C6478

E5C64AC6BAE2611CA6265AEE8D8408A277995B5350DED816048771D692CC7DA77BF2648B681EC33E08BEF01B5F4431C88FC3C4AF2EEEB7696E90E50A3C426F8080D4311B349C39910AD4D48F9090FE17697F684ADF001F47997975A73548DC35944528BAFE30EE582963B7768BB6A0F4A46CB1C67CEACB32DEB725018C90AF3F0C2C4DD22C261323CE4A9288639BF24A5902DD01CF74111CF206A0488B875AA23B9AD872BF26B3BEA7586067E3117BA7F2BE2690CF21E40F978EF9D1CECFFA936994B89B49DDDD62B7

F28E8C873CB6506D41DDA161A18E53D237EB00D93CEF3EEF6DFA5C9BDDED20867467AB90F0D6A824B1C0549D064A3DCB0D886BBC1CF688BED9D59F33987D7BCD0D25ED3ADC4F95C70BE80EFA9A27C7D34A8A3EDDA47429CB868F7155A2EE509FCE612D64365EF34F16526CD4DC0CB827633FACD627707BD564743A753D31E37A1F7EFCFAE2A4700111A47E5459A675771B44999925D3DBE537E53526DB621D07771DE90037CB3DF5215FE651ED80E997B1A140ABE6FE021CE0E835CBBEAC9C7C94732DF516B476FD02

9A592FD25925D8E9CEC3EC799868986E1E48616C995ADB6A070162645028D7598C92E9611FA8F39DDDFA6B0C4D32FFB9B1EF609826526DD2784DF329F97DB8265464156B022617D9E7D82FFBB6337CEB8B1760754D4ACF3D739A49E246A8D008EFB9C1F312681938F9A65C51631FB9386F2338E6CD7967CC6C66C5DC326966FF1B4928B693B7F6F85B5AA668934C124E1FC4C85DC18F0CB6D2E4FFAF1908EE4348865C9A682BC85B25487A9A16C00C407C763BD19334160420CC33391683B5EC7B9973BA569FA156CB

1AB0481A381109F0170C55F21FE799B746FC397DEBB5DB9890BC301F2C8C93A52F3A6BF6E6F47A89285A4F84FAE7FE9CD9EF3582E6D736AA2DE7EEBF3AAF64FD75340385A972465656DE16753F9706F372A18D05839FB803C0B30B5AAE9CE8A0AB9C920C6B6B258B2E1FC995EFF9BB579BDE101316D77961B45441A3F3051B111B39277205684F9E7BFD178231E74925A4662059289B7AAA78BB3FD83EC375F66AF0FF15F62C814C51B87E965A3E2E530BB43EAC9D8FF825BD5162112D2DDD2B171B2D6B8E825AE587

278EB37CA4B49BD00D18FF23C6A728898B2AAF7F5B38740FBC18E110C32C532D997715F46F60055D5AC833F734A570A574DA4742E12E85AB086E1E5AF74F59E7E40004B686BC5719BCE2C966E91054E202FE7375D426F8CA29F0D75F4413BCDC4150F5687EFF97D57AEDEF78F2B201D114AA341FEB664BA2D313A3A5700F6138D983A8CE4A086A91380CB55129B1BD01AF23D6B72669AE4BEC5B8FCD5E7121A054171F5A64336A1EE5DF1BC9E824CCE6DC78D9BD93498A0468C5C535C89181E2E8B38A8EC1AE818FE1

C70E4F0016886E5D9BC2DF82A04CE7349E39DB0AC8D85001A0FD27864B4B121AA9ED29C1C5828840781C62795FA5E0434393ADB34E4EE30D7938D7BFFC70856843AB1B798F654ED64C0088A8FA76F8EFE5C2987CD72BD3279B5BA0086B65836C27C5813FF56FA08FBB9D854887CA42CECAF2954600B75DA12B2D0A579E7A7AC82527C515F3C0A25BBC586F015E58C967E62D6CE2C55A8C06E6E9018493430779D073FF20A9CA72E565CC44CA946FA57B6186C6AB2EB7AC6E10C25A799F590106166E59EDE109A601C8

5999093ACEE39A2C6D7DEED115F34ED43EF549787544D30384DA9F901DFF2B525386CC0CCC2BC259F3A4241B65BF3FBD4DA623608EF3CFA2BA8F99454E9303246B5E36B191828F3B534E5846D24F0EAD726C966DB316E60DD1B26EFD62C7079289F8E60CA5AD75C33D35757FA8ACB558D2E8CDA979F3DCE357AE05299D485800037E5302AAA8FA99D34E17264A16C75D2F0A46FB2907D2272AB06625DB9DF52E60DA3A8F0B0D2876D89AA6AE30118E4E69CE5B4C80BB459455EA64164AE9DC1029D4B83C614FDE23E2

16FD2BD39A11107E01C3B43E23C0337B96CBAA01CA3C4172C0A18C63D9511261A2CBAEFA22DCD34A827C85748F865FE4CAF448520FE3D44A15B88D2FFB03C8731EE1ED17E3A55F5EFAB5F2E9460047A3A7AEB6385828268B617273E8614D6A9189E6E39FB989B5A5E07E886EFA017721289477CB5B11864CCCD1665E8A64D57DC04B6D706BE52F6014BABC80317FA0EB719E296F6ACD81B92F1A890935D22E73471AA9875AFBFCD97EA4C3614A3DAC89F0ADBA391037E40AF5FD3B58D7FBF9DC4ADD2BA6E17EAE990C

36603062E4C4B53CDFEC8791142A987B052E3C9924AC6A9281A67B4BD37497AC6B4A8853D37D3A722DDB412199CCF190A228630056A3CA756CE2D95CFD89A5E4BEBD04DECAD47E7135391C0E753AB9FB3BDD80A24C58049677E27847B4694DE36716F2E9DDD1D6948E7F186A815AED2F1CBDD0EA2B7F825EC5DFCAB4E0152FFD6EFF438B9AF2635CEAF625C1BD9A48F261BAEB4E09B7A15E6C93485A09BA44F43E503A7F7650AD66EC60147CCB6F282E8639A396546D10567ADC35A86424910BE1E4BFEAFBE0D67049

602027B477666729C5C2D8481AF0CBEEE6E41866690D5E651414E76B42486655DE2CFA312B4CDC1BEAA12C2E37814EB4DB3B2E02A308D348A1715087988171005D5530135A757CBB3668859D9E61C9F9FA10557B6001DEF173BB6025CE29613EB05A4C3F01F15A5AFA0E3E765E575E864421A7FB2D03D660D075F97C6C2AFF2A7CAFFE38C63E2F95C2E0A2C0FE426FDF6EDE56244B3020D0D4C75711C60290993F191F7ADF8C3D0F1AFC5A384814A2C24D493138D600948AC20EDFFC8905A45EA6EA99591C5E30E9A7

6B47997B6137B82E12D830437576858B27BB25C4767F343455EA8F96A3DC58D186C6D21C7EDECD561B4B8FF67C9B662CAA79B4B3F5CF51E10182E7E424BE48EA1332EAE65E4E7870149CA0C348886E6E0C83E73D8A73D50B6D178B31556E403EB5A8A64359695C754DB72EACC17CD4D4E2416158F1455BEDE6F67F7C9209A33022BB77C3C8C061F46836DDE31FD4748AC98C9DC75FFC94A0ED6D4EA374FFD05ADEFBC343E40ECFAB8BDF4D386BFD6DE8F8265B4BEF0687F41ACA67F24694304E286C9BF4C59D73A6B7

BBD90C16CDDC2A4BA11F31710AB23C9F487DDD79A9F121BAB12D73555024587D94F97A8F3809CA87033D0C281BF2C8A2DA2D4B284A0BB4A6BF3B23A5646F4694D75F32BD0DA6AA5DB81F0A25442E82CE6B9FDC325381D1ECD36B28A24CF7C1892D31CCBEA6C0185539509A8F1D9A374C7347BE52C3A6E50DAB88E7DE7C73DADBF93EC666922D00FD2947402A9AA2AB691D1E0C8C7F38ABD9BF48F13293A3FD240262CAE135671A8F4CAAF66551B1F2CD0129E16E91CAA2DA33C6E1D96BD7F9C3F80783897FDE932C30

41C94232F0B4440AB3F7C3909712CD38AE874604C5E9496DD1EE70160DE5BF8FFFE95A978EFCA52CF0FC87102088C51ACE6CAA6D24BE34856A1C8AC498AED33364C0B950B3FF868C00E8D9227588A51FB0A24F31355296064C814D23A8CBDCECEF68A056783D6E4AA2C580DBD0EF878A88DBECE1C579CA4927AE45606DC8FDA97F4B1922DE0DAA7D8D867F31324B7E1CAA5C6EC3B430F6C38ACE1885A5DAD4512C24B4D061C346E1B12DDE82A0398DD035F0BBCF5F5C972B39C2ED53BED3E26517D3EFF521B02C863E

B084FA78868620F19E280C563C7D5A97004B589C43166F29AB81B218DC7A0544DE5E1EC64AFAEB3915714BF889B1C165259A33D81A6B9681BD29695C28BB24692075B39BC5E18DC464133BCD0FFBAC0B92AD79D67D9D6361AEB18268A3F861C8A1D2DAB3C1023BA56521092EEC654E52E7931BCE13BC20411CBA3C5256A0CF6A8409A65C5C3DCAF9FBD7E90232377EBF63F9164EDC0B2D939DC72EA9555AA15F12C3B379D03A82986D6023DDAE102850CCCA3E76E2C7BE4ECA1DBD3000D763C12D2CE8038388F80561

F580DABE793D14EA152403EF97EA65A96041E9EF282E2F8D50BD267F3ABF6491D6144B31C90DAA3C9DDD3B447C6D14CD7D2143C3200B79ABE6D55C710122333AA7D831361EAE29F08B89909890977B603AE4B355964AC4A8045CFDB2E75D9A825FE90CEB3D1A8893D653DFBF95AC8893F27C655CD111A629E95678D78EBF965E8E4377AA929D97E5977C6DD445AD9B8F63D0AA91E638E19262A031C13AC6A5137B75E295D38F77DEDE8BF2045D1A5F82CC281DC99636EB7A8E19C8B54ECF6861D8D6B04699EB567818

F6490037B7ABA2845F57461495119642E73D1A2B64BA560B8759BB810298FAD10B2E3436B60F2111F683FD6A0C95C5A8C4A1A96128B9017E364DC628A13231FDA68EC804D2272C5FA12E7A8F45D618A967BE4EAED4899F17CB3804B89F57C46F66968842924509EE1418BED0EE786872E2F532449D95FB4EBFCBD7C7097ABF66DB9BAE5217B7B29DE91692B9659636BED9A7AB70D1CDD22FE94CABD1D9CDCC5E6070CE82DC5DAEA48532AC3D180DA9FEBC628ACAB898D8238FE6B7F94B17DAC99E05746D879BE53C00

91E2E3462CA977B82288CEBC86307B727F9090B2F100146B0563E89B3376E5305960D030DBA34C2F040BFF7EA0F9EE7EC87F1889FF43FC77D28E8CC134D56B45FB5CACC484470EB49A2A0EB2A04821EE83A44C622471CA1D2FE04F7E16457377F7D87F419EF2609A64278FB75563B05327B5A20DE42EB0D8A05947058C56D8F43E825D3E5A36396A08EF13CAE4014F459C123F11AA43B587D09652B692D10A20A28E97DBE02311088D98986ED7439D6A00ACE8E778FDAB99EB1F5B2C107EAD940448D544415106B389

3DB3D05658D810496F951505ACA9FDEE4A5D599C24F7D12C46D8BE5EEC70F6845E09726B895664AF9CAA5AAAE10C60DF27E0BD412A43454B3F77D6D8F4121E9FA05722F7DFDC04CD36A2A04A05043D0CF658A29258DD258871ED926B56BC5FD862BAD73FF502D2946317538557AC022BA8C512E8BF7BCCBD45D7B87827E1987AB89FA5C83528D623D5211D83148E3412D2F54AE9A38ACF0972B9FBAA26EC5C9D6D41CF35834A88168FF64E620C4E9032ECC959557CA396E1D9F73841A5441CEF6E388B745020013A03

3DAE43D70406413F824117599AC4B469B587378E0C17266A9BE44EE58184B46A0D59B09F6C4DB310DD2042257BEBEAF1112F7E5397852ECD5043BF3B76058A66D88AE6BFD45945E282AD9A5E1D1046CDE23C7C17F6E66B7B875F7FCF40F28CEC9A3E7D00F2387F81B4732E540CC8412D08ADB1498D417C7A2F2BBA6BB097B0B79CEAE28E7F1740482BA7077DD70E36FA160FF16AB2FCCE81F38132C8402022F7034DEA0F9E374A4AB781EEB81CF89C7C8CFE4757A345E9702B7A2DA6F788438361555AB0B0B6C34708

D7593B4DB54ED45C3608175A1783829E24BD733E73B63E2CCBBF181C1BF82262451469E696A4690CF1EDA82BFD5EDAB00A2CC7D6498A50A8049A3C896BC41938F5D475789A0E10F4DD96F6E7A31E1760FF6CB3AE72E833037BCCE6DC7DA3F7FD66FC6874EFEA029A5DE940FDF0CA0F0E302761C6E9316E5A9985A66A8C2210C14185C435100E9BE39B8CBCA5A0B73CB0A88371BC13DB7E237F9FE29CF101547466D79609E2655E3433CEDB42186E6E1E658F365309CE59692F84309AF7D8664C62D1066A5D5D6A2D0D

9863585EF056F61D3BE58F6EFB2D91DEE92F6B09C71A720E5A7DAAD73E9194B14D6EE372DE3A6C83E1EB63C0FE6460604D18435BF1121739BF12C72B99DAEC8EDEEDF3BD2B8773C46C31316B19658C122C1A57A84ACD2D087A6A999B09D6B871693267E8218FF35D054224FA908D9DF6ADF021F1F23A2D3221037EB49516630E8778FBD520166EE4940699FA2ABB015C4745CD510E1CDC13194DBDD718DC147A8768BA22951146E5076A32876F080FF9325A6D8C1FB487BC3255F62528CAE8BEDF0CF02B910A22C2EA

C0D4CF7B47A8B11B859163086A9C167447EE26246888BADB68DD5101E2B0ED4B7A9E6A061EA1E37EA190A94692E716C102E612083CE5145CA68E40F0E4FB87562B56C9A9BFC77578DE56DB67EA347B2F8E358D2A9F5BA144B0FEC92FB7C469C7BD15071D5A76BFC780640DC5001867A94D5AECCA95EE0CAD8AC1A518F6BE49AB2453096D1F5E7E96D207C2531450E2AE6DDCCA9B45216B7479E5651F5F36B718734323610BFB3BC0DAD7DD6DE2B6A21D006A2C8F815ACB71981F50AE68AAF2C2BE244E7DE5A697AB2C

6DEB6A4899D05587F0A784A80353DB46C1EDF5B4368F7952AED6DA002BBE02F5ED05B32F234DEE7D75E5559A8F6DFBC6B95AA19CCAE281D5E5585F9CCDC9B63A58EF0BEFBA31EB2BB69D3DE1B28811C89C78A68AA063BC2E05D0BA2308F49213FBB9EF505D75FCCAF3FD90C25C4DC0CBE804E0D52659E282B8D177E38E1BFF739D837D49A260236A392F9C44BDD2EB5897C6776B54C2F120BBAA04B1998F6B083FC365F022D9FFD3279A3CE919E57DBDF43842F998589D98B6B66768488044D413BEC4DA3B59F51E7E

A816983C7DD78638ECFB1228A34128079A103D68645181C2C9A288F478FB59DE97371A194346236DD435977060A461BC222AE498BE09CF855D57B4E8AF037572B873A1C3FFF1BD68286E88DED7B66CFD4A323FB702B9E2EE013C2EA076318B23E0FF122ED4EB70EF7EF496558A91ACEE68F667D704EA8041B32E7270355F05EBD275DD9EB4D9344A94D7BD88201344AFC2A7714BA30BAE58A83ECB10CF629435B744A41A5998FFCCCE882AFF5179722A569324B0FF1264451747BC23AD52F79BD02181AE4E95A2F9DF

F4C5DE7AFC17171CA91BA8C44882DF298E7C908B11AECE4A147DB6E448B4C9FDDD322F8B1430F42DE9075C029EDCF35E11703C72D583C1328A8F2AA307574B3A3066AFAD9A5CE4941B36B09A675DC87E7E684E4CA09B8F543EA54CD0519E9A878D81CBD455A68FD371A537E165C8193C34CD23986C4B81160000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
 %endeexec


type42known not downloadOK and{userdict/TrueDict known{TrueDict dup/imagemaskwrapper known exch/bander known and not}
{true userdict begin/TrueDict 8 dict dup /version 28 put def end}ifelse}{false}ifelse{currentfile eexec}exch( %endeexec)exch checkload
1861AEDAAA5472E4FDE5287D4C4E53EBA61CAEF92A514B7CC1814CB90B6B9205D0B3DF88D5DE99A9070A05AC0302E4E4D69A746F04D495DDFFBF76C70585C01B0E1A464FFA40B2D4CCF5423F22B35C8076

59A4A1DD16D91192230DCB3BFDFE36540C5F1721AB12DA4509FB2CB39A5261857092AEED57C01E29C09703D8D74233C0B6A9016250D02F77DB6B610BBCFF2858AA7723A60F308A9DC82982F84779E1F95156486EA5EF7AF1E00C23FA45B7AF54AE8A7CDB8FB0CB6E9A2BB3FF7CF552604D77474719BF8035D930EE272FEEBAC5FCC7ADE995DD229C8A9027668EF9CA145A94E2394ED86E4621352B61FBBA61220F9FD25B7B8F7C20DDE65C2FCB1C073A376369BB6DAFE6BD2A5636956FB5969A9F26A24B08EE097A9C

C695E614D78FE04FCF2792FE5C851B832B73876677D26DC83D6985FB71D746B1375DA4952471B137B9A39539FB75AEF7AA90BA5B5BFCF66043CF306289864AE79E26472A238D9E0DEAAC5529D6ACAB78B93BEAF0864EDE17348DD618597412F5FB411C67485C57270EB9A6DDBF25BACFC8732418836486E461554BF1808E88BBB358BABAD74EB03D181396ECE6B7A403219E9043FD83B57F269F49B8A59283A4F408BFD2DF378459FD69F43ED54DAC29D315A6AC200CDDDB1F95F55DF9DB846E5B8B693090D17E3A4A

CF8258523F161F379BFFB444B1D60BA885E57E224CCEEA78C69A78D482AAE6446ACB8D163EA7B2196B1236C00087E0313F9886B949CEE9304FE82D6561F871D3153FA962B42E24A015E3530FAB9F437E176452C63AB9719E3A8FBB58595A752D9BEAAC5F02FD7D4483C67E3DE0C89F7C524BEC1BA1841BD103F26D75FE380E4F190FE0BC5A3FD0D83223B19BF33F9B4519DFBCAE52EDF30214DDD0B615A02E78CDBAEF3A145C90E5295D0306E557595B903395178BD3CC3EABA67F7211473B44A6486C4636A40C7495

ABCF776991FAA6C75DD3DC5CFEAE5823CAE30730355CF187FCE2B4B7563D6E9EC586FC80B225BD79FD8C4FA25DDDFFC67E4F991360ADBC061172F7B9C77FC7B72D16E2A54D957EEB8252E454B47D6530E9744351EA9CFD418A4B30C7DDEABC1E9F60FF198CCCEB8175FF9F7E02F7661B72E1B4D76344BCC383B8D25C2A1B80E80F3D1742BA7575088E74D3F9218F54F0E8BFACB87FED886921CC3F27B41B70423738D3AF63D9F7EA43FD93CF3164BF1C4E8F35AF42F1B81EE2C0C0BE84A7CF8943467350D5720EB062

BFD7C7D9AB8064737E7B3E9B5BB4EDFA0116D6E4F0441352A4715FA901A5603BDF59C61CFBD5E8A2BEB3734C220D2142A12C49E39EC9D88181067A6B8BD3CE7C1207B212BAC72792E1A8529084C2D1FBD845744955610D2DAACF87FCE83CE4E251BCF9C4121A9A23319581E19C22AA96604E52AEA73EDAB9708B059420A4923B79866D878434AFA351B1760CF2DEF6F31A93360B8B3756C63B8065B883B10D6B3BD4AC3B84AF2DE460B87D52F9459443B94E61F4BF9CCE247E094E67D89CD5D237724F75D77DB109FD

1090CD4BEF00940AF99DEB8138D1E8D3EBB35EFD8670B39F183DB6294E3C33797C28C025983809DB3F5C0CAF17781522F8ED6F5CD89BEE3329DA0EFD043784C436CD6368D5315C3FE026BF95F8C5514D41FDB0486F211CA76FC5AFFA0979B41E5B98C7AD06B4C68A22B3D080822AF49C34C6CC7DE9943E786C8611E7C2EE99ADD9FA76D676833042D3BF5FB897D636758F3F801EC90E4474A303A03BB11E175F88B80DE36D6F2AFA8341D0F4DDDB15C872B729323AA32EEA5E6240F14C1BACD50227A60B3DC4862A15

4D7220610C6119DA413BB6E4CC8952AC5788BDDBA8C3C30317F533A87B018DE3B9488112ACCA3B5FDEC0E150D3EFC5493B54966E767C7F8F089F75BE27A46D1DEC6180EACAFF44D477794C3CDB6202100228462419EC4817E2FFE8C81FD593DA80EC4C2BA69391DE337457533F65CF81EC0D703342CE1BD1983F27714C08650CE5E026A6E0AB00FA8B99FB8C0F05450E3D81E47C98AA86BAAAE5FA83051AE2381870FB1FCABD8BE404F3F15425F7FD17EA356FA0CD316928721456A575AC91163312A9531D5ED40D59

A980E34689667933071E9F021EFC337C3B9F754D1B5027494DD5EE81D8CBF4A902180B951B067865045B603CAC5BC010402EC8C240A7C886C18E24873F7CD921AF92542C49DDC28C7E327C62E9B7B37BB886FC57BF9D386C90DC9DF01EBC080168ECB5D8FB8F308FB45245FAAAD626311F6F152D4B8A45E08522459D516DF91FDCC836376D4F244763D31D848A06AE248851929E2113AD0D10276145FFAF11246523EAE0E0FCFD6E9ADC0F22B0A9FE2DA1543D5DAA28A11812F5C85C5FCE3D4207D0C255A7C2F92061

F69D813946DB67A4083B71A5CB74DD7BD2DA8BC3731061FF6654E2FA4B842CA87E05E64DD71E474B73EF2B8E7B2E7E75777756349CEC3CCD230CA0A872BFCECE360D05D638D0F970A50393D887CE31ABA8895660A22CFEAA811F71DDD3A0AF52EAB66479B56F099F260F48EBDD96418A03786331C3638E144A89B6C682F364DFEDB3CF195557BB897DE30E6FAD1478D6CE7601656740234A46246169117BF3040493405414280ED7EA60487481E59B59C303C408A52D5B9F8A3E5856596D360DA611A9F9BDA4EC4752

683EEE4C8680E1FE733387CBBF3B79D8B702825F098E0CAA188D1E3366FC26F53716452A8B02860CE53805473376F9A5D073CA34CEA13AAA865F58F7354B5FF6F11634F3A11595FB4182AD472FB51BC9B4B995132329C736727E7141B869F4DBC20EF421040A85EDD24AB7F0F6F8AA33AC23D30477826A3E195B9E389E8F6B2759EC5876506A72105D886C50B732284F82B4A6DE702775F26961C49B2FDBA359ED62BD55588627674056A0627CEB82D95F8F0A8126D796A7D5EECF9E8DCEA78C7E741BE25F08DD3B72

6C4FD5221F2A65B3DE57535CA128DF4C6D933CF535C752A657479BB0969A099AC2AFDF61CC81F7C6ACCC8788BC6994B88289DEE8973C7C04F52EB9209F44E337489E2B98D8F0245820B9F977F729AEF2318F50976902A163E737D4661D4E65E81AE282F856F12C66320FCC63AE8D6A4281CCCF45545991326BC7BF0CB69E6278BA3323623928A28E6C1F5B2C68CF32CAA0BF5C1BDDA540E5C91C0E4BEC655CBFC5D944AF6B943D1A494F4F99952E546789CB4613B4333EFFC55D564CB323305AD1713B7AADC5D3F6AA

7F2C4ED5AEB726C617E535ADF9B3F2F5ABEDAC3F850669068D34B29591952A248799A2CC212E8D97E209F3C4B359C357A3608D5C65AF518887A2B1EFB1F18337A5F6656C20D6BE742BF0C15D14A4CB9F6FEC3E1AD856729D8AA88A089D2E34A142F3FB066F1F93DE32E78A15AA05B59839CA04FB25C50C1AFB6EF00F3E8D60E69EE62D9077BC4A8143F459760D910AD26E2AB848CD31FF24770264E1E015D43CE27002700AE499BB7B3C447A7F9AAA86BB41D35AF63D1455955A90B96227AC2C9FA91C444A02DEB1EC

AE53B42A299DCA83A4BEFBCEBD399BC674F449082E518A8A336143362DE0DCD7390332B6D885A0E361D4E225588C22625EE725BCE77986EE666DA584CC6A2E3DF1120CC71042F4868410E38EF7216016651E4060E7E633D8ACF2A086CD336424C5A237D0D7909C3DF6A111A03D80B437C8C7DEB7F2783B93C3A8628D9364AB9902E3198736B91D32F6E6F3AC9E16A68E749EF35152107F6BF908077F8BE5479DFA2B88121005ED0C753D6F10D64E59D040C2A6D11DAE163939B6C91FD494B5C7D4CD80D6E948EE3218

AA76B8F3375955C52BA64FF0F2CE35F94EF2FB0733056F922EEB6BD2BF7FCAAEADA4DC444AFD964A4F3E963D53384158A70639341D9453291C6EA6B15E3D76C524A4C2D8639242E647E44AC3F4F6D660D60E141C6A845861F6A9A4888C84EC4B3E814C136BC4DEB24EAF014AA0D17F7B99CA86E3FA6C28A0CCF0DECB21A165893FBDE1A3E528EBAA88BAEBEC4FFE1FC5F1458114614191FB0E9A53FC9375AF94B0B1B4A791005D90338226E5077F36D1CA5E3D8637D404F8EEC7B22C3B11982319D4C008C69B5D5F1C

369EC4C633FD05F4EDF122CF3134162D8B82D6A51825A8DB5F7B26B2EBE446182846CF9C2CD976C1460B422E0AE4666CD10698F3CF22FC62D5D5A5C5B8EA5810ABE08D1A4B6DDE1D10F23C7E890DE34C2796641250FC4350C165F40C5E3B8E02323BE839B863757AF64E7829D4BF75677219DABD9D9C8A1F1365F9513A321209305BF34E93B3FDBEFDEA979F196DBE8FE8C1A8D06F59A688C88FDD6020DEDCC2B06F239BB1B3BAD88E98A0094D200A3E7BE569B70B3D5F989EEF76EA398283CE622544AEAF0BE6C152

A630DE1A30F5211C2F735C22582DE3AA480D55C1428823F041F1781ED7FAE4A572EBA74F9CAB12CE7C4E0D65DFDB8783DF6DB6BE9BD385CB694F2F55336509892B707D21B363049C446C05E0D9C4A6C74C7C56D0B063EEE6FC970185AD6F93CCAD2E4E7B0D1C6438F9B4A9E34397880F9588CDE0A2D91B6497B6D428BBDA7DC3C2A79BF043E5BFF96F9FA6597099EE0AD443F771AACD70265268FC8737BBFD24F3631846EC8FF1D47E395F4FC12CAED1C6E3281E1BC70756DA2F1C0FA16CDD749C0C6F3602AC9387F2

D1BFC0B0B704A20695FF711DF0396B0041FD4B9E02475728687BD5AA702D91DA868EF0811EBD4A33E60D909FF984CC3B8FBCFB098F56B7914FEF1C83B2B1B863E83663CF176DF49E9F6F6736926D3841672D751974B3A032C383DD2FF2E92C6B8960B802C8A418B74F8B11059CB0F2B31DC7E9BF578B8A3466CDAE5481A7B99BE988D36F41253D898C17FD13B010E5E3AC2005071B5EF0DE7F37B3A9762D33EBDC6F2063FAE55D3F2B1E5EFFC8A955034EB5A72EA5ACD8F7866283C30FE677241C7B8890504E99BC64

22636A205BA1387B5B891E5200A5874B7C733A2051E2E8830AB01F456F9015A85E3389AC06835FCAFF06A0BEA8721E92E8EC94CA85A5B8E2676F19E62FAADFE8721E107A5BA98FB7E1F24EFC981875BD955C8ED7C0AE24CBC987CC7413321C6E89A632708E44D4F69E6C465A60F83766E029635C4DDD93BBFEA07E019C59B9AC2D31D1D2DDF3AA922314D8BA38061CF57584BAF63EFC8D2E0A05F1703CEE6DB8A1FE1C365375C48DAD9E8A2A962F4F36F27F00432947132747FB9F5C086E592EFD3D84E81FCAE6E395

689B888BB625F5C18C2FD777030D6062053416F58CEBD30429FD887D9A2B6531598ABFAB2A4C62940F1C917DCDABFE638ECD0143189F25865798F0C03B524B7C848E3B0E3B9DA5FCD1851CA58265B58C23D96FF0AE90B5405F8EA1C10BAD9813FEF3D236559FF9D612C6E24FA2DFEA7C878DB76635893C5E6B82A7F35541EAD9217E61B0492D1AD5B9DEB65834D4D349B8E1F1AB1A1528CBC282F5818D84ACF564C5758FC12FD618C004B18DA6BA4E45294BA83A08AD2B91B0A42680E09955CD66493D29F3D24BB47F

6134C34B98D9A3BCF68D4B14168C36D086ED384F38F0AFF67EA3264EA3A21D28CBAC684879899B1E28D3A7F629CE781CCCD054520384AF024F9F84462C0154B9F963A7CA9F0C2DA71EF866A71782805338FC171AF6A09C60CDF372F6105F4F6584FC1CE280BF817CA4E9B69966EBB9F86BC88947E626846EA766713DC4AAFD5338B5B94C479B56EE8EB293B391280A257F254DCB1020507CDEC909A56B2D8C0612DB386FCB66FE103367807188B3C6B3D016C85B4653B48BF36FA1FF8B3AD9C39FA286BAF23489DB0D

651B10AA1DB667CBE79FE5A4D823847A31C77967B5C084E6A766AF423E846A741E763EF090AF634A992500C241E295FAFF3B35EBBC205F5903E6B6C8E6A653C222CD4CF465185769A5404993A80EE2039B52ACCAF0766D116A58D575868B1007B6A681B57C8A154F8B1DA617A9EE0C77CF2DED95E3E02351A634AFF5929CEA8B8891021BA8929C114F1062872E0FDDF4F52F4F451C3D006305B181D77516BC4624E2857495E9347D6EC2A8CC468CFC45E6633B1273641B05F2741D6B2B09CAE6D64407DFBE75FCC9E6

DF0101203E79CF942E02B27A8E1BB9225DD35732263E1E134EA0ED4F882463C49E29CF27ACF6C175F1A548D3264E80C0CAA985B2D34BA7356DC65637A12FC83F8F12022E93C441B331D1102A5C6FA3F75450C783B0FAA4DE09E25AB6F9DC38F02712BBDEBA3811C29C17FA2AAD85C770C2769F384F1E23A9A7AC6D964F14D43656F8CDD41653205BFB325102640D9CEE76B0DB173634AF20ABFF778EBA43DD48877562175D680E4CD7657D9B89249629374A7E900E31EC22CF4CE7C7D99FF2760EBC7FD83B85D51ABF

B4EB8854B5E56EC9C420964E0BCD278DC60A0465EDE87000AE6B4BCBC7DFDB308734D239C0C89FC4A301890F789F1B13FA7C87A7B360D0065F315F87BF903ED337B8EEF6A955F9E20E827AE3EFC581551DCB3DF78485ED287774C19BA02978BEA5C2BF77DF396D5FBAF3A7D815E9E2800DC8834E2B6050D2F1B515B146D9694AAAC40EB64E77C18175CB3E40ECB35AEF0185C1F82E152EC9CF15175AA7DF9D9CD89517D6B8ACC23264E324B20A78EE1D10542A0E2D85F8E59EEA1EB4D361D6816274D6910A50F5C627

09D6CEB029B3F4D5FFD797416FC88B7EAAB262387055CB7DCD4C56AEA75BE6DB663B317F8AB39FB15B3D354AB1DD3349E78CF48724C2CEF7EDA2643943FBD4785D56DDCBCD01EE561AB50E0E56FDED50074A1F57B996329B99BB64433B8BC690EADED1A212E67FC53135FE38460E72BE49EA048A41646EE81E09308F77F607B78E06CB623FB9E15E04B898C653437583A112EA8287789EFAD5B47122FFC08E66885E254B7A59AC6B20D2B509F4283CB741662F591AEF65F89A8682E5F19BD5BCFF304FD211986A1B39

7224657B37AFA754B11557E34169244D27553341E92C1AE326D5C9BE80B3DEA9E0326C1FC4FDE527F0055546759570CADC4B840E7C9B22854864031555465973B81ED148D8B07A714CC0955D0FF76C508CE794C43588D7317D7A46C1F74ADE59804508007BCE8CB6406586CE28608B979EE97C755E9E996B1681DF9B83D49C21C72A36EA80EDFA0F9395E87C30B7173F05B877F62BFF004B7A41D990F8E193753E42382DFCB4A17534B490C27D6973CF6516F2CE6F6329654C93EAA4927CBE177544B4CD7C50CE4196

8071905FD6CD48BE6D7E8C3065146F8940C8D82525C383FDA6DFFD0F503193B6ABA20EDF93DA9F761AB43378865E09953378C2CDF04BC717DD8F609B2AAB58EF34E0A7C10FF63CF33695619F86CE4A2EE0D77BE56D81C2815AE8AEF8E8C3FAEB38E22CB0203C2D781EFA67687AFDBD4DD0680CF85D771A17A767D486E8A75927EC5E7D4A31EB8FF617A34D60982849BD93BE2570B0125D7E274A260E2FBFC3FA41652FFE3B2B0882FB86796D6288F876DD98149DEBA0D9D89C9081A40596D6CFE0E23519A1FC884A2A

420CB334F0125E5CB9BE63CCF96562352EDA23EC7A305BECD38B3AA879DCFCD48C44C98A4F538DC0D1BDC5F92CBC77DEF6AA88F63105567D970103632F8AB71CAFEAB25E924D684596F436A61EBD8FAEF3904730C5AE49AA677B9E3026584476F95813CCA2C1B255428F49BF4B028ADDB1AF3F2A1D7E0F9F6D6C007A1D34A3A9199DEEC5C17CC97A68F0ECDE9CCB5DB345BD982C7419BDAF73846121D07B152D0439AF1A77F88C3D22E37FC5384ED68DCF64A77B4BE69DEB54F03CD34CEEBB81660CF941A9A1F7CA95

B3ABA4C03DD70226F70A280ED9492C40DBC30C3447E54098B204F44138D1224BC73277DFBBE9D2E59A10AAB3F911CDC90D2F3F6B95AF58BD41DB8F03DA26D8E3504DF017AFD94BD8BC6F53D66DCB13248D8F5CFF489A33A9B2846CEC22A52357DD33D873522416630E9D33CA95B639076088D6F3ED1DB69DA5039A979E6AA65A7B7DC6A1F76E23DAC961A9DB9D932D9201FE31C52B76D30C04C24E0B1C0E435D0C2252D68E1B231C3FDEACC28F9D1E9F0CDE2A47C40A59EBE6110ED169A1B5D25ABB6550DC7384D0D3

105C9F494EC333C22730E3CB88EC7903AC9D39E0B31A8685CED105F6404C8E96BF0D81B6A5F1DA8311BD15FB6C36F0EC3D91380FCD93AA886D31E6DEEC8C238A9E391CB63B2917A63EB60E835999FEE85B02EB2DBA58DCEA2DC135EC02938E39AC37E9C7426427B184DB606157234B75A7255073DE0C93247A7C99721F854B9E4B365F892389427FAD03BF13AA67EE48D798A56164BB3FB62DB89346DA9AF3A41931857AA42637F9CA68A6110A82BA8EED44D7738D7223962CE35F415ED6BA981B1899C95F22C2587D

D99C33AD84C158986A695FD0B293BFF681C1C338CA86EDF7E9E0594771AA62D5D3FC6E19C734741EA55943786E9E861E0D5FEE289F0170281D4258B8714F5F06036734A3243BBB5B9400D404D1D08197F6614C4C2D8381585C85DB57F9E8776857E36DCA964A61FFF47C2DCC725364870345E3AF934D7F6ED2EF2FBF422ED9DC75C07548737E15818CCBD76B80BC55885111A0CA6C7F63965F5EA64F026A7A4368FAA5E8C99A94DEA76535D2DACF45690436881A7E91D87BB6956E6900140E5F82FB2B703221A2A599

23DA565526385D9DEBE9C28FA7B1AF23C1B0E6EB52CB6C6FDF51F7EB4F82D076C84CAE2010EC81D489DE462EEDB9F01F6FA80FED1C091946F7333D9275B766E3ADE2F414A78A15B16F0A88D078E70A20031F8393344F1FD25A805BF9541AB511BB498937EA58EA0394A524F2CD0D0CE62B85AD6816552DDADE8DA8360D968371002AE6A44B9A64631BA42EF8F6923095D4DED47D495B107A6D1E99751627D7734901B4E9A40922FCC6820822B4E8919151BE5913C5130F93D19F8CBE45C2F915618AC49A1B0EAB1D36

071F20D4464D05BA7BCCDE5757F12B596B9C05BD7FC9CE101FD1F4EA3D42ED2A1F48EB584CBE0CB831113D553244DF508983450A0DEC1DC73B39CEE44870ABB9F30CE72BD2C282C60E5DD00C112EF6B9B489EB4EAAD794A815C08C92CD4F415CC12DDAB4BE33F482AC0709F90A9466F882C4E68A19758942BBD851C06F53C2E05D120268CB58FE222C4DD7DEBB5BE38D60F9582635CF3393B488855A2FD89616671206AC738C95D627D9F6CF55154EF2A89D312C03680807EF955EB405F303E4B69897433B56698677

5E9B73835168437E592C83B011EEF7D61AD87BBB692D6E548657D1A7B1CDE987539EBFCBFC11CCA7C50DE520C7D9979D9C6CE0D9C3487DF44CE7E00EA8BC8F48266DE0E825D0BC4C3433053060F9133B8E0992CC6206676E26317AF23AAB21EDB7B8EA5DADCEA76FF2E0862642281EFE2D450247EC66D0CB66B2E789C4892B04444F1889FD5E1B44E20265D964C66E0C3BEB8A52FF57A7EFCD4BF2B7EA67749F2DE366829F31DFB108E9F308D50C081B13A24560F8D34D2A1B7B7FF7FE5DE7506612EA62183EB162BF

7D331E5F9DDBDD2EA2EBB3F6A90DC7D56A7657DBE83FD6A9EA4FD0A64298BC27CD95A0CBCD361AC8D4953ECE1DD5BB8327C724DA5CA3730CE8210CC75B6277D3DBC96560E610F648EABFA8BF64AD6CE1F868801F650F740351AC63B41F0120A959343D3FDE1EBA69212CA816D118538FB92017E7F3C1B9DA520F8CF989BAEFC0C6CDCCAD5F12AD90CA547199A73EBB5A4B2EBC5A8B4FDF48A8891306D4364EE443039A182FB875A8F81C87317BC2759B56EBC1A049B2D05AB520DFE54CF2FB16E465DBCA0D4DCF6111

0C35D15D72E93BCC76A034B39C6EB23E3859561A1614020DC74247C26AFCFD294DF25741522C50762B45E78C1D2D9A42BB8CE163C9E5AEFF8B8C5B51971BB037BF313BA1151C16189CAAC8CC7372D29686382C60F661A7D6929ACA7C60F16B7D000672A720A7C3F1525CB3A0A7BBE6EDCD7E75B190CE43F8CC4D48ED7B89AFD3D4C066996EA247AEB9E87A7A98DA218BF1FEDCD76BF9AA2F9EA7900D5DB1EE3158EFBAEE6ECA5C6E40C3F9F804A25379A1CF792A1E33B8BE32563E24987E3A36E0F5F5A76EA9BAC38D

01DB90DD06FACFDB0640F1723099CFFFFF07622A74E2FDC4356EC81E111E81B40DBF501C45687FB49648C4D723AF9AF0A9D15D5D1F04B095F6A34ADDBE233CB401B2CBE2B77894A2644132F42B7E05EA44FF0BDB960514F6F571E411CD3DF8F6DA0E5C6508A6F695E0123CD036BFB87608F298D5E58AA8089469EEB9CC6FFCE1F94C8C0C96F0DAF44BCE8798970BEC60BE80BCEB752A85B6431590B266E24FF48F46170A7E6639FBE9DC87E573003894D3C81A819F3ECE28E4563FC360A66D5C29B1A31D275FEC9DB8

E4BB4F5B7556DEBCC736711586A36C6D6F75043AC37485854C0F6ECB67D5CD4D74CD37A648DCAC8A13671F11AE3258D5B50455672973C43228BF644C75317C4092888E5CEBBC0E2DDE2E5BE5823BB0C9AA277E68BB392377BF6DC43968BEB365CB31FC773BBC0D1F9F425FEE9D027B718734D57E8829314BCB7EEADC501FF425BA727D07A3099D990B09783446C9917E61E25F645C8FF20E934C58452B51F481B42CF9E6C33095D2F48E42A651D64D88E4CD9D0C8FD0A53511D754AF25323921F995CDF934DD2EDDE3

7A0FA44097B97C288E1F60C3ADB8C7E3D1181E20FD040B3C5A4E77EEF26EAE946F4C24E147577CBA6AE28C4DAB38352FDB1536ED1D369B01751CA1F5AE89E806961F1B45DB49D51B373946C8A56DBC4B76C78C5326E3811333D0B993E319FAC371023E47E7BBB4DEBE640485E5634D0F2A206F97448C499B55CF08853656D5C42C16A3BC882630E248724C65F4B7833A181F43CD59AE6ABF209161A54F87BF48BEBE03DFD1735BB570CE14F4B078080597947C1CC04153B0FDEF757453061F8E81DE327FB5AE94AE54

927F2BD016DCFBEF7FE81B204093CB7654D505541FDB333FF3B5AA3918E2DF3E9A8E4FEAE6F42B79E8451A7C33383EE86FA2655B94E579A7D764D6B55EC0F80C35CB8C3107C812CC864C7A7F3D5181BF3E013AEE5BAF8AA86E54EEF84D6BB70CE6AE2FAC8AD8EB4DB11B6856C3DF7D86DB6C3A7CD981F1A86603BFA31CAAC14CE979029BE3C4AA4FFD3546F630CFDF76E713B1DB85E5D96F5C588471BCBD94784CD13904350DE788B7403D5C44D749DA4D26F9CAF65A7901EC84FBEA085B2DC01BD8E0F2E7A3FCCC45

3643A001448166C41EE1E5B8FF5B63EB222FF01432F07404D87669A25D3F1B9FFC881CF553A3875DFBB13C90AAB877F671B398924D89BCF7B12769F63A307C1B666E6FE7107F2E84E4B95E40E5FEA92F50BF63785726B4B64CD13E5214ADEF16AD4948AFD4CF6DDF496E2A8B04D2A40D19F0699EDCD1244FB7896E383DD46FF027A66CBABBD7D9BBC23CBE055206F7B995713EC0CAB2B93D42F7AD52C7A25D9C1E96475B472B8EE33A1B8340674894C9BC93A4BC2D50DE7FE811009B609747DAB2E1F0BC3D9F73D39F

48FC6E3B735A860ED1F20CEB4C0FAFF1D69CBFD3C79B94617D16CE483E8819292CD41CB4EE48ECFED6C15275FCA611CEA662328475F01A8E5B6F1A4DD8D3D8FB0B3B8C5611FE148E3CC5754EEF4A27EC7A9FA074C589C8A727415B42B6B6655F27B2672F2EB41C468B3C5141A9FB836C68848FAF85CCA9507F3C3FC7F533227CA86A6AAE12405A3427037B237E79E59227A7141071EE73174396E3FED5E04FFBB8F47B340ACB4F23DADEE4F0A9068423008249E45E2C98536B5B8B3384E8D5577EB129ABF45B63BDF7

E6FAFCFB9324D09E65F40D0C002E846AA80885BD0AF92743B7C25227FF1A2C98E7BF1141FE8B55CF626E4542F288AE2AD69D00FB9153E97149783D28ECAFBACC7D58B3B0322AB48E4BE4A6598ED13154475C53506D2A5B90955031A85A12211C068A72C25F18E3D388BDD3B8D632DBC0B1F7DD673B04E812F6BA078CB2304293A435907C6200D432F3228452C1DEBD1803812DB0CCB2DE815ED2F111D91513E5258EE3BCE6168A2CB6618B4FDA7B3CE1FEF03786E90902D81A241BD31176F513FB4D198E2AA5451242

C1F27739910EC1FD61A90E758EA70338900451AEDD8A5A669C497C711907AF87359DACF51F4BAA0F67C147D9C1B775772B0A52E2F1E2162A1B60382AB13D6697A78D7D9524FC78881F5F566E16E7AD310F561631F97A91A40DB4A194FB921F0EFB260E4EBBBC02BA2C3183383DCB0F77F3AA303546FC12CF75909621546B4C719FE16B50CC18CB0516FAADDA593A4214847E06A2EA2EC16236DFB38AB59E68FA6BBE254D95FBE6877F0AD6F711FC74009766FDD50BEAB2C460CC40771010B0069F4A51C62BC4D972ED

EF2F17A49ACD7B5780E4FF5DA3EA29A0596E130E9926CD526862C65F14B271D192E9117A837E00F9CD727883B963066B078AD825AC8BBBCE957B9B9039F0C94017ED42B713DCD448576FF49E8FBD7BE55FA9A667FCB2EDFF2CD777E6CCB6FF1FB837303280290391B60C25742C9C76A82BC866E730C7C904A78C94F8F2DCCB340FF8D3C7E21D01CBF109BE2381076CC31EBA6D4E4CFF21D73BCE9FF1DBD412127AFAD09B24837E3464479512C1C73EC117507D217026FF209E682A8BABCBF1AD337F2855E5FA4F8B30

D06EA6E39DA7045016A8F32298ECF3FCB3170117F6BBD175F0C51928A92D76ACE3EE6CD112BF33CA1FFA328BF3FC42FCC34383282BE0138CE54C5A7786E4024B584E2D0801EAE4D723F715A873E650B5A9DF865034610C673B696D27C041CEABF28AF691FEA4E3D011A6E3580FD6C8BAB7AD236831CB47C8B14523203731648717A69E1D20FC082D8DCCC3C34FED735B9CC1117A5C691299E49C7955561508AE0AAA3ABCA9E45BDE474FC95887D76823B4865810CB81958E15516BB3A99266209FE945A438A81282F3

35E407ACC2F291FE2E26CB9AE32E95DF39C9D88C81349C6428D33F10D9350BC760D6D86F67272029AF4A15BCEDEF082FD848801638D80736035D79FD03F261D26A2B0F90EE1DDCBEB65C2C114394316FA92A8BFC44075FD558CBAAB988283A0A67479916EBF8CDA6406F0598ECD6974BB6F1294411DAB84DA7EB62767895F37B1A20A7667BD013C1D522B8408EA89607AECE987EAF8E60DB535A4823A995DA3FF537442AD8C29C6F440C8BB4EAF17AC952D2233334939483C1BF09541609F52237B94014C54DB96DF3

30B06381DD51C16F346843A524AADF73F609E5FF776690D3371848C1723FA1BA42A80AE303DC42881E7F52A9119C4ABA5A773EDA54310E715005F3A39BD43F1821F66D2D41D85FB5FF453F14CAC9AD8ADA898241A8FD2FE46C0F524DE3CC19822A0ADA9039379D1E3C154BA22083D3EC5CA766E48165BB78CEAC3F4C2056A509360FFDBA65519D79880A5C42C121600B5C353BD0B55485F6A6EA8F5A078FA52D806D9B47BD4B8463FD47ACC2703A9CD0DA4D3CD98E3AF6C9522DB5A44DA208C1EBCB31134D40C4FE72

F0E77ABB98F62165DA408C2BAD34B12E22EE5F307A1B46E7E20BB3BAA610262210AC63059784E6884FDF8E98508D31DDF896E54271921EB0186099548946E72D5636C73654CD101F3585B24FDCE22957E7989EB74A8111AB77CDA12E70379DA4230F3376E57AB035357154C4EA508FF355B27A4BE648E8E74D3449DAB0DF106AB3307FE9BFC39E17DA06792B43458E9A4696E7CFD365BA981A4340D3CEEB446C668BF84C700A4EC31FC311FC620AAF88862DC6E4AF988B12112193AD29F49165A6214CF600A3104078

F7D7DF9A52239401AD023B2560B2DCAFFB70AA2B789B1F0251ABFA3E57B78B68C2F23A4A9F03A7B659E3D1400542132A6456D403172F8B3EB2E58EEF2AD47CDDE8BF08FF402142CDBCD27B23AD1F2ADA7A4D6D51C9B0C450BF2DA548736D15B19C7D314DE3B73025348763576B0F4CD26F1C952BD82AFDBED768F63717D82ED74D349596CD9E4FAAC53D672E6B4D0FC0BEFD98497C21201D93D4AE00BE90C94AE35053F7AA00C57C5CADF0F38D7571E11AFE7D60BE9148668364DE2EBB1592E1061131104761EE8E54

9D78E54EA54795C08EEF4A61805E9B12BBAEF754F74B15AE7F79E2D751F6AD67F4F40E275FFC3FF291882CCFB5ED8A4ED7CA755189029A17808778C80161225FAB383D508CE5C6F0BDA6FF4CF8CE8547F56A11C345A8D20B96552C0553B286EDA829E393C4CDACCCB8B979A430C25F3D055179480523FF74A356A285ADFF92912744732E561F34566E7D0DA06CA88C731FD1729400FFD670636CB242EA993C5DDC1CC1BCD3F52D2CFF3DD24107481945256C824D8952CF66571DD19A6C1EF014475EFEE45ABFD26C60

DFADF7552E5E5854975F7364C547581814C99161ED6674C15478315C6F7234E4C5E72DFB0BED502B21078596ADF5C02D8D1FA2D07279279E98B19C48A3F670DA9311606EAFA00C4F654DAF0B70F9C2533320BAE816D0FF6761EBCC0C583CF2C5D9D94195D8FBF559FF415439934184DC5881B8D14C1853EEABB69E23AE8DB29C8953D0FE18FCE7065EC1FD9E7B9D3BDEFDA8C87C39325C4BFFCC80A889131241E22E0AE7B947E0FF219A7116618A2510E03F2E1D0FFD95F26404819C53F3B6CA555C99D4F174F068E9

3CFB0700E43EFC73CA672F83E58315E86805ED57E7561987C55C02FC1E41C54BFBE09F44C0102609F8C59F96447DB8D64BF6A3E695DB24B3BCDC5F39C1EB7D5B34B67C824E2234D45F24A0CD8CF2B0832BE96E9071A5F15A115D4DCACCF68B5DBCCAE4A7E4D5D5407E3A275A9A3E913FE69C9D07CF8BCAB91D880B5435C905CEB345C27089661251DBB103DAC6AE3429DF19FBAF60EDA51FA35FCC8FEDE7BF1B5620A837A97EEE5B38205DDAE6EBF591AABC033DA33C12C4027C3E21D431534A3B0217B0043C1DCCAE

47FA01DAF39ADB5B9A0F89C913C9713D0D3A52F161F3F95719BB7BC78FD6358213BD61E724927C64D232486FAEB159226DBA9C6F1B9316699F3FFB38BBCD167E2A01FEF72F241449F02AB88303C49F1CC6E20FCFFCDC85349962A3FF4315FCBA2CD11329781C2404D99A15E3782C14BD400C5B8061A13DBEC3312653FB266013D4FE7F0E6719285D63234C4B1EC061973D809DBF5783510CD9A7E78EC059121291B8EE27A91BA071B82D9F95F31668E6C9861FB88B4499BC9B754DB6F52727A7420A4B44DB40EB50E5

ED3BDD2CFDB668617A661CC49E774CE8690C2B117C2A398AD627D72EEC05729D90CB677B5BD9DB60F8B9BC60D0A1682B684881FF074FFC973C6B298A3E3AC737B4ADD4AF8FD8450A211BA31DC50B6CF8D9876EBCBE31333E2461D0414D17366A82679F2914C830C94A81EC028C73BA018D7B2641E0DBF3585312CAF811541576A0CD56CD27FFA2F1147F4EE9DE6A96CA4A7D93E219FBAE54F8FF2D8240086E1AA0B140C563D93C1316194F4889E4A008B0A03698E050E83756F8A4885E7983A3BF3C9772B342C888A8

102B0CFC4020EC135BF70A64E6CB2F6438059DAF10D4A75AA16BC121605D1DE784CD939A2C91092B167A07A8AE4C33CC5A9EC532B261F2A422589E52D00A6FADABD0BF510A82FAA412619928BED3325699AAFAE757DFA520397BCE812BFCF17C3CE58BB3DFEE9F26EDE53C7F8A5890CF42240ED9591D9E6C9628F2E240B27309D0CAC7A168CF1DD6063C9250035D4E3EAC8047B3848D111A282F26C04687F857881439D909B3E258B0DA728257C1A0155A2A04CDEB43EE45B84F6F2D6F8AEB6070E7114016CA0C63A8

E282E62B7B703FD95EE5E551A12277EE569098114FA6B2B579C5B87355F8DE03082868646DB27A7C096A009055BE783B9667C5569394A60D53B72CB7C66AB5EA845660C52A60C6900EB6CF7ECB30FC560AB7E6F9D6B8DFA688A92CAF087D1338D6BE2C35BCD59E48DD72C87FA1AD1E9E76BD1CACC5CED3939ADD9FF6D63BDE214BCEC93A14D8CBADB528D080CA3A13BCBF3D04CEB3F1F1F2E4BD7C564463473D518D56B863A97743EF331D758189542B131B702930D6D98AFC64A18A25856059EAB2962822CF06D572

BCBBDD371A93C988F51FD04A9401EFC64F0CDA1EF9BE3365513970816664BD13D2B1A2F506A290A48783FFA1D2ED2DF1B18F1AE26409080136606961EAE32A95CD1CDDC1BCE647F429399D592C86F384AC05C0C5915E6642D2A71BE80BBEE1994A611DF88B565F6663D89C91F48D3FE8C66D7B0E45DCC90A6F0E24EC3CC9954EF6317D9B0A763CBCBC88D4C9CB8261D2FF8FC18E4461F7E85DBB2E366FDA16E0733851CBC037852CD57F7CF83945D3FBCF9A7F5421E1A59131FAC5F0359801FF8A50D57C6FF76B6D88

CCD47D362F16E86154EE4203974DD512C0EA60A67C17F1812FE1F6CEDC2C8B15F783B11EDA5CF5E79AE7728BF74FE9532487E51658A963B710430837F4D46F150624E6C5013C0448962DDBB46E304E9F02D4D4CA74C6D382CD21BD8564812953AF3715E0ECCB8AE09F4C5FC55E4925C07E08374DCADC29A70CBD17AC03AC09A3B84C6B047B331B6E46DED8E3FF0B5F6527D4D92D3372D885BA7F08C0548BAFE2F10943D2F292115057B48BB8C33E0DF92706B7607F0E42CC0D55CE918E63114FCF4779890A8D02D6A1

F3FE3184389485F94B95337D54987971EA46B6C5BA1C382132415AB28F2516DACEE33A466B90B7EA882C66BB783AA6E7DE70DF42CCBEF228170D4D796B1C51582DC076912FAAA6952E0BD36DD8E047AEE1B9859125CAFCC5D4A679CB9DE150C5325254260992A55F415F8D8EC6E8484D6F6194CF8BCAF95EB730AF60498A82AC6A2240F8DF9384A23607D9DC82BCAC3729C386BBD7EC363906CC72BB5F26E52AE8D4D6731FB79CAE2E16F330D3E28422D1807A6F8F17B03B9A5143EB463EE7944E7C533FF441F6FF51

FCFD885F858A4DD80EDECCEDC3395A2304EB0920BF5DA1526ECA86E8217D461A32DE953732EDEFDC14496E32F019CEEF1EEAC6A2B01E869A8E16DD7AA7380A787B16AF72AC1BC5323E8755D8D8C1CBB2101CB65C8C8974BB8E8B00FF3599348669ADD40FBD596576A6EC3C0F57FD89ECF89A9D07A939A83B5B372E4F09C1223A3512D322860AB0D2B09872B9FF61299F71021A2A37F4DDC2760C34132F65CEC42484B24309601369D96B24C4A2D38DF4419A6B6CE26D464D8057165DB7FE29192CFD98BCB32891D184

8BEFF9A979417108CFEFBD242993A279ED997F1CC9A69054775495B3447D0C79FFAE8F7E9D3B85CBF78C2652CC828A37A888C992F3F868A5780F490D77557F2099CF7A9382BB9BDA5EBF736880282C585B4CE6345C6CC4114EDA6DDABC885C8185A51915688C167400C41C1FB1D760F018ED12F5AE6EB1382CF5683BE397C9C6626104698EB6BF6B45E6AF06DA9B3491941213BA31EFEFCBEEC7059EFCF154D975A4233D9D6FD6C2927987E5EB8F89C265FE0C4E3A9B80601C2057D0CF798288CBDE4EFEA3DB3B8560

F9A4FA57C763E1E0828EBE0727E67D63BB54574F3C42379B778ECBFEFBE9CE0E877079BF7851ECA3ECD8BE53B67CDEE88E13B75515978C646F0FA9524F30FFEBCA0F650B3208EF0FC88446C1A9ABBF5001BC75E1D1AE6F562D9ABD9E6ACDE2FD54D9C994D833BBEC5B666F0BE281077F9492F149D5A4334C77328794A78B497778782E7EB506A4FAFBFDE750F94D75950BDB36C4A5218EB969D6BE579173BF52605586B15902EE93DAB0F821B1D8CAC5B84A52603A8C7BB8D15B06E71DF6CEFC2E9D8B8E1A2DBDE2C8

AA7C8F8DA6C188DAA87851A19A729DF7413515786902E1E77FB92834D1D697A0D838D21496FCA80EA7A88C35897047755B6ABB55B70036D7E4C9F8CAD1EC504EE2F623A06A00215C5FB6E8E74E0C73F23AACCBB014404A3C0E1EE20101F0E992DBB6982736DC4CAFA2DD83F043E5C4D57D505118DF7BBBAF108FA01C6A8ECF5C4D90463DF0E72024E66BD475FF52268D560F8A0E77D6AD4D0EF16B0C66949C6ACE856E1A31F7C999FA4BF900CF359986BA7C824E26F45EDB39AC9208C062580F48C9D5C864A00D63DF

D03E868570E650DD3A9B2AAA6FDFA2A003D16072AEA522BB6240EF0882A6B49F3F5B38EF1AF52D42AE44BA2E34021E840692853343E444F3624ECA5CAA3AC8D668E341984D99096A9505DF1BC5EB8FDC642DCE4B92BA51DABE4AE8DB78656239B39B59CEE31A13110FAC080FC140462276D4AC0B4BDF570D4F42AAE3D1E4EDDA055E8EE2957B9F8AE16B820B413D67893AC88013BD7F14FAE80F56491D14A04DC220D428C65A005A885B4C083716FC823DEDE79E0E86993648B44DDA26CF17368F28B2419A943C489F

0546DEABE551F97CFF9B4E979C15D316204FE5546BD3784671D0B98021DA2530A35DF1EA3293DA396FA5FE4D0DBC194DE55E0B89E626F47FD6C9E7FA74D4C0E923CC07594A309FAF16DE2D8128B2EA88ECE9599686A02A0B89353CF55924F1FFA11716DFF16AE8EAAE232B804DED8B1BA1CE0D099C53336262325C8F0C099747DB343BB6787555F96BE9AC6BD2C4D6EC3EBF5E135EC2A1CA89A400EB5D776FEA418A7A2304989BF0989DC2AE6C0B99845EB90E5C3A421EE108FDBA10E738566319E45A61C2204BAAEB

A3D40546A4AAC15438E3C78C9DD2B12A978BC29DE4D9E47ABF120EF0122B5A40ACF47B3030A9E61CCE938F498411E81AEEB0A9259BE9EAA6247D72BDA632576A2E8E1920615C31D704FE54B4693F8A8598403BCD0CC7BEC7283D61C2E24ED2ABB2326DFC2B012AD2B1C4F1BF0C5791E805BA66208E6E4B3E3B5EEB4DB1EA272635A62149E2DACEE2344A6CB038DB64D4FC620D9E604FCDC168D7AC4D7E84CB6B2ACFEF8E02293280FF43FFA2EA28710A29599C44FE6FF0E15CCCE7F3C4E227F31E8E4FAD25E23014F7

808FA21E51F3874042EC85FA7A093D02A9AFE7E0547893665728CD4DCF8F2121548976EAC157FFEB822902D3420613A87B5C3956D86268ADA5E76E9EB31E5D12F699AF882B3988279EEF011CA117731CD6FABCF2EB3B457E4390DECDD517A391D8113813F5D9A40C3E1F85CFE93F0C9F71AB86E6AA4C766559EC586A2044E25BFCB46CA640C6EF483E70DF80DF89E0FFA205A4CD029C884C6E2A6F1FF20F548C45ACD6E2CE3A5CEE61084E833953AE8D259B74B5B95BB827E3F4A376A5C22A793BDC1092A0D9D265CC

9942503C9CE4C4620A39BBA79B11FD1AD3A9917B2B4B257309F9A15A13C9262CAAB61C126B269CF93FC9F762E6FD3224D1A2A82916196BE7B6991B88F6B48073E6E2FB5824CB9FE6A2257BE730FDE868A495F529F6F4E9C3A7AABA320C1B31FA2E0BF88CE536850099DF07C1D6CBFB3543F6C69C266B0DC1185FCA856C356EFCFC1ED2CCED3212094718ED10EDF2461E38388CCA07FFB44BC84012CC9E84DEB87709E8FA0A14186FB66A6886EEB7450207853C9F6C055296C8A3C905B6CA08373DDFF10EC674B5EED4

15933157A84DA357DA75471FE6C260426827D5D29A936DAF0723445BC194A16C34AA39754EE45DFC105A76604B17323170CF53DDD0475D64A832E2E2516D603DBA3C4CC27F11E28A50FD45B9DB780590FC2F754511AFC520300EB264EBE90408673E54D8A78DC57D255E2CA9F6DD5D036B60A2421AB243BCC81E4E30E4F49EC297451B31CB1F2E1E4F13F9E4DFB783CE987C68FF9922F82C02726930BE1FCC83430FBF5654A640891087CCC7090EAA17D859A867370E353D5101411D061035D4B2A340A55D3535D7BB

42A0C3D795108A91A7E7C0FBE792CBF6820FFA641064BC8AE5BE90732F0D573C0873E30B75F8A84CB902AE45D41FAD1E862CC4840A32F21674AFEA1B115295D5F701057927B0B0890757D13EDD6A30B6EB14DC7B3AAB6968169F7345A73E3FBA945CC94F624D37F7BC8F92FAA80B46AB26A56624FD69C0FC50505900E97A009A76E1FCF31C18E4470E10F850B37C14A517C21227915EE022E30D6A4A2E482F333F2A385924BAC215F3C1D5384848DDE9A070A6D4683E9E10333F9E71D1DD2F34D3F1C4375CCB58A274

447C4C4F9E41675B8E339FB3A2F577A8A2D88B1B76BAC040EE2AA61C757D1CEC2F3F18ECE06566B175A71EE09EE44DEA86D18F10288D9BFB54BB276D4313F277BFD17A1DCAD3CB35A043F597CA911ED1241D0A68EE967690448213E4B2EE190210C67797E66126019879855C3BD34F36E34BCA633A71FEC434C1590AC69E554BF49E58AC6172FA417BB73E3469A74622B379AF41D3933FD539CA7E130B185CB24D9BBDD5D2FCF9A89A081AECED4D5918BE6DF60C53ED14093380F3656442B95C3499B60050B3FBCA0A

0670FFE05C6AE2B99BFB005796953BB5F3E76F083B995FA985E36D4E44F6FEFA8DB84DCF07ECCF75A3339FD8451EA485E6511718F7606D3830339B5097C907C72BFDA11066414B6AE572B19C0FDE1ADEAD43293554C26C3BF5523F5BE389AD31B7664C3FA7FECCD6DBB71A94731AAE36E4F3155A6A3D634562B81CF8DEE4607BDEF7A43C3667821741B43C16248EAA616D472940D569EC9D809A2DB04D8AD4CF41F21C9091A89C1F16E00568977043D94309A2C8E51BB628467DD1444F05D37E5F957172E33936D2B1

A0975F94B93C828293C2926DA71ED858483D3CA84F921F2D9EED913E2168F1DCB94F842D8B63D37CB4456700CBADA5851A7FD0C4A0F7B2E305228F2C2CEA4316811CE094A808EA01C72438ADE15BACE40F6A37871D9BE61FA9FAF861603B395924DE409BA3DC168F90DED3F80A29BA057EF8445B6A1692497953C72DC4318A48D763EE953911D1B2C97BA7C199E89B5C1A99AE024B90D3FB58FBC2FB8E9D1FD53752E6431F90E689A45069090A82A53FDC3C01C88CEFE1E753C50A102E6C87D811B852CE4E0C54F112

2DAD8E8145E7C0CBEBAE7228B078BE56790FB063BA00FA8A1601F1F03C4B99F978F152DC4E166D513B257B106474C6AEAD7FFD421B9EC8FA5CAFF1B89C1A963E4706BA6C4CD3E9A7285AB8614AA9EA7ED1F3FAD88D1FD35A4BE30DD1BC1B259D633D188BA39C74F23B84FB2E4A0B0971D876CE743987C6A1A1716BA65722C5D0148A261F2B5957BD0D84E2EF8B7FCC61ED0F6E689E0337BC921658790DA20B8EC8F49000BDBE2DCBBAEAA39435E688E04903910A85D83423E4BC3B58C749057657166C84879793F3A9

670DF0420E24DDC41D958FD9A2C20F8A2CB25CD0891B6509CD170463C3AC2FC882674BEA44881A1E0D60B9A4FDC1EC57DFB8057A772C273EEB9EAAAA6771FF1616A7D7BACFE69DF81457013C985F62756684EFB1BF1C9ED5972389DC5F6B4395FB8B2A8A31EF80C851DC0BAAD15980D4C07C75025AB9D8889054D032E2C11D1ED55E0908D62244ACAFB8E99DB571DBC33CA86EA9EE082646ADDB73632483CFA88549D900765B938C276816DC8F1CA4E3F5F5E1EC4CAC716A53E74B060C6A94B717EC226055FDE1B681

01CC5D2082B7336AB5E38E3CBB1365664A243525534B90D62FA541A9DBB53428949AB0D701274FA7A92B20A186CA5E1EEADFA69D22D8F68BBC7CABD9485BCB42868D9AD5C140F8FA5C658501D4BD218ADE30615312C5AD13F3A9C828F07490D770969EECA3A368A8AB339EE8F1BB4AC6FDBF6F0242281DCD366A0E2482B44C69271C8CD7A1620174B9C97BBD2197B9B59E2688BD13341527D62FA8B4CE8DAC18641A8C4A319AB7CAFF40814D5FCA121D6D933C8BEEA75A8BE5CE1A359FE3E899330CCCD14E5583ED6F

A6771B920C5EA6EE59EF80ACEC9BE23E648523588475A2916A9D69B92A319CD84CE930865C8092E30E391BEA9F268059135BCFEF666575FF4DEF2C9B9D4EEB8E72B8A38AF312DED9BD41AC518AD39DB6D68368590BADF1BD4851F8DDF9A537832E0C8A204504027250881F095A470EE59C553395A306CBAEF01069C56F6149B5BFD3B33F18FE2A41F1328F97405180D0379FA83229759CA7800E433017B4AEAA120DC1F6287C20BED2148CBFB4A7F33EE272140921A1A5B994BC8FED5278FCFE302346C1B93BEF7DEF

45C3BC48280DECBB235DF924DEDD66B279DE6DDE8098085E32B1BCD71D02497EF0A5CC76682967CE98FBBAD9EDF67ABBB099AC090172FE37C5BFE86DD3F8626F446ED02CAF01E3B6F99D0BD7B5429DC1034CD86ECB6AB4128BAD29CFC31D2834C998C82384E2A02AE77BF1C915009F9120D38EC000A07D46AABB110B8437E230846531C7C6B86FD99FC8CAEA13A19758BAC780A997EFD86578534B5FAE4F5CFAFE6FE0281F39F1175D8BB446D1618351272A2B6E93BAB57DFC2B5B38B495A4AF6B57740EF2732D558A

8F037A94FD330710E825ADFD29943D64D8E4B7EC65A8CD2492C686B6D60217209E92C309F5ACEDBF54EDEE3E1C770B82907F6761084D2D849F8A2F95166ECBFCF1B00E7FCCEF1CFC4BE94BDA13868CE10AC743589E7C157D0F0C95C997F6E99CA8CEE67F363903B4C07D3D5D93356F2BABB665A87F4C84C538836CA35AFA37327799513A30EA874ECB23ED37C5ADB154648264DC13353F41F9942900D8DCF2F16FB2C739EF58FA9A99EAA6C141A91370115ACEABFEF76F28C4CE5BE231B6072B398B444334FA2BFAF0

A2313D37FA908B0BDF079EB6D211C59C988258651C7C6D1256F87163F3B4A69B0F840F9CE059A3F8614CB8082B0741D97E7377ACF30A222F6BD3104CA504406EF6D6AE9296DEED464E181EB6189F384609934A93FE401EC2AF952F33467E42BD4B741CE2CC9DE9E00371CB981735D7D34ACBD6730B2D4971AE5AAB283A378CC274A032829AE9133DA47E9C5C46244EBDEA7BD3FC781DDC660723214BD85A2243E2890A164E4493333E0E92C4921540F2A9AC53AC0BCFF34805CB7410B3D48A116B96986739BE621034

57195ABEA7772ACA364D578F6246DAC27029010B9A7310D6258DB260064B80D9963A0037B5AD5C325C092985C183FC01B5FB5FF47F85E433FF70452E4508B6E8547E41A83343867850F6778ABD656C7ABA14505D6CE19EA5EB38899F2C1482395364A12C65728FB174BF054E9DF71FEB86016F76F8830E664798B3C761407977A87C72BBAB7E929014949855E51F6F66BFA881E4DB1D269F2325E784AD3F0553C5DCF9BBF7E522DFBD1D07C37BDCCAED78347B1000B08E6F7CFB2A3A969FDA8D016F847EE224AD0BF5

D7A9091363BBBCA51F982E7EE80B8776972E86B8D0237F6AC7144D5DAA6EA48FB837B521A53CE02E9B8D8D95F67763FA6658C4605558C80BF6DABBA50F47A140494B7CBC95CB58D55E03478B3077C851C1C0A87E5977F40572FEA4060023E9D1331D4FD9A80502A4AF1D0AC2B56AF27D097B0BE4F9C79DEA2E1FDF1BF44942641BE80A9A7BEAEA6DAE1805AE2188DEDB35F628428A98D1172D70FBF8112EB9231A8471BD676A500B12DA129C043BE09BB192096C220A3F22773D9662687B54A760DC7B1B01D659FC2D

863129FCC966F60DDB207DF61A67E2001F366461F602C809C8956C321FE40A945F50320C7F37C085C313648A434AA9AE729547C5F1C8F830A8810E4FD8E34586435FE687E7BAAEC7C495CA3F89BC06CB8AAD91F74324E871C104DE5C291C7A9CC772BFDEFE611FABB46D90527CD755C86891A91F04364416171726AA1C39E5F7C6813B66247A8C61AE96C5FAE403B153172A420A23F0BFB77175CFDFF22CF6D020B5D3776DD1BAED9FD7A2CD1B8AA42C2C2802A4442F32A63F167299A5A1353E57D4E9FE553DF81DA0

89E37579D0167EA4049F259557E70951C1B37E37D84CB903945F1E1BA8D02ACD94E323D25265C35AB9E7E641065F5DAED3E1662C7B3069C57372D9773CB7A870EBFC6D4F799B0DA65F4E021F8C60CC0B6891DB72F034823FB03F96C242FCE7B4C4B051EDBF55F4EFC848B738C3BDDA20DA5F7B5EFF7135ADF1615A63B777998E07D9F23BA4FFDEC562D0957053A1371489A03A9ECA35EF88DF214C28D701B504D58657653B19D92B3FF7AE4B254D33117979901634B825809BD7A9CD7843A58988C8918BFBE1F2E9F7

3D38DC7637AC7216285F8EFB1BFD45DEB65A8489EF3BD144FC7145B62857488199C04C303442A4BB51D62B082FB7DDBD3279703D5A4C528A0EFD2ECB325EB4126B5E524889DBA6CC92F54BA9834F6B2450DDBAF0436DAE8185D9DB1D01F45D6307A549272842F40E0F7094818FA921F2CBD2A9BFEF2A52F98F9B9A24DB7A795D0F2B7F6ECC8E8855C9C49CEF41CFF9B798F0D5AB3FC31BCCEE0E044373D58F5896FE4EF9DDE3E8307347C407501747E47095FD437698FAC00F28958A6B66A204FF7298D1ABEA3FC757

576FA2E307367808FCAEDA1DA899EE06B49C89CE294595FDBAA1834094A52E82E4B63FBCB91E40A2209C8102FB2D3D67DAB85E29C62532F7EEAE27A015BE68B638A28010367DDB165B5E9CF8CA029CB49D19761A6081DBB2519E54D4EC4BC7F2F6899BE0C4950E3FDB783E41C3BC85715B4541ABBB06E47AC993483C44F6F06C92EA72336F2A491609B1DCDC013EEC8CEEC0F582A8582A4319841BDE79FEE651E463EAFB3DF3C4F803F8A79791E5F941698D25825AC4BC0725D4ACEBF57CE87DECE1C5FE8E83480D2C

174AB3F901B4F9AF51B45141D023EC826F0A5B6BADE5C9F80A1B63319084551D787B53EF1CD26BC83E3DA7610AA13121707FA00ABA66BDC29C25E185DD4CE6A356A9DA636FF6D5836BE21074BB3037FEC9402C9056650AFDE8AA06FCD3F25B9261E53228E613708033B01B149E71DD2DE4ED4AA811CADFB393FDE190F61EDEF891A6534A568482F0508D73D8EA9A40E6BFA2551D43B3F6432986BCCDBD30E9EC6E4140DFB33545ED46C2DE9591BE0DBA9AAA00571A6B45F61719A9283DA3AD79D4512839C70415B667

1C96DF89F68D20D2E342C6679EDFA6DAE71908A70A69C110C553B46D6ACC87287EA66B139845573A463DBDED416EC2E1F7B99A038D89CCBF12414F32D6C55A1887FD00F681C4D978E75C4532026DC16CCFCAAB63209B3847D6F6ED9D89455F40CD9CD781BC314DE9EAC51DA837AC1851E13CB457545C9E1F86E771FFF6DFE4FCA06014BC70AA39660EF1EF98E37E87EA7C43555337A61E24E339A0633CA30C58AE4B2CAF0BDB91A074CDBB03F01A2D27F7E8A03E15BD4F0285C03B41FB9A63146FF46C5AA2D1908EE6

712B3E7A0E7052EB38B3B3E74C49F4642150139C8183D812BFA75F875458DF1D2D15CEC37EFF08CDD3896E63C7C28F32995C80050A7EBFB64997AABA1634A00812BD2228B67295548228DA9A1584ECACB37215E4E8B7DE0F3A38FD8E14F97FD58BB95ADB6929263D8E7C7019AA628406BF6F8F0D39495A7E8A63B23FE510DED39AEDA56DD0981B1C25806A0572DA91C9AD2B555D14EC0556F26BD1DC299721476674D30632CD9E2A6A6CFBD6532CE7F872306B6A2D72016AE854AC23CA86767C898632746A2E1EFBCF

924A54CD5B4107179F36B9AEE6F6D06B92CC6B4D2D172BC9B4F24DB856C21D8DFBBDB754EECF468853AD47D385D5B24A0895880D75B76C137261D378497FBFBE4FB642C09D8A5F6E78E32B1F389B5E8E310D5D9A264FDCB78D6C7E38BCD41AB41ADB3052527B559E71D45AB1E7191F006AF27F7BC8DB9E0F0CEB9DD2CF0BA9B08064A1AF2D8ECA79C684636F57008F918F7482EF665813002C64405C6BB765C998714147B59B4B09CCDB41295E2C0DDEEB853BEBBA2B109AFC8E962C8C3B81BC7985577BA89B69A008

D880FD7CEC2BCD185C1C5FCDBF22B8EE833801263106D2B66BC46A2A1F4B57DCE09F5D5AB4A5ED9EEEE20A4F12A6E1E33ECF670CAEAFDE144FF5F0303E692A3CB8FE56F9E6F030A20816A287416DC09DF91A659B5EB4AE32F5CA121A42EF2602195496A335EE6AFC86A36E308024846D7FA1033E53D1624558098A9101E0AC1D2ECA659CED88203739798D477A194D16D467F66EC8B19067698F5F537254DBCBDA5EA4205059FDC44803343DB14D99C91DA29B6D4B6BF4211CDD33E37001CD8CEE8DE94EFE5D8B394C

7FC06D93C0468B7EDC98CA6F597F77A11B953D2CBE9E8C1DE2FB07084E6DC56D2D3C08A02BC19851B0B116DC83F33F37BFEFE5382677315D87B081F36B42E4480A4C8F47B92D60E8ECB767FF9D111EED89E0C616189FC517E5538A2CC5E3B273E50BF8455C1416A5ABB9CD82BEBBD0D3C5643CF0BF8795992A7A559F588DDBEE20FC625AD3278AD00EB1C0622234767A53244952FDF9E8ACC0F0A6DF2D3F2C3E36D4DE87D46CEB1E7260A9FFE8582366CC623D1E91D6A16C509A08ACEC5925E8AD91380EED81E7D72F

15034CE4854B87ACFB9A6D6B819EAAD716FAD3E8AB3D36FCDEF3510E3AD778F73CC4B201BAFA3E04600513EE7769BE465C7BB03B3FDE1DEDEA1E23C1F7E3A3F6B7E105CFA1B4372819711A377380991423CDB1D79D8D73E81703B0D0DF037CE3931773E818ACD07ABD914E214D78E54705D0CDCDF1AEA8F74D0397A06E6063DE3F0401C712187729A1184FB35E1D8C81374F64558BD56262C23B2FCFE600D2DFFE5F35FF4C5E6476F7B4AF01B03301735B68A1C1AF3124D7DB7612C04A1376C228820F06E1F6F79C10

BAAA284BF1B095472E97166801133D15FC567939AFA245943826BF4CDF28113C99AC87A5CE3E4AF2B846A0CB80C47CBBA6FBCB949A0D99A7A175490FE9BBA390B341E3E801FB899898B3852FA2F284CFBD47E5A372BBCA7BF052093C6FD8A7B7FA4CFE45522B924BAC0EE117F72CE5B439F7556BCC784F718572CF5389D5743E363EE36FD0A50C660717AF0C1132B6D1BB0E405990E390FA94BBB5FCD93C92EE1CADDDB1B76992EEBD15D1A05936240F9F4636DE5860752D2E7CD2C5BA5104886362C8B156559FF41A

BF5D459C9603DFEBE1E2B5B102D26A4DA9381CD1858640E9DAB4969CA153765541468CAF67BEFB9AEFAC347A9879FE99E073BA4A31A9CF4DF3EF0323C9A3D6897C1F6E714967037BC0A9ABDCF898DE75D6CBF49E98AA17008E01E815FE2134F6FAF17BCE59E311899949D0C34A2907530926D6AB089354056EFAF679F37C671DABF06C9A5A11DCBC04BCA5AC0575FA45DF5CD403111147B9BA7153FA1953386D412BDABCEBDD32DA1B83646278C14CC9780D4058DDBD84D6C1B0173B1C6ACE5B6D0EC7FE454DFBB6CA

B3CBB3F61461B80B14C607D39A4D2CCB4F3EAF25058400B94E20CEAB3B2A436A90EFEF39B5D522A6B7D8AA5E459ABA6950388E62AA6BC005F63D9E9807215BE00D96338F286A153DD12E7B4F6B38C8CF95EE5E1901367AD7A04C0B1D2698E740935FC4D6D4DD68E69B4296A492279DB47C6F3CA5AE3581A48CBF60461013ACCB17EB3AE08EABBA084F6148EF0FC4D5C5E724E74775F5339F189C4398F800D70E496785B430F2837866F797CE92E2EC5BBDEF1E40CE93D81CED84E425C5C81D308100DB92AFED5047B3

E45FE6516561A8D9139C7FF35A2732AB5F09C65F3D482E5F13348713CD9F306CC7FFF5EE78E63A29B4E305C995EB95069421466251C59791656AA59D7302A6A083ECCF901389453EECAE57D9792D589246E6064AA05AE79C1FDABABDD8BFF3DD8750694F352637C9FDAAA3B4F9309E0796CE2E7C06DF521ADC9000D5E833BE2702EBE10D195D52D799414514A182E80BDAC9964903DA70A079A0A8852248510D14ED146C921178C21F45E47FA5DBBFE2FB2882B897A665B7804B24CD8AE5FE269728EA6A9ED98CFBD9

54934339114106703A6629B88B927BD325B88C6FA8775008CFD13399F91D3104B80A4A12142E40B055522209F4D564A63261C0DBA2F183E4D4A32C9ED6C65F40A0F6029716653C98262220F1F9E147C493B9FCB7D0D385C13635D54E780CEE3D7E49912AF281F4F36CDDD2795B08EEAFAF120920ECEC880DB1B5196FB2C3C68E7BB95DC76671DC8B043BE08D703B65826FE4282DFAAE6F04627BE928DE2121AF5683B1417F8163ED1B769109362C6C7EC014A24CB2DA794BEDA9E38E4C2AB6607DCCF2A2C1494A23DF

2CCF92B970DA1A9C0F126C1E940EF5F977ADBC1A5830C42BEF485D4D580647CC43241EEBDED4FC443CD59636956A66A11998BEB096C9241221A169081F9BE7672B3B28618FCF82AA4AA73B8CFB97454688484CB0C829EEEA071386ECF5A146B059512141ECF933C9E9BDDFC8C3E2CDFBE6E8CF91E50F96AE9C273C5FED6EE473D577DDC3860F4DA977ACAD16EFC1C3DA22932DF2A7388604B5459F2FF4F2C890BC09DF8D1BB82FE25D40506224928028B4EE9D140C861BE39225DA3BF7C19E93B60C70B8D114F401CA

31A1952BAD6226F5EEE6733F02CF441FB465D2A3BFEA0C2827AFF86385060A9ED6FFE207989819A5410A5CE3E36AE924A44D7B0D6681C905634942E0B05293DFCC486858441E20A2A2528BCCA756344F7B1DDED30962B585661001931C17E06408EBC7F8C5279AFFFA6DC0F70000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
 %endeexec


%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if end
%%EndProlog
%%BeginSetup
md begin
countdictstack[{
%%BeginFeature: *ManualFeed False
1 dict dup /ManualFeed false put setpagedevice
%%EndFeature
}featurecleanup
countdictstack[{
%%BeginFeature: *PageSize LetterSmall
userdict /lettersmall get exec
%%EndFeature
}featurecleanup
(luca)setjob
/mT[.67 0 0 -.67 30.82 761.118]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Roman
%%IncludeFont: Symbol
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Italic
%%IncludeFont: Times-BoldItalic
fc
%%BeginFont: Palatino-BoldItalic
%!PS-TrueTypeFont-65536-65536-1
25 dict begin
/FontName /Palatino-BoldItalic def
/Encoding 256 array
0 1 255{1 index exch/.notdef put}for
dup 0 /.null put
dup 8 /.null put
dup 9 /space put
dup 13 /nonmarkingreturn put
dup 29 /.null put
dup 32 /space put
dup 33 /exclam put
dup 34 /quotedbl put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quotesingle put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /backslash put
dup 93 /bracketright put
dup 94 /asciicircum put
dup 95 /underscore put
dup 96 /grave put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /braceleft put
dup 124 /bar put
dup 125 /braceright put
dup 126 /asciitilde put
dup 128 /Adieresis put
dup 129 /Aring put
dup 130 /Ccedilla put
dup 131 /Eacute put
dup 132 /Ntilde put
dup 133 /Odieresis put
dup 134 /Udieresis put
dup 135 /aacute put
dup 136 /agrave put
dup 137 /acircumflex put
dup 138 /adieresis put
dup 139 /atilde put
dup 140 /aring put
dup 141 /ccedilla put
dup 142 /eacute put
dup 143 /egrave put
dup 144 /ecircumflex put
dup 145 /edieresis put
dup 146 /iacute put
dup 147 /igrave put
dup 148 /icircumflex put
dup 149 /idieresis put
dup 150 /ntilde put
dup 151 /oacute put
dup 152 /ograve put
dup 153 /ocircumflex put
dup 154 /odieresis put
dup 155 /otilde put
dup 156 /uacute put
dup 157 /ugrave put
dup 158 /ucircumflex put
dup 159 /udieresis put
dup 160 /dagger put
dup 161 /degree put
dup 162 /cent put
dup 163 /sterling put
dup 164 /section put
dup 165 /bullet put
dup 166 /paragraph put
dup 167 /germandbls put
dup 168 /registered put
dup 169 /copyright put
dup 170 /trademark put
dup 171 /acute put
dup 172 /dieresis put
dup 173 /notequal put
dup 174 /AE put
dup 175 /Oslash put
dup 176 /infinity put
dup 177 /plusminus put
dup 178 /lessequal put
dup 179 /greaterequal put
dup 180 /yen put
dup 181 /mu put
dup 182 /partialdiff put
dup 183 /summation put
dup 184 /product put
dup 185 /pi put
dup 186 /integral put
dup 187 /ordfeminine put
dup 188 /ordmasculine put
dup 189 /Omega put
dup 190 /ae put
dup 191 /oslash put
dup 192 /questiondown put
dup 193 /exclamdown put
dup 194 /logicalnot put
dup 195 /radical put
dup 196 /florin put
dup 197 /approxequal put
dup 198 /Delta put
dup 199 /guillemotleft put
dup 200 /guillemotright put
dup 201 /ellipsis put
dup 202 /nobreakspace put
dup 203 /Agrave put
dup 204 /Atilde put
dup 205 /Otilde put
dup 206 /OE put
dup 207 /oe put
dup 208 /endash put
dup 209 /emdash put
dup 210 /quotedblleft put
dup 211 /quotedblright put
dup 212 /quoteleft put
dup 213 /quoteright put
dup 214 /divide put
dup 215 /lozenge put
dup 216 /ydieresis put
dup 217 /Ydieresis put
dup 218 /fraction put
dup 219 /currency put
dup 220 /guilsinglleft put
dup 221 /guilsinglright put
dup 222 /fi put
dup 223 /fl put
dup 224 /daggerdbl put
dup 225 /periodcentered put
dup 226 /quotesinglbase put
dup 227 /quotedblbase put
dup 228 /perthousand put
dup 229 /Acircumflex put
dup 230 /Ecircumflex put
dup 231 /Aacute put
dup 232 /Edieresis put
dup 233 /Egrave put
dup 234 /Iacute put
dup 235 /Icircumflex put
dup 236 /Idieresis put
dup 237 /Igrave put
dup 238 /Oacute put
dup 239 /Ocircumflex put
dup 240 /apple put
dup 241 /Ograve put
dup 242 /Uacute put
dup 243 /Ucircumflex put
dup 244 /Ugrave put
dup 245 /dotlessi put
dup 246 /circumflex put
dup 247 /tilde put
dup 248 /macron put
dup 249 /breve put
dup 250 /dotaccent put
dup 251 /ring put
dup 252 /cedilla put
dup 253 /hungarumlaut put
dup 254 /ogonek put
dup 255 /caron put
readonly def
/PaintType 0 def
/fcheckload{{pop}{save 3 dict begin/mystring 2050 string def exch/endstring exch def{currentfile mystring readline not{stop}if endstring eq{exit}if}loop end restore}ifelse}bind def
userdict/type42known known not{/type42known systemdict/resourcestatus known{42/FontType resourcestatus{pop pop true}{false}ifelse}{false}ifelse def}if
/truedictknown userdict/TrueDict known{TrueDict dup /initer known 1 index /render known 2 index /imagemaskwrapper known 4 -1 roll /bander known and and and}{false}ifelse def
%beginsfnt
truedictknown type42known or( %endsfnt)exch fcheckload
/FontMatrix [1 0 0 1 0 0] def
/FontBBox[2048 -340 1 index div -566 2 index div 2193 3 index div 1882 5 -1 roll div]cvx def
/FontType type42known{42}{3}ifelse def
systemdict/product 2 copy known{get dup(LaserWriter IIf)eq exch(LaserWriter IIg)eq or version(2010.113)eq and not}{pop pop true}ifelse{/UniqueID 16#00DC3301 def}if/sfnts[<



02005800B30143000600640040005400BAFFB500A6000C0037017D0223000C00CA0118004800700079000B002B0047007A0085009B00B200D100D60005000A0046005D006900BE0019001900240033005800570096009E00C900F40118000C0061009401320422FFF10037003D00400065006800790087009900BB0134FFCA000200050027004D006500890095009A0199044DFF62FFBA003B003E00410058005A005E00AC00FB01CB024AFFDA0001003600440053007500A000D600F7010C028C02A003F70400FF88

FF9AFFD200080046004E005000510054005B005D006100710073009200AA00AF00BD00D300E90190027903C9FFA5FFFC00080010001A0029003B003B006600820087009400BF00CA00F100F600F70119016C01CB05B2FFE4000800070007001C001D002C002E003C004F0053005E0065006600660072007C00830095009E00B000C300CB00DF00FF0108010A0111014A015501A301B401B6021D03A204EAFF98FFF30001000200050006001C00340038003B0043004F00510058007000710078007B007F007F008C00

8F009C00B000B000B400D200D700E800F6010D010E012B0132015D0176018C019701A001CE01E90210022D02400250030A03D405A505F2FF0DFF42FF91FFD6000200060009000A000C0011001F002900340038003E0044004B004C004D0053005B0063006E007300730078007D00900091009D00A500A800B000C600CB00CB00E700E800EA00EF00F200F3010D012A013501400144014801530166016B018D01C802A402C2033703460373038E03A203B304FE055F06A7FDE1FEA6FF7BFFA0FFCEFFD9FFF400020008

000F0014001A00200020002000200025002E002F003200410048005200590060006B006F007100720074007B008600870088008E0091009200960098009C009E

00A200AC00AD00B100B400B600B600B700B900BB00BE00C300C500C600CD00D000D100D500D500D700D700D800DA00DB00DB00DE00DE00E000E000E400E400E500E800EA00FC00FD00FE01010109010C0116011B011B011D012A012F01340137013C013C0140014001480156015E016D01A501A801A801B201C201C601E301EE01FF0208021F0230023C02630267026D027B02AB02C302FC035B0361038E03AF03B703E4045E046704B204C204EA04FB0586059B05DA0609060D060E0643073607B4080BFCE6FE6FFE

ADFEDBFF00FF2FFF85FFB1FFBB00000001000A000C000F00100013001D00250028002A002A003200350036003D004100430045004D005C005F00640064006600670067006800690069007500780079007C007F00810082008300870089008F0091009400960099009A009D00A100A100A200A200A800AB00B300B700BA00BF00C100C100C300C400C800C800C900CA00CD00CE00D200D500DB00E700E900E900EC00EC00ED00ED00EE00F100FC00FE00FE010001020103010C010D011301150115011701170118011D

0120012401300134013401420144014801490149014B01520154015501570160016B016D016F0173017901810183018901930198019E01A3021C01B401BE01C801D001D301D601E401F50207021102110213022D02410282028502860296029602A602C802D702D902DA02DD02DE02E102EB02ED02F203070309031A031D03330336033B034203710376037B037E0385038F0398039B03AE03DB03ED0400040E043104330433044D04500454047A0480049F04CA050F054A0554056C057F05A505E20642064F067306

C10712078E086600EA010500E7000000000000000000000000000000550028031F02BD008000430147007201EE004400D100A400A504290183010202AB023D00D20247046404C500830391020501D8FEC1008D03EEFEF50371008F002F001A022B00CA0332028500AA024000EC0182031800B101A30047023A024C0166012801050094FE6801CFFF5401F6011E00E9013B01CD033A033A003400F1017200FE00B40230024A00C50174022D011D00A205480071012904FC006E00A50152006305F4041300C70202005F

019300E9024B023204F70025055400D900EF03B80057012D005F00ED00B101070251056701E504B402E00171007800BE06170300FC00FFCA0362011F00B103C0008503B50150005C004A00AA00A300C600D902710089008800B8034E034700AA0251007D004F00F4FFFF006700990096011100BE0092008400900000403231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A090807060504030201002C4523466020B02660B004262348482D2C452346236120B02661B004262348482D2C45234660B0206120B046

60B004262348482D2C4523462361B0206020B02661B02061B004262348482D2C45234660B0406120B06660B004262348482D2C4523462361B0406020B02661B04061B004262348482D2C0110203C003C2D2C20452320B0CD442320B8015A51582320B08D44235920B0ED51582320B04D44235920B0042651582320B00D44235921212D2C20204518684420B001602045B04676688A4560442D2C01B10B0A432343650A2D2C00B10A0B4323430B2D2C00B0462370B101463E01B0462370B10246453AB10200080D2D2C

45B04A234445B04923442D2C2045B00325456164B050515845441B2121592D2CB00143632362B0002342B00F2B2D2C2045B0004360442D2C01B00643B00743650A2D2C2069B04061B0008B20B12CC08A8CB8100062602B0C642364615C58B00361592D2C45B0112BB0472344B0477AE4182D2CB801A65458B00943B801005458B9004AFF80B14980444459592D2C8A03458A8A87B0112BB0472344B0477AE4182D2C2D2CB0022546608A46B040618C482D2C01182F2D2C20B0032545B049234445B04A234445652345

20B00325606A20B009234223688A6A606120B01A8AB000527921B21A4A40B9FFE0004A45208A54582321B03F1B235961441CB114008A5279B34940204945208A54582321B03F1B235961442D2CB110114323430B2D2CB10E0F4323430B2D2CB10C0D4323430B2D2CB10C0D432343650B2D2CB10E0F432343650B2D2CB11011432343650B2D2C4B525845441B2121592D2C0120B003252349B04060B0206320B000525823B002253823B002256538008A63381B212121212159012D2C4569B00943608A103A2D2C01B0

05251023208AF500B0016023EDEC2D2C01B005251023208AF500B0016123EDEC2D2C01B0062510F500EDEC2D2C20B001600110203C003C2D2C20B001610110203C003C2D2CB02B2BB02A2A2D2C00B00743B006430B2D2C3EB02A2A2D2C352D2C76B04B23701020B04B4520B0005058B00161593A2F182D2C21210C6423648BB84000622D2C21B08051580C6423648BB82000621BB200402F2B59B002602D2C21B0C051580C6423648BB81555621BB200802F2B59B002602D2C0C6423648BB84000626023212D2CB400

0100000015B00826B00826B00826B008260F10161345683AB001162D2CB4000100000015B00826B00826B00826B008260F1016134568653AB001162D00020100000005000500000300070052B10504B80196B2000607BB0196000200010186B50303000A0605B80195B2030704BB01950001000002C9B2020203BC010F000900EF021800182B10F63C10FD3CF53C10F53C003F3C10FD3CF53C10F53C3130211121112521112101000400FC2003C0FC400500FB002004C00000020089FFE8029105830011001D004F4035050105020503140114021403260126022603

860686079B089B09A908A9090F011110129218400C210D1F090D0C0211010015A21B0B003FFDDAC0C03FC0C00110D61AC81AD4FD2B39393130015D012736373613123736373E01371702070607033436333216151406232226011F1A05020C19270103036A694817C13C1A0BE6563E39415943373B01861126186E0100018C15214312161312FD9EC95638FEAA4F6041394E613D0002011503BB042005BE000C00190044B2400E01B80141B4801205030FBA035B00150283B7400D210E47800102BA035B00080283B4

400021011A10D61AC81AFDE9111A76DC181AC81AFDE9003F3C1AFD3C1A31300123133E0133321615140706071323133E0133321615140706070159448E0F36222935070508BD448E0F3721293507050803BB01AA2E2B332B0F1B130BFEA301AA2E2B332B0F1B130B000002008A0000046D0577001B001F0105401E001E1D0D0C05010306070A04020E1C1F1B1A050F11141518041019100B01B80368401C000210022002300232043205320832093E123E133E163E17771E0D02B80367401D05080903404004500460

04700480049004A308A309AD16AD17D0040B04B80180B212190FB80368400A0F101F102F103F100410B803674010131617030F12011221071D1C14130508B80369400A0A0D0E111205AF090109B80366400E4B0C0F10030B02061E1F15160505B80369400A03001B181705A0040104B80366B64B011A19030208003F173C76FC5D18173CFD173C3F173C76FC5D18173CFD173C0110D65D1732FC5DECC4101ADC5D1A1732FC5DECC40710173C10173C10173C10173C0103231323373313233733133303211333033307

230333072303231B012103210187574A57B32FB06DAF2FAC4F4A4F01234F4A4FB42FB16DB02FAD574A5799FEDD6D01230150FEB00150AA01A2AA0131FECF0131FECFAAFE5EAAFEB00150024CFE5E000003002CFF2203CE05DE0032003A004500B940341A452A3B2A456B287A288927061A151A35291529358510853906471B01313B45282719061832183216333A0F0E01061700001737B80131403C20130113040955080440322100041C401721181C20551F1CDC400140632D473A280F45040E331817161F2733FD

191C1604320001083B0EFD04310109003F3CC0FDC4C410DC3C3FC03CFDC4C410DC3C111217390110D6ED71D4D4ED10D41AC81A10D4D41AC81A10D4ED10D45DED07111217390711121739313000715D015D05372E0127363736373314071E0117132E023534123F0133071E01170E010723363534272E01270316171E01151406042707130E021514161703323E023534262726270141255482640F0D140445091E645A587A8543FBD4135216527A560E240341070116604D548A3949588DFEFE6423B65D77354B6D31

3F5A4F322F281856DECD032735264A75402C70

30401401F2174B8557B0010919898901212F2ABC2C3B350A15273C0CFE2A1F1B2485647CE18A03CD05D0044D833C3F561FFD221F4772403354190E1B00040075FF8306570598000D00340045005500CB4041290E3F013F0234083409340A3A0E341B341C341D3F233F2445084509450A451B431C451D54085409540A541B541C541D182E1010450F0E3434400E210F0F210640BA0233000602ABB4387F002146BA0233001902ABB44E7F215643BA01210003035DB40B0E0F463BB80121B40B4A164013B80121400B21

292B10342E262B1E2651BC0121001E035D00490121B12603003FEDF4ED11123910D4C4C02FC01AFD1AC0762F18ED76D4183C10F4ED0110D4EDF4ED10D4EDF4ED1112392F1AC81AC40710763C10C03130015D25341233321615140E022322260523010E01232226271E0115140E0223222635343E0233321E02333236371E0133323637030E0115141633323E0235342623220601342623220E0215141633323E0203B0FCBA7B76255FA9708189FDFA6403532A8335277D150C0D2B5DA8628789618B824C365F30923C

579D370812090B160AA51F173B3F3A704C233C374974FDF0313B3F7647243D393B664D28FCBE0125985F4F9BAA718FEF05731C242218163F1F529D9D6C8B876DDC7033243643654E03050503FC304891424550769F9C3F4C577A026D535A6BAF934E425060A39F0000010099FFE0067B0581006400D240263E3C08003C303A1A37443C31572D30294B2F5C5A5A590A08140A0A08080A4F5A5C3A40269C34BA01C70030013AB23A9C40BC012F004F012F005601144011479C130A5C5A0A034B08640D04CD60B164B801

61B50D87504B014BB80161B52F318230992FBB016E00570016010CB444CB1F8737BA010D003E011D400957559956E2575765661112392FF4ED10F6F4FDF5ED10FDFDE410F65DFDF6F4ED111239121739003FEDF4F4F4EDF4F4ED11123939123939870E2E2B0E7D10C4011112391239111239111239001112393911123931300116171615140E010706071E0115140E010706232226353437363726272E013534373E0137363332161706070607141723272E0123220615141633323706072623220E0115141633323E

0135342E0123220E0107060723373E013736373E02353426273506033C1A2234533F2B973C3B62BD7C9DA6F5FE546CDF311E343B2C21A2485F703E75360A070515013E042B5E3C6E887C6016281704231D68B25CCFBA82BB612D512A223B250C040C32163B87AF7B265D4924242304361D232F413C6F3E0F0B1A19573E54A2842A37DFAA86617C4607111C5F424C473480242F1C1C1E231A980509792928815E5B7A074C2D07549E6093C05E905133552A1A2A1F0C37DA373516100712293A2123320C0E0001010503

BB025805BE000C0022B900010141B2050302BA

035B00080283B4400021010D10D61AC81AFDE9003FED31300123133E0133321615140706070149448E0F3622293507050803BB01AA2E2B332B0F1B130B00000100A2FF01031A05CC000F0028400F000F090A100F12000F0F09210ADD0DB801CCB1041010D6EDFD1AC8392FC8003F3F33113331300526022635343736123717060211101701F968B03F283BF4EF32C2D7AFFF730130E787927AB6013DBB32BDFDDDFEC9FE8EE6000100A2FF01031A05CC000F002B400F000F090A120F10000F0F09210ADD0DB801CCB2

0447111076D618EDFD1AC8392FC8003F3F33113331300116121615140706020727361211102701C467B13E273BF5EF32C3D7AF05CC73FED0E787927AB6FEC3BB32BD022301370172E6000101160364037905D70018006A403B64107B127B138B128B130500050A0F1405071218212F1501151201040921070B400E10121A00050A0F1405020C060946131010020C15170421020C002FD41AC8D0C811123910C876D418C8111217390110D6C8D41ADCD41AC8D4C810D45D1AC8111217393130005D010F012F01372F01

3F01170337331703371F010F011F0107270232A2343705E1E10A3628AB012E472962D82A1D1AF5B20A3F340448DF053B2F9C64305107B901192126FEE59D19572D329631390700010068004C04760459000B0024B2050306B80106B50A0009010300B80106B20806092F3CC4FD3CC4002F3CC4FD3CC4303101211521112311213521113302B801BEFE4292FE4201BE92029C93FE4301BD9301BD0001FF9FFEAB018D0126000B0032B2012100B802A6B40440072106B8027CB40C04400607B802F5B30021010C10D41A

C8FCC81AC80010FD1AC81AC0FC1AC831300327361237363717070E01073C25487B088979215C2E8054FEAB1E6601456C192D1EAF52B75F0001004E019302E20263000D001CB305F50703B801C1B60CF5000A01080F10D6D6002FC4E4FDC4E4313013273637163332371706072623225A0C2B0E53ADFB560A2E0E73E29E01951364570D09116B500B0000010053FFE60170011F000B0011B703A2090B0692000C10D6FD003FED3130373436333216151406232226535B3F3B4859413D46724C61483F5062470001FFD9

FF1202A9063D0003001D400D01000302020321000403000201002F3C2F3C0110D41AC8D407103C0701330127023D93FDCDEE072BF8D500020058FFDD03E605770011002400384025191815222D1823226A02051EFD030215FD0E0D1262000001C000E00002001B62A00801082610D65DEDD45D71ED003FED3FED3130015D13100033321E0215140702070623222E011714163332373613123534262322070E01030258012BF9628E51294756956A90689C5EE94434472A4A4C3C4A372C2330542F3801C80177023852

82BF66E0DEFEF8805B68D43365563965019901

44C6625A1E29FCFEFCFECA0000010055000003780576002B007040161D001D01791F7920040F11100024100B470800060808B801D44022181C14241C4710182D1B1C24180908010B0B100F11401821170224015528F5250008003F3CE0FD3C3F1AC81AD4DD393211123939111239390110D42B76D018C82B10D0C81076D018C8012F2F2FC0C03130015D3337363736373637361312370F010607273F013E0137363717060B01060706151416171633072624232207065506B4280E0B1012204E3C0313EE59191322AF

4DD351241B25083A632B060225415F4C0C3DFEE02F3BB76747040F050E155C9D01BD0153200A6B280B0F8730154E2711121C22FEC1FDE0F2301311212004074703070403000001FFFE000003A005770032006940155921592202201A2202080140102111228F01010108B8027140091A2D2934401121100BB80254400A1216022228E25F230123B801C2B72FF5400121002D08003FD41AC81AE4FD5DE4C03FC0FDD41AC81A0110D6C0D4EDD45DC8D41AC81A1112391112393130015D273F0136123637363534262322

06070607271336373633321E0115140E0107060706071533253E01371706070607242322070602089671E5811A116F62405B241A323D7243364B5D6FB85B1C464E365BDD616C0113784C32100D0F190EFED6804A7FA201388E6E0107DA593C366C702B2E205E14011339141D54A06A406377593F59D7590C030107090F1D2E523A0B040600010014FFE2039905770037009B4038A81FA820B81FB820C91FC920C326C327F926F9270A880088379633032D29119F11AF11BF11031111171F1E1F1F1700022101A00001

003117BB02710029000B027140171F312F3102313910F50EFD12F52D14143525401F211E1AB8024EB725020107FD003509003FC0EDC43FFDD41AC81A1112392FC4E4FDE40110D45DEDD4ED10D45DD41AC81112392FC81112392F5D1112393130005D015D3713170615141633323E0135342623220727371633323635342623220E0107273736373E0133321E0115140E010F011E0115140604232226143D4306726955844C766B3F530A202024A68C645B305D542539721F1C297C456EA24949AC4702AD8C90FEFBA4

5C903901470646256C7260C96B7A7B1C0B6807AA6A56611D4F4718E01C0F151D497C4D4D8578170814A9757EE288260000020009000003E4057A002B003800DE4041D80FD810020B0D0B0E0E0F1D0F2F0D2F0E2F0F3B0D3B0E3B0F361A361B4B0F5C0F882E882FC90FD90FF932F9331435099008F0080208071A15241E0F2F2C470707B801D1404C1E12141E1D1512471E101F202F203F209F20AF20EF20FF2007203A1E241D06010731332F350D0A0F0919F515352C4009211B1D0810072007300703070701112F0F

12110224015529F525000C003F3CE4FD3C3FC0

C0C01112392F5DC4C4C41AC81AD4C4C4E011123939111239391112391112390110D45D2BD076D0183939102B1076D018D001C810C810C810DC5DD0C83130015D005D333F013E01373637053F0136123736373637170607033637363717072627070615141E0117072227262322071B013F01060706070607163332CB0AA8271D081321FE0C097F33CB481E978B6C1B1C1C65820E3B0E0A2775631907154F820D09A8535641445D49112164568E452B2F3E427646080211142FD0054CC94F011E6028BD1B291681A2FD

CB03010301089D0501A53F1017160C0543070302020401A35BB57C77C36741550300010011FFE603CB055E0035009E4027071A071B161A161B0426274016211BAF17BF17CF17031700400421038F00A000B000C000040010B8027140222E228021A021FF21032147372716160A1313695F2A012A2A243222F526F550240124B801C240101E40212120471EE21C0403000AFD3209003FEDC0C43FE476D4181AC81A10FD5DF4F41112392F5DED1112392FC0011076D65D18C0D4EDD45DD41AC81A10DC5DC01AD81AD0D0

3130015D373E0137170615141E0133323E01373635342623220607273712363F0116333237170706232227033E0133321E011514060423222726111121053D053B6B4345604816267668446A2B3F2C31170E0A7DD2D4740C5CAC4EE339563B885B73AC5A79FEF9B16658424443AF3C0821194A763C3C643B6774807F3A401BDF01008A63080E0913B60E07FE6D313556A95A77FCAA18130000020051FFDD0419057700280036005740233608360902340B0E0E19250004692725022CFD19090B2962F01E011E114001

21002731B80271400C8011A011C011E011041147381076D65D18EDD4D41AC81A10D45DFDC0003FED3FC0EDC41112392FC0C83031015D0127362607220E020706073E013332161514070E01070E0123222E023534373E03331617060114163332373E0135342623220603CE3C0A514D3968584A1A270E4B965384A8261A42395BA1595C925627452B96CACD5C7D522EFD5B5E4E3E29373F5B4C677B044E07595D013162975379605349AB946766485B314F44477DA45AC2C87ADBA653023967FC5B82702330DE70806A

D700000100900000045805640026005F403D381F38204705A91E040DE208300A400AD00A030A401C211BF5120425F52300082340002101010E1C113F0E5F0E8F0EAF0E040E081F1C801CA01C031C2810D65DC8D45DC01112392F1AC81AC8003F3CE43FF41AC81ADC5DC4E43130015D33273637123701363726232006072737363F0132171617321705323707060203060706072227069D0D522FBE42011E31203C21FE6F9E520A1A090809136546270C940129627C0644EE9752682E1A087F5519754901266101A347

2C0406070D7B2F350D0604010105074B5CFE7D

FEE998D86148070600030039FFDE03DE057700230032004000B240451B011B021B032C012C022C03503F50409F009A029A039B340C080F0810081113131314463F464065136514633F63400B24123300040D1E303E403E503EA03EB03EC03E063EB8036C4011153F304F305F306F30AF30BF30CF300730B8036BB50515051E0D37B8036AB73F1E5F1E021E4928B8036A40120D474224123300041B0A3AD31B092CD30A02003FED3FED11121739011076D618ED76D45D18ED111239392FED5D2FED5D11121739313001

5D005D0126272E0135343E023332161514060706071E0115140E0323222635343E0137362536373635342E0123220E01151416070E0215141633323E01353426018742222D2E4EA2A2568BA3404228807B72335DA3835C9FB72A5D4019015F7030243362383E6C375F29396E3F7F684976447302A025202C67485D91894099724A793923513E9E6441906D6B35AB85406D682C11BE4F50394F435E303D6C3D507BEB1E687F4E6A7F43864A587E00020038FFDD03EB05720027003C005340232B2D2B2E2B2F4A2D4A2E

4A2F062B0B0F0F251A05076900250936FD1A02400521000428B80271400AF01301131E0B32621E3E10D4FDC010D65D18EDD4C41AC81A003FED3FC0EDC41112392FC0C83031005D17262726273716333237361306070623222E013534373E0333321E01151407060207062322261314163332373E01373635342E01232206070607066C030E12112F499F734E784650533E494B925325185199915569AB562735E29C7B822745C36249322E20360E132C5032355219220D06012336483017A25B8D01705B2A20479D76

6E6141626F3F67CF8A9197CEFEC45B480D037B6C6F1D145C415F5B57733337374A643200020033FFE601C503A0000B0017001C400E09A2030FA2150B06920012920C1810D6EDD4ED003FED2FF63130133436333216151406232226033436333216151406232226A85B3F3B4859413D46755B3F3B4859413D4602F34D60483F506247FDC44C61483F5062470002FF90FEAB01C603A0000B0017003CB509A2030D210CB802A6B41040132112B8027CB71800920610401213B802F5B30C210D1810D41AC8FCC81AC8D4ED

0010FD1AC81AC0FC1AC82FF631301334363332161514062322260327361237363717070E0107A95A3F3C4859413E45F425487B088979215C2E805402F34D60483F506247FBFD1E6601456C192D1EAF52B75F00010028003C0494040E00060040B43703010506B80297B2010302B80297B4044F000100BA01620001036DB40603020305B80205B30401000710D63CC0F41732003FFD5D39F4C810F4C83130005D1335011709010728042643FC9103726801D77701C080FE87FEAC850000020046010D0493030C000300

070022B900040106B340078000B80106B50305

0104000810D63CD43C002FED1AD41AED3130132115211521152146044DFBB3044DFBB3030C94D79400010044003904B0040B0006003BB10302B80297B2000506B80297B4044F010101BA01620000036DB40603020305B80205B30401000810D63CC0F41732003FFD5D39F4C810F4C831300115012709013704B0FBDA43036DFC9068027179FE4180017901548500000200BDFFE8039705830027003300724041190519061920192119222B052B062B202B212B22390539060C402721004900162B100C1316032BA231

0B2E9228114027210025CD03031A11401021133011011109B8010CB11A3510C4EDD45DC01AC81A1112392FEDD01AC81A10D4ED003FED3FC0CCC4111239762F181AC81A3130015D012E01353436373E0135342623220E01072736373E0133321E011514060706070607060706151417033436333216151406232226019D38213E507E486452325B3126413E194E7D496AAD583B523E71521A30130E2CFC573E38415843383B017C3643253468507F7F3F425C24405B0A9A6630274A8C5B4E7C48374C36162A21191A2E

26FEC34F6041394E613D0002009EFFD506600578003B004B008840463A09333855375538042014171D400121001124441D472D113C171D17050B390549330B02142328403F2047404063282414282428242A242A49631A2A1A0E0800300E3646084D10D676CC18D4CDC4111239392FED2FC4111239072B1076C0C0180111123939003FCD762F18CD111239392FCDD4CD762F18CCD410DE1AC81A111239393130015D25070E02230400111000212000111402232226350E01232226273612333216173E013F010E0415

141633323635340021200011100033323601323E0235342623220E02151E0105740E5297C077FEFAFE5E01C20176013B014FEBA14C752C8B68708A0505D3B85966160B1B06C00A2E2616082B215B93FEDFFEEFFEE5FE900155E697E0FE394E6E2821463D495B351A0139E0483D52320201550126015301D5FEB5FEFDC7FED765676D59958BDF013D454917470E0A2ED8B76E42252927E2C4E10130FE61FED8FEEDFEC55E01229380AE3741548AA08F404C48000002FFBB0000057A05770030003600AE406229070126

2431473636860A081436350A07F5080A0820F52135473636570C0D140D150F820D0C0D0F0D0C150B07080A01010B360A30155F150215382026240C0D08010A23F521248D35313333362E360B0A022E1A1503015517F530F516192F030008003F173CE4E4FD173C3F3CC01112392FC4C4FDC4E411123939391139390110D65DD4C0DDD41112393911123939390710F0C8102B1076D0D018E00710E010082B100576D0D0C03130015D23353637363736370112373312131217161716171617152522053532373E013534

03262305060706151417161716170727011633

203703456A090E0B0E68019BE513C3232845220E0D080B1275FEC517FEEC5B26190E303A19FE8F72481E0A0F24155F07E601441C250127214E430903050A0EB002B2018425FEFBFEEFFE29CA501209050706430707430905121748015F0101C39A40130E090D04020443070274020202150000030015FFFC050C0579003000430053009E401C44825047408231315708071408100006820747088210110A4A752539B8037C4030101B201B301B401BBF1B051B5544464E0A080706040111214E3350F54E5F31334A4E

001240F53E5F14F5115512170244B8FFF4400A44465F2FF50155002B08003FC4EDE4FDC4383FC4EDE4FDE4111239762F18C4FDE0111239111217391112390110D65DEDD4FDD4C82BF076D018F001C82B102B10E076D0E031303337363736373612133635342627262F0123370532373633321E0115140E010706071E0215140E010706232227262322011633323E03353426272623220F0206031633323E0135342E0123220706030615056F0F09070E603624101D1541270F06013C12BE574794AB66417D4A168592

91485C8C54798B406484554B015326265D6A5B442B342A3C773339052D2675A143677E444479881B5105350E40150A07101F02150145D6361613070403024305050237835E4886641C092311458356629F6D202E060702F802132F50813C3A5F141E061DEDDBFD411959B35255732F0225FEC94F00010087FFDD0583058F00310044B4062A011922B8012AB61714030031012CB8012A401406092875B00C010C173101001A5519301701173310D45DD4EDD4C0C010D45DED003FEDD4DC393FC0FDC43130015D25070E

01070623222E0127263534373E01373E01333216170607233734272E01272623220E0315141E0133323637363704FC1751C34A637395CE831D273A38A3A276D1757BDD313F0F4705080D39455065749C7D592757B47B55A03D137CEF50365E131B5386506B84B7A77FC37244443A24C989AB170B13211B183F7BCBE9A27CC0622A1D094C00000200170000060905770026003B0073403510090006820847090957393A143927823A4710393275101B301B501B031B3D3A27390A09080604100139F5375F105514F516

110227B8FFEE400A272A5F015524F5200008003FC4E4EDFDC4383FC4E4EDFDE4111217391112390110D65DEDD42B76D018E0102B1076C018E001C810C831303337363736373612133635342E012726233716333237363332041615140206042322272623220737171633323736373E011235342E022322070302170660160C080B5C411E0F1B365F050D61856F9FC63EC901019174E9FED7AD399E5C5F4B2EE7CA372F70523A2B44663D326D967371576654400C0F08111A01F00186B63A1414080407480B03046FF9

AB97FEB6FA84050301781A0621182C45CB0125

7E56AD6F2D0CFDD2FE2E00010012000004DC0577005200B8406D480948114812580958115812660066010832321E2D1109000608470A0909572A3D142D2D383D2A3D47103F2A012A1A46554B471A1F551E501A011A5408090A060401113338358D312D0F2E01FF2E012E2E3F281E2AE2285F115514F5121802473DF53FB54BF550F501554D0008003F3CEDE4E4FDE4C43F3CE4EDFDE4C41112392F5D71C4C4FDC4C4111217390110D65DD4ED10D4C0ED10D45D2B76C0180111123939102B10C076D018D001C810C811

12392F3130015D333736373637363736131235342726272627370433253633321F010607060723373426272E012726232207030607163332371707262F012207060F010607163332373E033733060F0206232227242322120A62150908122A143C44090D2A1A6A0D012E19016B628C44310A0C1D07044402090B103D53333B6F4E460D10FF1A5B63061913B2AE114F14212306024E9C542F77341B132E4B120B240A304D8FA2FEF315C13F0E0F06122BE86D015901832B15090D06050640060402060C35AF2E26901D

12060A0C08050CFE9E415A05050C610105050374B8C3241F0C040C0C1428A15335C70C0704060001FFFE000004BB05770040009A40592F2F2A1D100A000608470A09095727351427342A352735471000277027B027E0270427191E551D0F19501902194208090A060401103430318D2EF52A8F2CBF2C022C2C3C251E27E2255F105512F51611023C01553FF53D0008003F3CE4FD3C3F3CE4EDFDE4C41112392F5DC4E0FDC4C4111217390110D65DD4ED10D45D2B76C0180111123939102B10C076D018D001C810C811

12392F3130233736373E0237131235342726272627370433253633321F01060706072337342E0127262322070607031732363717072623220702070615141E011707262322020570180E12101E6040090D291B690C012F0B01645A7F47310A0B1D080444020C29316749564D0D0D523DC88A4F091CA1D53B2E3B040717466C06B47F67460207051233A7022301653315090D06050640060501060C35AF2E26901F1411060E0C2D46FE2B0105090D650404FE9B1D311E1E1A0A0346060000010098FFDD05FE058F0044

0087403D09758026D026F026032614352E2E472B2B2B57413F14413A3F47106F417F410241001955188F140114462E352B3F41003B3B355538F53A36361F29181FB8012AB51310032B0129B8012AB10609003FEDD0C83FC0FDC41112392F3CE4FD3C111239391112390110D45DD4EDD4D05D2B76D01801C8102B10051076C4180110C810D45DED3130250706070E012320001134123E0137363332161F010607060723363726272623220E02070615141633323F013637363534262726273716333237070E020F010E

01151405360738698AB963FEE0FED07DAFD879

849179E43E0838030B0948070249435F7779A86E592722D0B78967260B0D081414208C0DB46B4FEE0B4030181212110664080B232F2201230100B1011DD98B2F2E36260FCD0E333B6B593718213E6AA0839E9DE6E139992B52301010170405034607074601132752564F2E1712000001FFD90000068C0577006400E7408A58325833932D932E943B9A3C9A3D073237433C3A4737393957255014252351255050472510290E615C161D8221475C825555570A0B140A1000070A470B10110E663B3A0A0B070E383C3909

013329251F1D04172250575C4E04015321F523F5228D55F551F5534953330143486103015564F546F54447620300022D171103335514F530F52E1612033208003F173CE4E4FD173C3F173CE4E4FD173C111239762F18E4E4FDE4E41112173911121739111217390110D4C82BD076D018D001C82B102B10E076D018F001C810C810D42BD076D01811123939102B10C076D0D001C810C83130015D0107232607060706070603020702151416170726232207373237363736373637363725050E010F010615141E011707

26232207373637363736371312353426272623222737330525072326070E010706070316333237363736373E01353426272627373305068C0B1F52210B070B09133D35152C3E800C8EC4B57E0B721F0E060A0C0428320AFEF6FEB80924171103192D700C8EC4B57E0B8F130C090F2556441011193836100C0B0157011C0B1D45280C11080C1F37D75460C5031D051508031015325B0C0C015605774B010D05090E2452FEB7FEE180FEF81F1E1605460808460C05080D300FCAFC45020242D29867110B131F0B044608

0846090B07111EC501E501744614160508014B08084B0107030F161FA2FEDA080814AB1B93312D131314040A024B08000100000000036105770029007440464615461665006501A915A91606151B00078208470B820909571D1E14101D151B821D471E821025212B0B090807201E1D1B0801101655105513F51511022555015528F5260008003F3CE4EDED3F3CE4EDED111217390110D4C82BF076D018F001C8102B2B10E076D018F001C810C83130015D3137163736373E0137131235342627262737163332250722

070E0107060302070615141E013307262322085D320B070F15285E331B2517680B9B865A01140C72190F17071235441922153A7609F4493145020D03060E3ADF02120125401819030204460606460805161935FED2FE7C94C531171A0E4508000001FFDFFE57037A0577002B0053402C6916691702110D3D022101010B470D820C0C571F2014101F161D821F4710202B055F291755115513F5161202003F3CE4EDEDD4ED0110D02B76D018F001C8102B2B10E076D001C82F1AC81A10C83130015D0327371E01333236

373E0137131235342627370433323707260706

070607060302070E02070607062322261A07071323111B2F0E1C2C0195433A9109014230AA7A0C542E120A0C0A113643182731634A383C2D351C24FE6D4006080919162AC20803640188481A13044D09094D040C040A0C223AFED3FE8893F2D1B94434181109000100060000060F0577005100BE407144354436023F443533351D35361B1D1D261B2633352D3536363F44390E09000582074709820808571A4514101A13188210441B1A474582104D4739502D702D022D5309080705181A1B1D33353644480D010E14

222E030E5529F511F513262D030F024D390201553CF550F54E3F3A030008003F173CE4E0FD173C3F173CE4E0FD173C111217390110D45DC4D4C82BF076D00139392B18F001C8102B2B10E076D018F001C810C811123939113911123939111239070810C90807713130333716373637361312353426272623370433323707060706070607033637363736373637363D0116333736373237070E010706070605011E0117072726232207272627262706070615141E011F01072423220609841A0F0A166C431F2E69060C

01311E56DC0B82190B060D284242872BAE95391D070435114330680C1C0152311F3DA55CFEFE01885737500776691F2F4A7E3780644D2D250B102121660AFEDB306E4903120A2451026901793A1D1B010348040448020E060F1BD2FE9A2A7927A9904221120C1A22070202010248020E152A9253F3FDDA79230343040408C053B0895FE7E5441715160C0202490900010033000004A605770033007B40450F0B00058208470B820909571F20141F10161C821F201047212C2955302A502A602A032A351C2021170908

0B0504010F21F529235F2C31F52E01550008170F5512F5161002003F3CE4FD3C3FED3CF4C4FDCCE411121739111239390110D65DEDC0D4762B18D0D0F001C82B102B10E076D018F001C810C8313033373637363736371237123534262F0137320433323F010723260706070607060703163332373637363733060706232227242322330B6F080B070D21580F3216247F0C39011532353AA30B16721E0C080F1C2421659862A95D250E133F4838103842509EFED82CEC3E1C05070E19B801F561013F1E18150409450B

03084B010F060D1897C2C9FDA10A1609121ABDEA7E0804060001FFD2FFE407DD0577005D00D94076194F0122132C480216482147472C530E0B000608470B0909134D474E10532C343A823D3E471C3F3E3E572A2914291020258229472A102F2F2C012C5F2C252A292F2108090B010E3A353F535A4D4D4E3F3E3D051613210E551FF511F5131C20030F02164748095A352F03015532F55DF55B3430030008003F173CE4E4FD173C3F3CC83F173CE4E4FD3C1112173911123911123911123939391112393939390110D4

5DC82BD076D018F001C82B102B10D0C07610D0

18F001C810D42BD076D018C0D010C076D018D001C810C8111239101AC8C05D3130015D233F0136373E01131237363534262737163332371617133613363736371716332507220706070607060703061514161707242322073732373E01373637363713060703060207060723260B012627030207060706151417161716170F01272E05600F0A0E1C4F623F293195073F6BA4743023B137A5746E872E19760E013309611E140D10140728631D33850AFEF32F40F4070B711115070B282F1E3E2329E164C2294F143507

428E3B10575A08270703111547201D060FFF490605090F4E01180160F8A01B1C2B06450707CC8EFD4E55010DBBBCE74C0207094A0A0711175C24E1FDC0A925261407440808490803120F1BD2FCB8018F3742FE98A1FEB9498E211A01080232E93CFE9FFE9E21AB2E1511150B0F0301034401090001FFFCFFF706A30577003D00CF407219573231143231191A313257131914133233131900060847100F0A0A8632331413324733103BB0370137301E1B1A471919862E2D142E10232B2D472E10311F3001303F2E2D2B

30241A1B1E193733323B0A0608090A010F1E24020F5521F512F5131F230310021931303B5501553DF53C0008003F3CE4EDEDD43CC83F173CE4E4FD173C11123939393911123939391112393911123939390110D45DC82BD076D018D001C82B102B1076D018D001C810D45DC82BD076D018C02B1001C82B76D018D401C80708102B1008072B3130233736373E01373637123726272E012737163325161F011A0117123534262737163332370706232722070607060203060723010207020615141E0137072504086E0A

131A12321A6118291811337407920F01161B2665A9E153A43D780A4D68A38A0A170A361A160B08137E40171DB0FD843F0E440F1339690BFEE8490604072255E38601F6913E140D0B0A4206062D43B4FEE0FE7B870372622015054204044701010D060D22FDB1FEA080C80454FEB452FE6877151C180E02490700020099FFDD064F058F0013002B004C403B1B0C14171B1E1B1F1B241429142A2B0C2B0E2B1C2B1D2B1E2B1F242824293A088905890812265F07031A5F0F09147500004000B000030021750A2D10D6ED

D45DED003FED3FED3130015D133412373E0124332000111407060021222E0225141E0333323E0137361235342E0223220E02029950523DB30107B1012801445A6BFE78FEF28FE79C4901181F395A8343658F662B3A4E275096656D9978662F02148701277A5A9564FECCFEF9CEBFE1FEF75097CC4550895B422842715A770140935D9A67464690F8FEDA000100150000055F0577003B0085401F162601222228300F0A00060A084706070757302E142E473010381033013328B8037C4025193D0607080A010F333038

2E245F1F1F00152EE22C5F0F5512F510150238

01553AF5390008003F3CE4FD3C3F3CE4EDFDE41112392FED111239391112393939390110D6EDD45DC82BD076D0182B10C076D0C00110C810C81112392F3130005D33373237363736371A01353426272627371633322433321E0115140E01070623222F011633323E0135342E012322070602070615141617161707252215077D1D0C070F1C476115181F7D0AC78442010F549BA55254814A69735F6C0A5E41448855357B552C6A25920D03172E18740AFEAB37440C050A1692016F023F3A171A0507014A0B08519B63

6CAD79223025491D58C46A50763E10B9FCC6671B14191706040445080000030097FE39064D058F0013002B004E00C74055193A193B2A3A2A3B2A3C2A3F2A40071B0C151715181B1E1B1F1B24152924022B0C280E2B1C2B1D2B1E2B1F24282429242A2A3A2A3B2A3C3B08363536368B058B081909003B013B353A763B4E004301434700470147B801B240333235143232350B35014AB532265F070330091A5F0F0932094743320321142CB24DBC147500004000B000030021752F0A010A5010D65DEDD45DFDF4FD1112

1739003F3FED3F3FED10ED5D870E2E2B5D0E7D10C45D003918012EED0010C05D31304B5458B0018559015D005D133412373E0124332000111407060021222E0225141E0333323E0137361235342E0223220E020203263E0133321716171E0133323637170E04232227262726272E012322060F01974F523DB30108B1012801445A6BFE78FEF28EE99B4901181F395A8343658F662B3A4E275096656D9978662F820348803E3E415BD29992343E50163E14303E3C452A2A242E3B1F63F58938375D030902158601267A

5A9664FECCFEF9CEBFE1FEF75097CC4550895B422842715A770140935D9A67464690F8FEDAFC825B8744121A5E432B5D5A14556C522E17080C1B0E398B3659720500010011000005960577004D00CF40391F572B321432322B2B571F2214221F2222261F2B1F263232321C440008100C0A4708090957414014413E404741104A3F449044B04403442639B8037C403A4F1C011C302601264F22261F4441404A3E0C0A09080401101F32213335353C4A3EF53C5F1813F51055111802264A01554CF528F5272B4B030008

003F173CE4E4FD3C3C3FD4EDE410FDE41112392FD41AD83C1112173911123939391112390110D65DD45DED10D45DC82BD076C018C0102B10C076D018D001C810C81112392F111239391112390705102B07102B3130333733163736373E011B011235342E01273717163332373633321E0115140607161316171E0133072707062327262726272627371633323E01353426232207060306070E011514161716330725221106115E1C0C080E143B3F3A1532730BCD4E2B17CC5B59909A5FB9EA35B4731B132A4206D777

0C18817336160F173E0829166DAD5A7782613E

164F282215031418236C06FE9E3146010B040910510153016901413815190B0249090307023A8C5B7DD62957FED0C220161246060501EFCA5C2617265F20034C9C676A6C0E6EFE44DDD5831D0C161A0508460A000001005BFFDD043F058F003B00A2403319122A123B123B14363236334A124A13084631014C144C1542335433971799370644124A310233123B310212310A293F200120B80276B729D4190330040104B8027E40110AD4390900033C1C3D3503B2040407F62DB801BDB5C016E0160216B802BCB53524

B21F830DB801CAB32F350135B901A1003D10F65DEDF4ED10FD5DEDF63C10ED111239111239003FFDE65D3FFDE65D111239395D5D3130015D00715D373E0137330714171E0133323635342E0227262726353400333216170E0107233635342726272E0123220E01071E01171E0315140E012322265B0B250442020220B064A48C17375366B2455F0142EB5B9D4213160F41020216172472475A834001013865829B7743B8FB9C67BE4B2AD7367215283055926B35493320202D3C539FC9012F2E2E49756F281E0D511E

111B274675574E52221E2D39825791F8843A000100760000056005770037007F404A000708470A090957292814272847291033A02E012E1A0E5511300F600F800F030F1A1E551D501A011A3908070928292E06010A1D0F27F50AF5250B5F15F5195C120233015536F5340008003F3CE4FD3C3FE4F4FD3CE4E4D4C4111217390110D45DD4ED10D45DC0ED10D45DC82BD076D018C02B10C076D018D401C8313033371637363736373612372720060723363F0117163332373637170E0107233635342627262322070306

0706070615141617163307242322D3087E1E0F0A0E0C217D283CFEFF492A4A1B180BFF7395D0F681500E2B0F034B0A131A2E9C49265827281B04021218237508FEFC556A47020B050C123AA002C9F00135C191C40C0A0406040911DA572455463318060A01FE33CEF4A32E1412171605074708000100A6FFDD06B7058F005900CE40723D4047414157292A141029352E2A472910269F26F02602261756194C0217525217474E4E570A09141009000709470A1012800C01100C200C800C030C5B195616090A0C070412

01524F4E4C044756403D414404473C2E2A2924041D360156355559F539F500573C033602125514F516130847B80251B11D09003FED3F3CE4ED3F173CE5E4FD3C3C111217391112173911121739111217391112390110D45D71C82BD076D018D001C8102B2B1076C018D41112011739C810C05D2F2BD076D018D001C8102B2B1076D018C0313001072607060706070602070215141617163337072623052736370607062322272E01272635343736373612373E01353426272627262337161F0133323717060706030E

01151416333236373637363736371235342726

2737330506B709701D0E090D0B1A67192A1214254A2B0BBC09FEF20A1E13A6875C7660483758182402040C14400E1D080D11162E4E080B1659EB0C31430C2B112C2E210776674AA4593A0A06232B0E37111C900913014B058F4A010B060A0F2D6BFDC497FF00241C18060B014905050C8972B148311D17532D464A20202E4A80015357B13B1B16130609030545010105070FBD5AE6FEF2BD46215C6D4A583A1B11CCF652014C24160A0F074507000001008EFFF805F40577002D00A4405D0409040A02181647151586

2928142914152928154715161414570402140404021628152829212D1415040402000A0A40152D21400001003021B02102212F28292D22161415010400090D1E2203095520F50BF50C1F21030A02152D0008003F3CC83F173CE4E4FD173C11123939123939111239390110D45DD45D1AD9C01AC4111239391112391112393911123907102B100876C0180708102B1076D018C03130015D05260326032E012726073505250F010E0115141F011B01123736353427262737173707260706070607010607060701FF0957

13411C100E1C6701080153045B281C051277EA9466230D168807C8F5073A17120C0F38FE0D5F230D0D085F021C790176A11B070E034706064206041919153E8AFD0101A8010BDE4D150D070B06420505470108060F1365FC85AA451A200000010090FFEF08910577004B012E40C30705071607170718051E160516171618181C281F361B491F560F56105611571A581E5A1F660F66106611152047211F20218642411441424120574A49144920214A4949464A4A571F20144A4B1F201F4A861B1E141B1E4A491E1B86

4B4A144B1A1B4B4A1B471B1E1A1A570302140303022141204142344549464A1A1B040302000A0A1B4B00900001001F1E204521462034303402344D41424535212F2049464A1A1B10030202000A102F35030A5532F50DF54A0F30341E1F050B02201B45464B030008003F173CC8C83F173CC8E4E4FD173C11121739111239111239111239111239390110D45DD41AD9C0C0D9C05D2FD9C0C4111239391112391112391112393911123907102B100876C0180708102B1008072B1007082B011112390708102B0705102B

081076C03130015D052603020326272627260737163332371523260706070615141F011B013701330113373637363736353426272627260737163332370723260706070E0107060706070307060723262F01030101AC0C1A17251912050B1B640593A89A7E12561F11070B040D3BBE5C010041012DCE282F11250B030A0E131F3C2909B34A5E6106092B1C09070B134060030507E2171A47AC16391E9FFE0A117C013401110153E52009060E02460404460109060B11271E41B1FD680186B50212FB96020E6D7A316E

330F0E11100607020301460606460106020608

2598E4080E11FDD93442BA64D5730248FC0C0001FFED0000062F0577005F00A0406E0B420B430B4C0B4D0B4E261D261E2A462A4D2A4E3939393A383B4608593B67426743113A5707511451513A202057075114070720075107513A200442104210421000303101316107513A20040110322D1603105530F513F5112E310315025B464203015544F55EF55C4300034508003F173CE4E4FD173C3F173CE4E4FD173C111217390110D45DD439393D2F2F18111217390708102B1008102B3130015D273736373E01370103

2E01272E0127262337170532251522070E01151417161F013F013637363F013427262726273716332507060706070E010F011317161716171617072505353237363736353427262F01070E01070615141716170726232213055C1D12202C01DDCA1F59100C1D1E4029051A01561001105B24160D0314367DA15C2E22130302060A1A236405D10E013605551C100C1E8C99CBBE5E34100B0D1B6305FECAFEC266221006090C23644AB72D830C061B148606E9262F014A020603172F01FF018B3D9E110D0D0203460105

054506040F090C0B3A70F3B46D37311C080806060A0406014608084601070408148BA1D6FE8BB563130C060B074206074A0503070B0E111E55BF8FCA31A2190B0B1A0907034A06000001006E00000580058B004300B8406809140915191119131914191506172217231C341C355A285A295A2A5A2B08273024250F36343025380E0F0C1800070C08470707573938143938473910183F3A2E304745253636303A3938360708010E0F0C17360C0C0117401721181C03302E023F015542F5400008003F3CE4FD3C3FC93F

D41AC81A111239192F18C01112393911393912393939113910C0011076D418C4D4C8C42BD076C018102B1076D0C00110C811123939113912393911123911393130015D005D2137163E0137363F0136373635342E0227262726272607273637363736333216171E011F013637361237363736370617060706070607060706151416171633072623220115072D61250A0E08160D0C0443494C2314181F1C2428064637301C1B11305328355628363E2357B8483432223E071259535266805123211A151A2B7208B67D61

470206131118397647531B0D29F5E28B2012080A0502022F2E27251204232E3CE8ADFC9142A30102402F150E0260550B323A8BADCA55B48F2F1719060945090000010006FFFE0565057700300084404B2D05010401050557171D14171D171D570405140404050401051C1D17100D556F0E7F0E020E1D011724552800250517320401050E058D13F54017211611022520F51D8D2EF52A4001210008003F1AC81AC4E4FDE4C43F3C1AC81AE4FDC41112390110D4C8D45DC0ED10D4C8D45DEDC011123911123907102B07

102B1112393130015D33353E01370121220607

0607060723363F010421323725150607060F010121323736373637330E010F01062325262122070622A5900294FEFE97D6240D0C1D1B492F080E015D01238033012928325556A8FDCC0120CC704E4235274A2218150A2C16FEF385FE4E56333B20C5B303360F0A0C1F4A63F9580E080107402B3A646AD3FD3D0807115D8C886F7808020802010001004CFF03032405BD0020004840260447050563151414141415141512172215141C0D040500080D550AF50C08101C551FF5001D12003F3CE4ED3F3CE4ED11123939

111239390110D4D0393907102B1076D0183130172736371213123F01163332370706070E010706030602151417161F0107262322590D0F214C3C440F0E765B5B930AB8180E0C04144510780F1446830B56D673FC0C3DB001F9016601D1820D0607470208050D0F51FE5962FCDD481A0B10030645060001010BFF1203E7063D0003001D400D03000102020121000503020001002F3C2F3C0110D41AC8D407103C0523013303E799FDBD99EE072B0001FFBAFF02028505C00020004F402B33113312021C471B1B63090A

140A090A0A09070C211C1B1F16090A0111115514F5161210015520F5001F12003F3CE4ED3F3CE4ED11123939111239390110D4D0393907102B1076D0183130015D073733163736373637361A01353426272627371633323717060706020B01072327460A1C8A2109080A0613883C1415269B0B55A0944A0E120C1F6630410B08C2FE47010C04080C1C4E037001D81F16180306034906040D4945A3FD76FEC6FE520A02000001008102330457056900060029B603000501020600B80294B2010403BC02940005000201

0600012FFD39FDC810FDC8003FC8D43C31301301330123090181019CA20198C5FEDCFEDC02330336FCCA0239FDC7000001FFF4FEB3040BFF2D00030014B900010105B4010205000410D610D6002FFD3130033521150C0417FEB37A7A00000101030461029E05CA000C0018BD000801E8000002060006013CB1000E10D6FD003FFD313001232726272635343633321617029E50F4380A1530251E32330461AE280C191F212E1F4400020050FFDA041703C1002C003C00C6407D0A19F5330250016001700180019001A0

0BA30CA30DA30EC60EC631C632D60ED631D6320F18181819021E1F2D0A090603262D3C472D2D63222314221034620F1440146014801404143D01268223472210401F211F20010F2001203E3C2D303726232229200A1E111B4020211F5B30691B064000210174375D295D11030B003F3CEDED19F5181AC81A3FEDF41AC81A111239391112393939111239390110D45D711AC81A2BD076D018F001C810D45DED2B102B1076C41811121739111239313000715D015D251706232226353437363706070E01070623222635

3412373E023332161737170607020706151416

33323736032E01232206021514163332373E0112040116F76A19280C0F3A7113539353291F33426A291EDD78532F77305C2117174429130D0A10212ECC2C52264661771810111A4BA672E440CA322C253D51E5B41A6E82251352638B01613727A83F1C1936183A60FEE4CB621B1511121A0275171666FE4E6E2A201438E101010002006CFFDD040205CF002A003B009340611B231A3A29082A2336083509460546067923892689279A269A27A926B926C9261040042105820808632223142782234722102B62101E01

1E471233622012401202123D2B2E37091A0E2723221E041A00009A01D14005210401377D0E072E691A0B003FED3FED3F1AC81AF4ED111217391112391112390110D65DED1076D65D18ED2BD076D018E02B10F01AC81A3130015D13373E01371706070336373E023332171615140706070E0223222E0135343736371336371235342E0113141633323736123534272623220E02780DC09B37180A1D883E283D8C8D373E1F3237294130B0BF5853753603040B33291230112E6E503F423C56691E1522257D8253053739

1E281914248CFD72562A405D2E2B44899799744F3B7C493567401C212F40010BF865010D2D12140AFBB758583950014E815C2A1E4CA2EE0000010050FFDB038703C1002B00754052AE00AE01AB2B03060E060F020B0B0B220B231B0B1B221B232B0B2B222B23AA22AA230B01210000291F181F7D1006297D050B26623F095F09020913400021011318E51720133013401350136013801306132D10D65DD4ED10D41AC81A10D45DED003FED3FFDC41112392F1AC83130015D00715D25170E0223222E01353412363F01

36333216170607060723363534272E0123220607060706151416333236032B17819C8E3C4F7E3E4C6059AC505C3363441111180C4409012C60333A502419162F574349C0F74059582B43805280010C7E376828171D2A46604E37330A1425252F3D2C54B6766165530000020051FFDD046A05C800390051011B40C3392139224600460148214822472F444B444C5630554B672F8B238B249B239B24AA23AA24BB00BB01BB03BB09BB0ABB23BB24C30DC30FCB23CB24DB23DB24ED23ED24F62EFA41230B4101190E194F

5C495C4B5C4CA403060F4D4D3A450F150E0A0E303A248221473A3A63302F141030456210159015D015F01504152D013130472F10402C21302D502DEF2DFF2D042D530F0E1224222129312F3003342D4D513A483D0E0D0A2104121F299A2AD1402D212C003D691F064000210174345D070B485D120B003FFD3FED19F4181AC81A3FED3F1AC81AF4ED11121739111239393911121739111239391112390110D65D1AC81A2BD076D018D001C810D45DED102B2B1076D018E0111239390111123911123910C83130005D01

715D2517060706070623222635343736130207

0623222635343637363736373E013332173736353426272607373637170603061514163332373E0137032E012322070607060706151416333237363736373E01370417139D10442E1D1B1E2C0C05478AC0794E344B3F2D201C155090753D3950220D1018245F0CBEDA1927A9330D090506092619C0294D364C251A202B2330141114172E2D4345334F0EE43C740A2D120B332D233A180125FEFD996160677FFE5F43221836612C15DD542A10130506013D04541398FCBCFC36111002021612028213101A13465E82B9

82281C0B182F446C4DC4450002003FFFDD035D03C90021002F0087405D7500014A084A095A085A09641864267C007C017C027C037C047B087B0974187C21742610221A1C62F00A010A164000210128A110162F163F160320164016501660168016B016061647314022211A1A2B1F2B691306400021011F7D060B003FEDD41AC81A3FED1112392F1AC81A011076D65D7118EDD41AC81A10D45DFDD0C03130015D005D251706070E0123222E013534373E01373637363332161514060407061514163332360136373E02

35342623220607060307168E315C8B38497B3C381C474269884C405D6774FEE1970B5B3B3DB1FE8F5F284E503B362B3261281FED375F1C332B3B6F478ABE5E763656361D5D4D5FA375184B385F4847011A1612224A79302F3548674F0001FF10FDD203BD05CF0041011140B2B036B037C035C0360409060907090809090919091A091B1E191E1A2B182B192B1A4A064A074A1B4A1C5B065B075B1B5B1C7232723372347235723682328233823482358236950B930C9133913491359136A132A133A134A135A136B132

B133B134B135B136C132C133C1343110220122221C12003E3D283E043E3E63292814292847101A1A1031403521343110401321120F10019F10011043060E041A1C16292F283D383E1310165D0E013E284001212400B80379B31CF52104B80365B53531385D2F0F003FEDC0C43F3CF4FD3C1AC81AC4C43FEDC0C41112391112391112391112390110D45D71D41AC81A10D4D41AC81A1112392E2B76D018C02B10D01112390110C81112392F5D3130015D005D13373E01373637363736373E02333217060F012E012322

0E01070607331637363717060726232207030A010607062322273E013F011E0133323637361B01262322640920842A050813111B3857D5433D282A28111E2A5020192E1B0E2417171B6B41200A150A2F6B43216F5071BD61332F23291C1B0B2015311E1D31122339913C4724033E330C25130F2656203235519A1D108778063F341C30328585010704061036310101FE1FFEBDFEE1DB331B114A5B3606302A253060013302EC01000003FF9AFDD4043903CB00480057006800A340654C5A4C5B75467547040B470B48

1B471B482B472B487504750508356202020A30

664066506660660466EC3B49620A3B285DA10A004352624028802802286A686158353839033F0200075800003F074C31060747073F13266919F51E181855B4130661B43F0F003FED3FFD392F3CE0ED111239762FD0C0C8111239192F18D01112391217391112390110D45DEDD45D39ED12392FED2FED5D12392FED3130005D015D25263534373637072226353436373637363736333217161F01163332373633170726272623220716151406070E02070607060706151416171E011514070623222E0135343E023713

141633323E0335342623220613070E021514171633323E023534260123360A7D382572A53830242E636A2D282F2E192A21434C194025140B17162543110B1717201C15394F513B1225120B2F5B9F53709BFC97C15222445F489D51462338302D195B3C656C0B643C3B244054883C62422B591E2F34111B492B0176864D9133261732210E0A05110C070403106804020401363C376D3025382B20170A15160F0D17333E6C734885587A4C753F27524D3C1D022C605918305A7E36674DD2FD5B312338502E5535461D30

4A2A375700010021FFDD041905C9004C013C40DA5030503150326130613161328030803180328542854495309031953293439344100632010B050B160B1710011002130313461047104810492301230223032927293B234623472348234934033404351C351D34453446AA04AA05AC07AC08AC09E501E747E748E549F601F647F648F649260D0D09820547015604046347461447474617471610401121C01201124723313B473C3C63272814273129822847271023474E464740493D3C3B37043440232728032C1F16

121717341F09050403010D0D9A0ED14012211100405D1F074901000B40302131742C5D340B003FED19F4181AC81A3FC0C03FED3F1AC81AF4EC11121739111239111239111217391112173911123939011076D6182BD076D018E0C8102B1076D018012F1076D45D181AC81A2BD076D018D076D0182B10E076D018F0C8012F3130015D00715D1727363736131237363534272627373E0137170607060703363736373E0137363332161514070607021514163332373637170E012322263534373637123534262322070E

0107060706070607063514332115493713071A0F7E0B5FDF5A150F1D33146045375248357D2D21232A2906132F590F0D0F131C5B17AE9A2C1E2908062D5C14101B29459B3C2C2814011F315F1B13AE9860017A011A8F370F1A0905023D073321113A7EDF5EFE3E693F5E392B470F0A2A2D252361A0FED0461913090E4136814D3235222D21A8015C2C14161727BA835EA64F340109130002003BFFDD0284058F000B003700A5404A3E0C3E0D4C0C4C0D9B2B9B2D9B32CB27CA32CA33DB32DB330C00B706061A0D0D32

472D3131631B1A14101B251D1B10471A0F1701

0F178017021739181A1B1D0420143332312D04362A09B80136B50300400C210DB80267400E14365D14074024212574205D2A0B003FED19F4181AC81A3FED1910F4181AC81A3FED11121739111217390110D65D71D0762B18D0D001C8102B2B10C076D01801C82F10C02FED3130015D01343633321615140623222601273736373637363332161514070602061514163332373637170E01070623222635343736371235342623220189513B323D4E3C353CFECB198969243A2D1C151825080D761C110A0C1A3B491B4F

C82F1E1C222C090B29540D0A2804FA42533D3247573EFDDE35654A14200E082823262940FE52851510120E1F32353881110B33352A2D3C9A013E380D0E0002FF88FDCA02A2058F000B00370079402EB20CB20DB20E0300B7062D0E24241C8219471A1A632F3014302F06107F2D012D392D2F3003362A191A1C03121F09B80136B5030040232124B80267400A1F5D2A060E0C1269360F003FEDC0CC3FED19F4181AC81A3FED11121739111217390110D65D2BC0D0C02B1076C018F0C8012FC4102FED3130015D013436

33321615140623222601363F011E01333236373637361B0112353426232207060727373E0137363332161514030A0106070E01232201A7513B323D4E3C353CFDE111031D2326180E180D12241C3637350C0911293F4B1AA95864281C18181C3D62635D554052322104FA42533D3247573EF9153C67062E160D131C9D7901090117010A2F110F15203937793E340C07232E39FEF9FE5EFE9EA85A43280001005CFFDD045305CF004C017140FF2C185A18020A2A0A2B0D3F0D401B071B081B091B0E1B0F1B15122D1236

1237242E242F36163617392E392F393F394039413649364A364B4C064C074C084C094C0A4C0E4C0F4545454645475A075A085A095A0A5C0E5C0F562D562E8A088A098A0A8B29892C892D893F8940AF1AAA29AC2AAF2BAD2CA82DC905CB08CB09C90AD616D617FA07FF08FF0942061501DB2CDB2E0243412C432E372A232C41434337482C1921180E0905470182040463184814184B82184817484717104012211013011323211F3701203701374E090504010E49484B45413C432E2C322C432745191D171318404521

18184B1D0E9A0FD14013211201275D1D064B01000B40362137B474325D3C0B003FED19F4181AC81A3FC0C03FED3F1AC81AF4ED111239101AC81A1112391239111239391112391112391112393911123939390110D65D71D4C0D05D1AC81A2BD076D011123918E0102B10E076D018D001C81112393911123911391112391239080772313001715D005D172736373613123736353426272627373E0137170E01070B01373E023332161F01060F012E012322060706071612161716333237363717070607062322272E01

2726270607060706070615066D11362C1B3B33

10080F110D801263E55118071E33453DA664B38040101D0D011D080B202D0E337530252E087F48140B0C1221343215A24E3616141211173236500C431A100B141407681719BDC780012C01097E381615120302023D073422152288E9FEC8FEDCC572973103040A6136080A0A2D241C3318FEA8850E070F18243A6C2F15080B0F5891D925472A1A274D772C2C07000001008AFFDD028D05CA002800E240AB340034013B103B113B123B1334284300430149104911491249134328691069116912691378107811781278

1389108911891289149C119C129C14AF11AF12AF14BA11BA12BA14CA02CA03CA11CA12CA14DA01D902D903D911D912D914DA28E900E901ED02EB03EB283418140F470A0E0E631E1D14101E01211E471D10401B21101C201C601C801C901C051C2A211E1D03251C0A0E0F14040618189A19CE401C211B004000210174255D060B003FED19F4181AC81A3F1AC81AF4ED11121739111217390110D65D1AC81A2BD076D018D001C8102B2B10C076D018D001C83130015D2517070607062322272635343736371337363736

35342E0127373637170B0106070615141633323736023C1EBD5032241E23121A0F17079A170903021127730ADBC4196C7B260502100B102137E9368034140E1720393253802102B1742F19100C161608013B1A4416FE32FDC5A432120E1514111B0000010029FFDD066C03D1006E01B140FF491D553B553C553D503E503F5040643C643D603E603F6440803C803D803E803F8040AB3AAB3BA440F440150440154002290329043C323C4A3C4B8B468B478B489C469C479C489C49AA31A533A534A535AA4BA657A658A6

6AA66BBA31B533B534B535BA4CCB2AC533C534C535C94CC952C953D92AD433D434D435EA4AEA4BEA4CF31DF529F62AF431F432F446F447F448F449F54BF551330F191A69030F07044701820303636A6914696B826A47266901691626255E5661825F475C825E5E635756145658825747562147824A474D824B4B633132141031164F218F2102212F3E3E3482324731101F2F602F802F032F7032312F3404372C1A1926251621064440171E6A695E5F57564A4B32096B6503040703010B400E210FB80267401C134F5D

2C655D1E0B5D1307586B005C015B000B403D213E74375D440B003FED19F4181AC81A3F3CD03C10D03C3FEDD4EDD4ED1019F4181AC81A111117391112173911121739111217390110D65D2BD076D018F0C8012F10D45DC4102B2B10E076D018E010D076D018E0102B10E076D018E01112393910D05D76D018E0102B10E076D018D0C811123939012F3130015D00715D172737361237363534262322070607273637363332161514070603363736333216151407060F0136373637363332161514070206151416333237

3637363717070E010706232226353437361336

35342623220E01070607060722060727361237363534262322070E030706070669142F134E0F09120C09111A641EC9573D2B1720080C4C7C92B46F1E29060A163C56557E825C422129264C270E0A080B1326480C1C7D475D2E19141E2D090D4932130E165A822C3D2935062B426717265E1A11130E181C43A35E3A03212F521D1C953F0149683F1C15170A0F4B32A82F21231D1C293CFEB5E185A52B251C224059E4A55F8C45313130458BFEE7BA1D111004071A310A335E33330E0731272431420118BD341816348D

4B6782AC6308141C62015E96612614151028D1C8F53601080E00010025FFDD043303CC004900FB408C2826283C49044905B529B52AC429C42AD529D52A0A3A1C50335034603360348331833280338534853593319332903393349335C91AC91BC642C643131904460E0E08820547018204046347461447464717101522333B473C5B3CD93C023C6326251425332A8226472510224B3C3D3B3A0437402225262A042E1F151746194705481305080403010A400D210EB8026740140A5D13405D1F074801000B40322133

742E5D370B003FED19F4181AC81A3FC0C03FEDD4ED19F4181AC81A111217391112173911121739111217390110D62BD076D018E0C8102B721076D018012F10D42BD076D0D0182B10E076D018F0C8012F1112393130005D015D172736373E01373635342623220727363736333216151407060736373637363332161514070607060706151417163332373637170607062322263534123534262322070E0207060706591A19162F33130A0E0A22731BC2583A281C1C0C123F5E926B6342322A2C0C1442210F0A07060B

1221343319A5633B332620921511161C3DA25F1823087F1C18414CA6D67F4319111057369C30201D232B3B5EEFAE8B653222302E243B5DED77553913130A07121C29387E301C392A4F02014A13151023C6D25D874A0A0000020065FFDD040B03CC001600260040402F0A140A15021902190329022903E602E305E90EEA0FEA10E91DE91EFB14FB150D23B407071A69130B17620020620C2810D6EDD4ED003FED3FED3130015D71133412373E0233321E02151402070E0223222E0137141633323E0137363534262322

06026553301E99B767568E4822573929AFA165778B36EC5D553953451D2A614E507259011C7C010C3B25794F3453744583FEFB4530753D5493607B6A377B6C9E907A6D77FEB20002FFE5FDD5042F03D00038004C00C74072030103050333033403350337034A034B140014011433143414352401243424352437353335343535A901A90516111E1C0431110A8205470182040463314B1431358231474B100F1A4F1ABF1A031A4162102920293029402904294E4B39453B1E1C1A31042432352F04050A03010C401021

11B8026740100C5D1707455D24073B692F0A35

01000E003FC0C03FED3FED3FED19F4181AC81A11121739111239121739111239390110D65DEDD45D2BD076D018E0102B10E076D018F0C811123939012F3130015D0327123736133637363534262322070607273637363736333216151407060736373E0233321617161514020E0223222706070607060706011633323E013736353427262322070E02070606155A1B3A3D210A030C0C121F34391B763D5F3925181D1F0A0C396041329C7334202B12196862CC885C3B393D1C07032534700144635E38534E2D22100C

171929387C691A12FDD50F014D72F40122A24A1D141F100F1B2A335D2940170F21221A3241E0934635712D223447557DFECD7C8A3E0DF497264204091502A1353C9FA780684A1812141C7EB24F340000020045FDD5041703CD0029003E00D04091A50C0105220523052405261B201523152415261B3C1B3D2906290725232524392036223623393E45234524452657217909AA2AAA3E19366240117F118011A011C011E011F01107111D07010A3E472A2A6320211420268221472010401C210F1D01201D601D701DBF

1DCF1DEF1DFF1D071D403E2A392D21201D2607010A0A1B0E181D211C2D691807395D0E0B260121000E003F1AC8C03FED3FEDD41AC81112393911123911123939111239390110D65D711AC81A2BD076D018E0102B1076D018D0D0390110D45DED3130015D005D0127363736373637361337060706232226353412373E023332161737170607060B0106151417220706132E0123220706070607060215141633323E01373601D213200607070F30054F36A0AD774D333362381CE67C4D3E6E3E5F2414142F5879140322

3975FD255B2538281B16262F1F381A131D71A1283DFDD52619070A1128D5150164E6E87550634A7B015D4C27AC421B1C3915294DB5FE55FDC8612B06180A13054F1617130D1F368B5DFEF62A25224EC94C760000010032FFE2034F03CE002F00C04070062C162C262C39034A0359036B03742C9904A904B42DC42DD323D324D325E223E224E225FA23FA24FA2515092219222922031A190D0D07820447010303632C1A142C2C1A2D172D17101521402521240F215F217F21AF21BF210521312B2C2D271A1917150012

04030703010C400C210DB80267400A120725271F072D01000B003FC0C03FDCC43F19F4181AC81A11121739111239393939111239390110D65DD41AC81A10DC2BD0C011123939102B10C076D018F0C8012F10C0313001715D1727373E013736353426232207273E0137363332161514070603333E0137363332170E010F012623220706070603070678152E272C0E060D0A20761988843B1C1318220A05440E4A983B27311D20111802173138352C3D4050239A1D1E1A9F97D96F37241D135C376E5D180B27251D331C

FEDFAFE426180A3B9D3B0E2A253295BAFEEE18

060000010035FFE6033F03CC003D010C40D7A50DAB2ABB07B30BB30CBA16B424B333CA07C40BC916C433DA07D40BE00BEB16E724EB27EB28E332E333F332F33317050C050D0D150D1601320133140C140D1C141C151C163C283C290D1A0F1A10162D162E290E290F2910262C262D262E6A0F6A106A276A286A290F2D0E2B252B262B272D282D29212B212C080E0D292A0422050F1E1F1E021E22691B180700001000020005693A360B0D0E09112A2930263F264F265F266F267F260526A10F111F11022F11FF110211

3A01FC00203A803A023A1B30094009500960090409EC301B1EFC1D301B011B3F10D45DD4ED10D4ED5D10D45DD4ED10D45D71ED5D1112393911123939003FC0FDC45D3FC0FDC45D11121739313001715D00715D1333171E0133323E0135342E01272E023534373E0333321617060723272E0123220E01151417161716171E0215140E01070623222726273637365F3E032B8B4A4053272439508C5D36171240A96143427D3C14113C0C307A3A2D4F2826268858172C432840963B5379463A2A680C0B11012A60324327

4B25253E1D0F1B37653A3736284069221F205B94632D2E2643273723231810080E3857324964781D280B0826294C6C000001005EFFDD034905150034008A40373A083A093A0A0317F5130D47100F0F6326281426012E822826471021401A21801B011B36282E3126090D060F171B1A1D23F5401121260FB80379B41DF5205B13B8036540094000210174315D060B003FED3DF4181AC81A3FE4E4FD3C1AC81AE410DCC0C011123939111239390110D45D1AC81AC42B76D018D0F0C8102B10C876C0D018E03130015D01

170E010706232226353437361336372337363736373635363F01170607333237170607262B01060706030607061514163332373602AA1934E0432D213B3A0A07472F0ADC0D5793020C1332309817213A67664808160558566A0623013E1304021A161F2D52010438299A1B1149382336290140D73D361233184770470B10351961FD0808531F081D9505FED25F1E110D181A192E0000010031FFDA042803CC004F011F40A7802A802B802C802D040919160D1648591A8B228B238B248C2D8C338C348C35AA1AAF3BAF

3CAA3DDB3DE91AEC3D120A1A0F3D191A1C3D42414242065943974302D6430101014B47474B824848634748140C100D470C1000083308F00803081E2B39383403192019471B1A1A631F20141F2B2320471F10401D21101E201E501EFF1E041E475139383403401B1F202303261E080C0D100413054B48474304404E1E1B1D0740002101B8026740114E5D0507402A212B74265D310B135D400B003FED3FED19F4181AC81A3FED19F4181AC81A3FC0C011121739111217391112173911121739011076D65D181AC81A2B

D076D018D0C8102B10C076D01811121739012F

10D45D2BD076D018C0102B10E076D01810C8012F7172313001715D005D132736373633321615140706070207061514163332373E013736123736371706020706151416333237363717070E010706232226353437363F0106070E010706232226353437363736373635342623224918B95F432A1E23070C2548100B140F141B2B842D4D54087169112776120B100D0F11185C136F41642218161D25040815392E2E4CC2522C242C3609062632150F100D1D02C138872D1F25282127408BFEED4E33191514111A964D82

0115620720117CFE4665421E1312090D433855303D0A07292915173457DB553E68B626143B39252F238CB96E501D17140000010036FFDD042603D10042008E40440B0D0A2F023A350B400A210B0F1E011E1E0F18014142210F0001000F622F35013518A1102A202A302A7F2A042A44401D211E1E241B1B5D24070F001F002F0003003AE23DB80247400C010603400B210A07127D320B003FED3F1AC81AC4C4C4FDE0C45D3FFD111239192F181AC81A0110D65DEDD45DEDDC5D1AC81AC01112392F5DDE1AC81A111239

3130015D1B01363332163332373637170E0215141633323E013736352E012322072736373637363332171E0215140706070E022322263534363736370E01232722060F013655472B26B038341E16171C3884494A3E2E676B2B2B0129211E2217252D23111913282414241316244256BB9F446C894A4C36853B364F5A2822152802AB010B0E0F07060F273EDDF76E6A5E399E8385702B3C0F301B2F231C07120A2F4B36554E807395AF46958B69BC5D43850D0502102C500000010032FFDD066203CB0065012840BB3F

143F153F163F173F1805091C09241A1C1A243D1C3D243D255B4C5B4D5B4E6C1C6C246C256E4C6E4D6E4E6E4F7C1C7C247C25732E732F7B417B467B477D4C7D4D7D4E7C4F7B537B549842AB1CAB1DAB24AB4BAB4CCD4BCD4CDC1DDC1ED027D028D0292C5A550C400B210C1F01416521030F00010011624055015528484A261C1C471F1D1D6324261424262426243622DF28012830A1203F503F023F6726242B221C1D151F221F210B4037213636333A335D3A070F0001005AE25EB80247400E030905400C210B072B15

7D45520B003F3CFDC43F1AC81AC4C4C4FDE0C45D3FFD111239192F181AC81A10D4C0C011123939111239390110D65DEDD45DD4CE393907102B10C076D018111239390110D45DEDD45DC41AC81AC010CE1AC81A1112393130015D005D133E01373633321716333237170E0107061514171633323736373E023736273637170602070E011514163336373612353426232207273637363332171E011514070E022322263534370706070E0107062322263534363736370E010F0127220E01070607322F1B063A2A2E3D73

3859391D5D851F13261C27191E272B42543422

16017E5C1A1A4A080B13433232496A6E2C271D211C533B2117231928295040CACD52477813401A283F7331242A597B414B3696232A13614C1D35160D140802A885602B0C060A172167F77B4B567B2E230F14324CAEB29F6A27161F124FFECC273A9A36554E01376B012A853E330D2F393F07111A584697A784EA736C7B37676E2B2E4A56110D908B5EB46047970B06010302062C1E2D10000001FFF0FFDD03FE03CA0054010840B9262126222B352B36294C294D33173318462646274C344C354C364749474A692069

21664C7920794C8610861F86208A378838BA37C50FD40FE510EB37E54BFB37200A160A171A161A1716202A162A17254E254F35170A0F4C444C544C954CA44C04372357239A23AA23BA230423374C0F042B004017211B34184418501803184041214218422B0040042103002B402E212D2B5623374C0F04471E2E315D2B2947145D1E401721181B1E07404121423D5D47475203075D00520B003FC0FDC41076D018ED19D4181AC81A3FC0D41AC81A10ED76D418C0FDC4111217390110D6D41AC81A10D4D41AC81A1112

39392F1AC81A2F5DC01AC81A111217395D10C05D10C03130005D015D073E012737171633323736373637363726272E0123220607273E01373E0133321617161736373E02333217060F0127262322070607060716171E02333237363717070E022322262726270706070E0123222610101401310D1F161815201A232D511924150F361F24501B2F511A0E294C225C6E2005045D16404E49211E26220C2C121611201F2D3525461B0F181D2512151B244C20763C4D33152A4A14101D664B382640231317082D8D1A043F

0C090E1721386728E1422F29322E1A832D22141472B71D16871D54441E105C8108380A11193D2B66A839613C1A0E134032643230103D4735B6916637261C070001001EFDD5045103CB0052010640427B3E0119412A4139163917391839193941494247495A426A4279428A3F8A408A429A3F9A409A42AB0BAB42AB43BA0BBA0CBB42BB43C514C515CA421CDA0CDA0D0216B8FFF640520452493128281E821A471619196333341433343634333143F541470C0D0D634948144947481031404521104620460246541E1A

19160423130C070D31333436042C0D413B4349484F46464345472C40272128B80267400F235D2C073B5D130B00020107694F0E003FEDD4C0C03FED3FED19F4181AC81A1076D4C0C01112393911123939111739111239111217390110D65D1AC81AC42BD076D0182B10C076D018E010D0D0C0072B10C076D018F0C8012F1076D418C838313001715D005D1337170615141633323E02371306070607062322263D01363F013637363534272E01232207060727373637363332171615140703061514171E013332373E02

37363736371706030207060207062322263530

7E1E024441274C4E503242603764503521263E0101170D03050403130B0F2038391AB94533271B24131A022D08060313080C1435785B1F2E119550172F5D4E2B46C7835E5D656CFE9B500D150E37512661D2C00107853B6A2B1D576E220A0DDF6E2B540734100C0F121F2E398C30150F1922421921FE6B731E2C130D0F0C20A2BF6293801F121276FE9DFED67DC6FEE94C36614F00010036FFE803B403C9002E00C6407DAB11AB12A718A62AA62B0507000719120A110B170C36014701570108016919181419181819

69000114000001014700191819182E011600400A0C1F0B2F0B7F0B8F0B040B462EA000010017222125231716211810172017401780170417304000212E06191C2C222C1F63270B174018211607010313000A1306630C0E07003FC0FD39C45D2FDD393F1AD81A393FFD39C42FDD393F1AC81A0110D65DD41AC810D4C01AC810D45DC876D45D18C0C81A111239111239071076C007102B10072B3130015D005D370106232226232207060727133633321E02333236371707013E0133321633323F011706070623222726

242322073602B14A5038D12112190E23395C37312A5B9B632D333E19281CFD66494F2534D52C1120353828243343312B1CFEF358653B3D02CC251B031A5005011F120F2A1023271068FD531F142604740571B01B0704454300010022FF01028C05C000390093404D0907090809090B0F0B101A0F1A10280F2810350F35103413341434150E2B240F100F151C00050533320606473232632415142424151623154724263B24232B32332C0015161005060F001C4700B801FBB5100F102B2C12003FC83FC8193F1876C4

1811123939123939111239391239390110D4D076D018393907102B1076D0111239391018D4C80110C83810C83130015D133E01373637133E0137363736373617070E01070607030607060706071E031514070306071E0333072E0237363713363534262726224243151D0E3F0D261D14173135355005372E1416083E101F182C2244322D1C0C0C43060101132924110BAA50300403064707181D160273102722304F016F4A521C140B1B0B09022702282B3630FE925B37291B1510101D282C2A2840FE7C28212F2B0D

0328032050632714018429282530140F0001021D000002BA05D900030010B60100000A03000410D6CD003F3F313021113311021D9D05D9FA27000001004EFF2C02BB05BE00390097402004080409040A040F0410150F1510250F2510370F37103912391339140E2B240FB8FFF0402C0F151C00050533320606473232632415142424151623154724263A24232B32332C0015161005060F001C4700B801FBB52B2C10100F12003FC83FC8193F1876C41811123939123939111239391239390110D4D076D01839390710

2B1076D0111239391018D4C80110C83810C831

30015D010E01070607030E010706070E0223373E01373637133637363736372E03353437133635342E022337321E011514070306151416171602BB4243151D0E3F0D1C1919212B2F3A590927391915083E101F182D2144322D1C0B0B3B070B1520270AA45721083F08181D160279102723304EFE914B452B1C1010090627011337363B016E5C36291B15110F1E272D29284101582A1F281F170C27334840272DFEA629282530140F0001006A0136047202C200190048B50C010F0BE316BE02570040000401E800C000

080257400E0FE3001B47474A0B0CC70001491AB80338B1C9182B4E10F4324DFD324E456544E6002F4DF4ED1AFD1AEDE4123939313013273E013332171633323637170E012322262726272623220706DB714D8C525BB4773625503D6F5A834C2145469536261A2F2B1B01367E8A70533739657F9159121E40100B271900FFFFFFBB0000057A06E10222002400000007008E0190015EFFFFFFBB0000057A0720022200240000000700DD01D3017B00010087FE430583058F00490089B20A5F10B80336B30F160116BA01

5800020159B21A2C35B8012AB62A27034544463FB8012AB7001A091801001913BA01B30007033CB3000EF80DBA033B001901A0401800B21A1A461F3B75B01F011F2A4446452D552C302A012A4B10D45DD4EDD4C0C010D45DED1112392FEDF4F4E410F4ED11123939003F3CEDD4DC393FC0FDC410F4FD5DFEED313005073633321E011514062322262737163332363534262322072737222E023534373E04333216170607233734272E012726270E0415141E0133323637363717070E0202ED4117183C4E2D807E3B58

4028513F3439302D1D27166A63D598423A43979A89C7757BDD313F0F4705080D39435267729B7A592B57B47B55A03D137C17175FCE81216105234523476E141D3F213224202C09189B4294C57CB7A791AE774B3B3A24C989AB170B1323191504044079D0F58F7CC0622A1D094C12503F5E1F00FFFF0012000004DC07400222002800000007008D011C0178FFFFFFFCFFF706A306D7022200310000000700D901C70149FFFF0099FFDD064F06EF0222003200000007008E01FF016CFFFF00A6FFDD06B706EF02220038

00000007008E01D5016CFFFF0050FFDA043205A50222004400000007008D00E3FFDDFFFF0050FFDA041705A70222004400000007004300E3FFDDFFFF0050FFDA0417059B022200440000000700D800E3FFDDFFFF0050FFDA044605600222004400000007008E00E3FFDDFFFF0050FFDA045C056B022200440000000700D900E3FFDDFFFF0050FFDA04170582022200440000000700DD00DCFFDD00010050FE43038703C1004400D640460609060A060B060C060D1609160A160B160C160D8E408E418E428E43AD40AD

41AD42AD43121523010A200A370A381A201A37

1A382B192A202A372A383D19A938A9390D0AB410B8024DB72F163F160216B403B8033E40121A422141413E342D347D25063E7D001A0B07B80313B513FE1A0EE40DBA0233001902334025001A1A421E3B623F1E5F1E021E2840412142282DE52C20283028402850286028802806284610D65DD4ED10D41AC81A10D45DED1112392FC9F4F4E410FCED003FC1ED3FFDC41112392F1AC810F6F55DFEED3130015D00715D05073633321E011514062322262737163332363534262322072737222E01353412363F01363332

16170607060723363534272E012322060706070615141633323637170E0101B94617183C4E2C7F7E3B593F28513F3439302D1D271668557F3A4C6059AC505C3363441111180C4409012C60333A502419162F574349C04E179C9E1A6805234523476E141D3F213224202C09189845834D80010C7E376828171D2A46604E37330A1425252F3D2C54B67661655341406B5100FFFF003FFFDD041605A50222004800000007008D00C7FFDDFFFF003FFFDD036505A70222004800000007004300C7FFDDFFFF003FFFDD03F1

059B022200480000000700D800C7FFDDFFFF003FFFDD042A05600222004800000007008E00C7FFDDFFFF003BFFDD034E05A5022200D700000006008DFFDDFFFF003BFFDD029D05A7022200D7000000060043FFDDFFFF003BFFDD0329059B022200D70000000600D8FFDDFFFF003BFFDD03620560022200D700000006008EFFDDFFFF0025FFDD045C056B022200510000000700D900E3FFDDFFFF0065FFDD043205A50222005200000007008D00E3FFDDFFFF0065FFDD040B05A70222005200000007004300E3FFDDFF

FF0065FFDD040D059B022200520000000700D800E3FFDDFFFF0065FFDD044605600222005200000007008E00E3FFDDFFFF0065FFDD045C056B022200520000000700D900E3FFDDFFFF0031FFDA043205A50222005800000007008D00E3FFDDFFFF0031FFDA042805A70222005800000007004300B4FFDDFFFF0031FFDA0428059B022200580000000700D800B4FFDDFFFF0031FFDA042805600222005800000007008E00B4FFDD00010091000003FF0578002D0082B61CF51F4700F52BB8037E402919F5164703F506

06270926F52327080FF51309021C3F194F198F19AF19BF19FF190619272B47090606B802544017161F14131623161F1F16033000A000B000030016162F2E1112392FDC5DC010D007C010C02B10C076D018C001DC5DC0003F3CE43F3CE41112392FE476D418E4FDE476D418E43031133E01351E01333612351E013B043236370602073236370E01072E0123060A011522262707361A01372206910C1A28D44E0E270E4E1F0E0F0D0C13210F154C0943E4180D1A0542B43B0E373413442176114E440645A2033016731D

060847013732020201033DFEC53C0905157425

080A3BFEBEFE853E020103460165015734040002004A02FE02EC05A0000F001B006840110508060E02AA15CA15DA15EA15FA150507BA0375001501F4400CA51BC51BD51BE51BF51B051BB80375400E0F02A518C518D518E518F5180503BA0375001801F4400CAA12CA12DA12EA12FA120512B80375B10B1C10D6ED5DF4ED5D003FED5DFDED5D31300171001E0115140E0123222E0135343E01330E011514163332363534262301F0A35959A05758A15959A355587C7E58587A7C5805A059A15758A05959A05857A159

7D7C58587A7A58587C00020050FF2E03A304AA0026002F00A3406B141114121413330F331030113012070B0D1A0C1A0D290C290D2B1D2B1E390839093A0C3A0D3529392F4A0C4A0DAA0CBC0C11160D0C0026042617192F27241804182507070602270C240225260002071121100D2F161C17181C021006402526082107061F1721182C621F3010D6EDD41AC810D4D41AC8D4C81A10C4003FDC3C10C4D5C4D01AC83FC0D83C10C0DDC010D0C82F070517103C0717103C3031015D005D013E01333216170F012E012B01

03323637170E030F0123370622072226353412363F0233030E0315141617029C113B142D6218392609485414985B7C4D022C75592F1329482603240A64AD6AA293612A497B34455B443E4403E203051E1DD101525BFCE13A2B441A38250C05D6CA01018E96AA0118903D27DAFED90B387DEC8172680D00010002FFDC04B00599004C008A40093A2120401D49460000B80271403C161D14161D161D1916160A40400A30402E2F0A0E210D000A200A020A4E1D46160000112B2F302538472021382B303309404041213D

090D0A115F0703003FEDC0C43F1AD8391A3FC4D9393939762FCC1810CC1112392F3CDD3C0110D45DD41AC810D4C81AC010D411123910C8D007102B10D0CC11123939393130013E05333216170E010727362623220E0207323637072E0123060207173637363332171E023332363733030E0123222E01232206070E0123222627373E0313220607371E010182091B2E74A3A04034852C1A38092F0E5B676767241A0956802F0C2F993A1585C20C2A2B382E6034304E501E3E411B353425303AA8CE822A26461D1E2E12

13200D1032327C55325357230814780332356FAF87652818134AA72E0C737DA6AB9F29020255020372FEC2AC0C12131506080B075A6CFEAA0E09311F0A09262C130F3F121564EE0130020355010300020064FECB03F905920040004E00F74040010C010D010E01380139270E270F274E081A471F481D491D4A260E260F2A472A48264E350E350F4A484A494A4A66466647644E782F7830138907872089400341BB032B003700170141B41E0F490149BB032B001700370144B33D026401BA01DB000001A6B2069C3DB8

01E5B34F236422B801DB401C2121279C0F1E1F

1E021E1749413704341A029901B100B112802A012ABE012E001A0126004B012F0012032A400C34239922B121E2348F0A010AB8012FB23A8C44B8012EB40F3401345010D65DEDF4ED7110F4F4ED10FDEDF4ED7110F4F4ED11121739002F5DFD3C10FDE410F4EDFDFDE410ED10ED5D10ED10ED313000715D015D171317071E0133323E013534262726242E013534363736372E0135343E01333216170327372E0123220615141617161716171E01151406071E0115140023222726013E0135342E012F01061514161764

3A4409328B43407F3D313726FEF56331302D1F482D256FB57057B04438430441804759681F1F3DC05C23343B58662E2EFEE8B96E5D400235323E213F75C2614349B2011503AA484943662D2855281C8B5A753C3B6B301F352B4C2D53B46B3330FEF804933B365E40203C1D3A67321D2B6F424C9E47295F378BFEFA291C023B186330244337456F555D2C642D000001014801E10392042B000F002440117803780D02040C0C080000B90804B90C1010D6FD002FFD1112393D2F183C3130007101321E0115140E012322

2E0135343E01026D4A8C4F4E8B4C4C8C4D4F8D042B4C85544C8C4D4D8C4C54854C0000030034FEB804F705760003000A00240079403B0808051F1C0405031B21024003800F01000E0F2110100F47100C0E261F2504211C1C13240F1A1B1003001747132202010E030524F5400D210C2202003F3C1AC81AE0D9173C10DC76C018DCC5C4C4C4C41112392F1AC80110D610D4C82B76D01801C82B1A07D83C101ADC1A3C1AD8173C111239012F3031090127011B01220615141601250F0101170E0123222E01233E013F01

13240035342421320402CA011980FEE73588A7D06D01B901412C8CFEE7AF2D53594A94B01E051C0C7187FEF4FECB010C01003D011FFEF8063901F9C603320308AEB0B5BB030E043610F9C8032C11050604200D0402F84F0103B8AFCD040001FEF2FDCA046905C800580073403C404E214D4C4C54055447555563424314104347420F13332D1C3B0F5A302F1718042A43424A3E5451553E7D0C000121550506262A69210B4E515D4A0F003FFDC43FFDC43FDC1AC83FED111239111239391217390110D6C8D4C8D4C810

D076C0182B2B1076C0C0180110C02FD01AC81A313013373637363F0136373E0233321615140E01151417161716171E0115140E02232226273733151E01333236353426272E013534363736373E0135342623220E010302070E02070623222737331E013332363713262322460722A2050A22112A3EEB954E5F8148CC0C10304A111918428A814D2E60323931214E2D47522461361D1F32621323275A494365323E7B402E67A8533C2C1F2B401E193D19273D2AB8392424033633083A0205892F2F48AA3D7F5B4C8BC8

3B1E1B273C5D182643234581884B1616ED6622

234F3B294F8C4E471C22483C761C34743C4C594BA0FEE2FDCBD79BD0B72C1F11E02B2850D603A80200040024FFDD05D6058F00340043004F005B00D440113B513B553357335B04390C390D390E030DB8012D400E1617141617161617121C1C20063EB8012D40116F20012020120630120112320001003506B8012D400E2C250F341F3402342C122C4D4753B80124B24D5D59B801244020475C401716121C1C084208424211243301121160000100263B40240024444A50B80124B2440956B80124B14A03003FED3FED

111239392F1AC8C82F5D3CD83C3C1112392FD8111239111239391A0110D6ED10D6ED111239392FD85D3C10FD3CC05D2F5D1112392F5DED1112391112393907102B3031005D015D01352E0127263D013633321E01171E013B01352227262726272E02273E0235342E0123211532171E011511140706070623271513343736373633321615140623222713200011100021200011100025200011100021200011100002EF3119050A220D29292329412A377720101C391A06112E20234C5130346F6FFE9C330810100604

0A11280EEA09070C261B47564F75132367FED2FE5501AB012E012E01ABFE55FED2010D017AFE86FEF3FEF3FE86017A014C29020709102CEF03173B5F922629101A7B38091E36160C1334592F3364332C02041931FDCB250B090507012902BE130E0A0105574C496703FCF201AB012E012E01ABFE55FED2FED2FE5551017A010E010C017CFE86FEF2FEF4FE8400030024FFDD05D6058F000B0017003D00884035142411331134361A361B361C451A451B451C541A541B541C0C7B0D7B11751475167C1F7B35063A1E36

212D2C002601261E2600060CB80124B2000912B80124400F06032E2D182119360022192209030FB80124B2093F15B80124B1033E10D6ED10D6ED111239392F5DDD2F1AC8D4C8003FED3FED111239392F5DC0C41AC82FC83130015D005D052000111000212000111000252000111000212000111000011706070E012322272635343E0133321716171617152326272E0123220615141E0133323E0102FDFED2FE5501AB012E012E01ABFE55FED2010D017AFE86FEF3FEF3FE86017A022036151B31945AC16C5170BB76

27280F6B311B44130E18563D648F5277452D51302301AB012E012E01ABFE55FED2FED2FE5551017A010E010C017CFE86FEF2FEF4FE8401C317361C333D946D917ECF6407021C0D0ADA491B2D3AA89970AA4B1E2C00020039022B07C90577001C004D00AD40393F1E4E1E5F1E6E1E043B354C35551D5935661D6935731D761E793377347835831D861E8A3388350F04031C21001E2C2F3D4010132E34353F12B80181B6214C1F1D293603BA01C6000001C6400C01091801021F34331D353628B8037AB333353436BF02

2D004500030139000B037A00160139B1004E10

D6F4FDF4D4FDD4DDD4FD111239111239003FDD3C10E4EEC8C83C3CC8C8FD3C3C3C3CC8C8C8C8C8C8C801101AC810C83130015D005D13352115232E0127262B011114161716171521353E01351123220E0107251B01211523220607061511141716171521353E013511012301111417161716171521353E0137363511342627262B01353903003E04181C28395B12170E45FE6454335C403C1C020448F9F701192721160305120F45FE944425FED116FEC40C09140739FEEF3C1F040807090D1C1E04A0D7D73C340E14

FD8D291F0905083636062E32026B1C383ED7FDBA0246330B080C2CFDCE450E0B083636031F440245FD1F02E1FDAD2E120E0502033636050D0A182402531E1004063300000101740461034F05C8000E0016BB000701E800000206B30AB8010F10D4FD003FED313001233F013E0133321615140607060701CB57F33D1C2312273320331F080461FD3F1A1131231B2A1B1105000200CF049203630583000B00170028B10C00410A016E001200060206000F016E001501300003016EB1091810D6FDFEFD003F3CFD3C3130

01321615140623222635343621321615140623222635343601483246473231474601D6324646323247460583463232474732324646323247473232460001002C0041043A03FC0013007240240401001104101005070A0B0E0406060F400F2110021209400521060D0914400621050407B80106B601400A0E80000BB80106B60E4010210F110E002F3CDC191AC8181A10FD3C1A10DC1A3CFD3CDC191AC8181A0110D63CDC191AC8181A10D43CDC191AC8181A0710173C0710173C303101072115210727372335213721

3521371707331502CC8401F2FD92DA6F95EC016D84FE0F026CDE6D95EC026B9992FF54AB929992FF54AB920002FF85000007390577006B007E00D940757B5A5C47795C5C06790706070706000A0A0A6E003B6C58566D56476D6D572B3B142B392E3B2B3B47102B1C455548461C2155201C80565C675A796E6D03737B07060112585A8D7B6C3539388D322E306C303D2973202BE2295F125515F51B1302463BF53DB549F54F55675501556AF5684E4B030008003F173CE4EDEDEDE4FDE4C43F3CE4EDFDE4C4C4111239

392FC4C4FDC4C42FC4FDC41112393911121739111239390110D6D4ED10D4C0ED10D42B76C0180111123939102B1076D018111239390110D810C02F111239390710C010C0077610C0C03130233736373E01370136373635342726272E0123370433323736333237170607060723273426272627262322070607031633323717072227262B0102071633323736373637363717060F010623252207373E02373E01373637260506070E010706151417161716330726232201133635342623220607060706070607163332

7B0B4B170E1B35028D250A0605080F1E82160C

010999E3DA8315CB210A0C0B170A4401070911305B8D444E1F0B318F42A752081E054A7FB442481AB12A81633C140E0B1E1A472F0F0C7465FDA7754E0C44271808042306021D4DFE8D61361F310402090C1A245D0B72AF7503B1521A10120B0F0617432A5F3EA1262FD2410207041C4A03EC38160D0C09050A04080444040402020C244080598A2312070B080E04AB3CFEDB040C0C670408FE88C5070D090F0A1D4E6501D0800B0502023D060D181509BB2611A50402996239600E07050C090E06074103027601E096

170E0F0705175E3A915FFD040000030068FF92065C05D9001B0028003600DD407C1900192A1A1C2A291D290F0E0C0F0E1A0C0C0F1D0D1D291C1C2A001B00191B0D1D290235200C0F02130A1C2A022F2700190217040427351304170A205F0A400E210D0A032F5F17401B211A17091D290235200C0F02130A1C2A022F270019021704172F200A041304277504401A211B00040104357513400D210E133810D6D01AD01A10EDD45DD01AD01A10ED1112173911121739111217391112173911121739003FD01AC01A10ED

3FD01AC01A10ED11121739111217391112173911121739111217390708103C083C08103C083C0708103C083C08103C083C31302526272635343736122433321737170716171615140204212227072709012E0123220E0207061514090116171E0133323E013736353401163D1C26222BD10150DAECA0A849A244202FCDFE79FEFBF29FB14A01560334319F5E6A9070671F25036FFCC71C222F884D6B9B7C36569144516D7A7A8CB40120A867B146AC464E758BD3FE5CFF70BB45016C036543473E79D391B5924102B3

FC952D1C27304DA09BF4D163000003002200E2059A036C0019002700340048B72013062E040D0028BB0126000D001A0126400B00352013062E041703321DB80122B41017032B25B80122B10A03002FC4FDC410D4C4FDC4111217390110D4EDD4ED111217393130133436333216173E02333216151406232226270E02232226371416333236372E0323220605342623220607171E0133323622AB9984A7715B3E72559A9ED2A85FB45F56556F4684A86E78564F884B1743455E434A660496735B508F4B60346C405167

022292B463816D4239A87A96CE5371504731B688698559571B61774D846A6B83716D80444C890002002C0000043A04BC000B000F0033B20A0009B80106B30307050DB80106B50C080E010300B80106B406090D081010D63CD43CFD3CD43C003FFDDED43CFD3CC4313001211521112311213521113301352115027C01BEFE4292FE4201BE92FDB0040E030096FE64019C9601BCFB448D8D000002002C0000043A049C0006000A006B40253A0456035704550558066A006A0167036705A806B906C9060C380068036305

030340020102BB01EC000400010106B3400001

00B801ECB2050608B80106400E07080603020305090C040100080B10D63C3CC810D6D41732003FFDDEC8F45DFD39F45DC83031005D015D13350117090107053521152C03C545FCC7033462FC5D040E02607E01BE83FE8BFEA37ACD8D8D000002002C0000043A049C0006000A006C4020360446045A035804590566006601690369046905A606B606C7050D0540060106BB01EC000400000106B340010101B801ECB2030208B80106401507080603020305080B0401008F09AF09BF0903090C10D65D3C3CC810D6D417

32003FFDDEC8F45DFD39F45DC83031015D0115012709013703352115043AFC3B420331FCD2616B040E03097EFE4280017C01587BFB648D8D000002FFF9000004AE057700440049013340413C153C163C173C18331D331E3120312133223323441D441E644364447A3D7A3E7A417A498B418B49141713122D49482E48472E2948423D2C4529484847482E2929B801D440121A151419161A151A1A1E151E031512471111B801D4405E0100141001413E42423D0703402E213D48433F3D38420047011003384B3D3E392E

2D35292C211A191D030111120B001242484015801945494103162C2D3E030F190119190B1D070B5509F5080A08213539031D5537F51FF5203638031E02003F173CE4E4FD173C3F3CE4FD3C1112392F5D173CDD173C101ADC1AC03CDD3C11123939391112391112391112391112390110D4D42BD076D018D012393939C0101AC81A10C807103C3C102B2B1076D018C010D011123907103C3C2B100876D005073C3C07081076D01807053C3C0110D8C03031015D01030615141E0133072505373236333E013713213721

03233733032E0123351725070E0415141E021733373E013736262F01371737070E020F01330721032107011E011737025E39042687180BFEA0FEB30B1346044F350E3AFE970C015D45EB0CC8530C3F27FA01190D19193E1C0602201E0CF770142405052A1F3303EC91094446554641E40CFEFCA5017C0CFE330B240C810212FECC1D1C34230C4209094206083A5201364601004601392A344207074004050F21250E100C7B7620BB23511E1F2704043E050542103A776F6746FF00460146317D21CF0000010001FE38

047C03E00042008340444F2E013D120537251D1D6325222522470905252E4028014F2801284412470F0F630509140509050902090201000243373D0C3A2E212F742B47173A000201323A0B200C07003FC43F3CDCC0C010CC76C43DF4181AC8111239390110D4D83910D4111239072B1076C0180110D45D71C8D00776D0180710ED111239111239313000711307273E0112361236373E01333215140E0307141633323E03373E01333215140E0315141633323637070E012322263536370E01232226270E021514C0A1

1E082C5A2943280640850F13183E2517062151

437E43293A18428911182743331D1123196E1E0456BE383527040B31A06B4E780C0D0C0DFE743C1E5CCD0167B8011CBD3B101E06034AF1AB7144767095CF9FF2630E1C0E056BC3BF9729444A4B1D2D587957532E38779B5F533E5E8B326A00020035FFEE042705A000180024003A401C04221F62131962000C210D00402522040416091C160B0D210C091003003FCDD41AC83FC811123910C801101AD4D41AC810EDD4FDC0C0313013341224372E0323220607273E0133200011100023222637141633321211342627

22029B760106D32F4E73834D3A7D251924E97001100165FEBDE6A4BFEE5A527C901F15D2B201669D0110C421505A572B422E18488CFE5DFEBDFEDEFE56DA90928F013B012F59952EFEAB000001006CFE6F05390577001500534027000B0B14020C634015211214020A470A400121040202000B0B1201010A0C15120503041311121710D6C8C0D4C0C810D4C8C83C1112392FC8003FC41AC81ACC76CD1810D4C41AC81AED111239192FC030310901352113232E022321090121323E0137330321350297FDD504961C4C

0A455966FE1301A1FDF40272665946094D1BFB4E01DC037A21FEB8505A25FD63FCE11B5C51FE651700010069FE8A067E0577003D0037401E08352F030E55093430030D001F551C551D023D571E2F273F00571D0E143E10DCC8C8ED10D4C8C8ED003FEDEDC8D4173CFD173C313001111716171E02171526232207353E02373635112726272E02273521150E0207060F0111141716171E02171526232207353E0237363F0111021504010A04132961A5A295806D260F050803020904132A6006155E2B13050901040308

04020D236E8096A0A65F2A14040A0104050EFB4FC5701E0D100803580707580409133A63BE0348C1731D0E100902585802080F0E1E6EC7FCB8982B83100B0D0904580707580307100D1F6DC804B1000001FFC8FFEE047603D0003A006C402C2A27631A1A10302D38305735400121353000010046400F2110213C0049003506350B1D240B14472D38F8172AB801C2B70CF84010210F0607003F3C1AC01AF4FDC0F43976C4183FC93F111239762F180110C4D41AC81A76D45D18391AC81A2FFD39391112392FFD393130

0327343E0233321633321617323637170E02070E01070E0115141633323637170E0123222635343637222627140A01150E01233236123722061424283C6A602CF932455C3E6A6157180C243C0C12362F04074A5E18320C0C3B9F306A63030252B03507072CA02A01262D105A6601E2102EBB9A4F1804020E1C0E153F6B170607052CA73DBFA80A082928327E805FEB9C040A4AFEDBFEB30C0E20F1015DAE75000001FF41FDF802F005F3003C00244011330D25140D07001B62033B621E1E0A283D10D4D4392FFDD4FD

003FDC39D4DC39313037032635341236333216

151406232226272E022322070E011514171316151406070E02232226353436333216171617161716333236373637363534AB0E0676CF6D4F5844332331100E13100A19141B15051005323527607C415358453625300C080E070A070912230C09060EFF01799363E70119854F3C3546171612450D171F95784B7BFE6D70D4A1E85943542D4D3933421C120C361308071B1C153167879200020061032102D80577002F00410081400B0A4001410B0A3030470A0AB8037B401027221427100129402121224727102938B8

037B402013420A040B2927262C220B41303B3340013C002C04643B0F1522212164331D02003FC8F41AC83FC8F4D8D41AC81A111239393911123939391112390110D6EDD42BD076D0181A01C81A10C82B102B1076D018111239393130017101170E0123222635343736370607062322272635343E0137363736373633321617371706070607030615141716333236032E0123220607061514163332373E01373602C90F5D6226161506012B5A734B411A11151A3A0E083D711A233124402A3B15081702073E0C060506

091F72163E17263E1B39120B0E121D78192503C0244A30171C1A1F05B99E5538151C36347E8B140C2A4F0A0E0F1222101A41091DFEFA30100B08061001840C0F3454B44B12160D15962C420000020068032302C305770012002600234009216A0602166A101509BB037B001C0013037BB1002710D6EDD4ED003FED3FED313013343E033332161514060706070623222637141633323E0137363534272E0123220E01070668373B69724864623335465A3E52645F993D2E263D32111B0A0D3123284034101503E1489F

414826615D4C9E324221175F4D36402750365759311721222B5C425A0000010039000005ED05A8004D0067B900430127B31C023900BB012700280011012740112B82290E821036F503F538010503340828BA012700390139B73F31323F75221511BA012700000139B64808074875154E10DEED3CC810F4ED10D4ED3CC810F4ED003F173CE4E4D4E43CE4FE3CFD3C3FED31300111262322072627331617161716171637352E023534373E0137363332171E0215140E0107060715163736373637363733061526232207

1136373E0235342E0123220E0215141E01171602A7A96D64E5010E530C0203070F3D86BFA3E7714232A96AA2B0B8A972A95D5F9C5A4661B37F520F0B040107530FE56475A14B273C542F75B96F6F9B6330335A3B23017FFE81070768E545070B050B060B025A1794ED8997795A8B28393E2D9BD08082D580221B0D5A030B060D09210C25E5680707017F0F172372AD6DADD2605279AE6473B3711F1300030049FFD8059D03CE00390049005600A74010130013392000200120390527081A513ABA01500015011F400F

315B4A4A052445692A5B1A7D240700BA011F00

0103104011377D055B515D0B0B0827424E3A73316315B80192B54A474A2D0E01BA022400000233B242A12DBB034A000E001E0349B220731FB8024640094EEC0F0E600E020E5710D65DEDF4E4ED10FDEDF4E4111239762F18E5FDE411123939003FEDF4EDFDED3FEDF4ED1112392FE4FDE5111239393130005D2517060706232226270E0123222635343E02333217363534262322060F012F01373E01333216173E0133321615140604070615141E0133323601363736373E0235342623220E01070527220615141633

323E013736054019BF86584B597A1F7AA04F606D4875CC9A1223087A6F1E3E2134250F4725874574AD2362B567636578FED487122249293AB2FE9E4447341A223D252E342A4B381CFEE9419E9C3B3A3960440F18EF398534225A5E6E4D70614F90542D013727707B080888079A331B254B5B50575D50648B600B7B3D324C264001540918120F133E562425392B5250D301825A3E40325634570003001EFF940431041D001C0026003400C9406F1B011B272627341D3411100E11101C0E0E111D1D342626270100011B

000F1D34210E1102130B272B26011B0219040426341304190B21B40B4010210F0B072B69194000211C190B1D34210E1102130B272B26011B021904192B210B041304266204401C210004346213400F2110133610D6D01AD01A10EDD4D01AC01A10ED111217391112173911123911121739111239003FD01AC01A10ED3FD01AC01A10ED1112173911121739111239111217391112390708103C083C083C083C0708103C083C083C083C313017372E013534373E03333216173717071615140E03232227070126272623

220706021F01161716333236373637363736271E7A181C2D2050B3A35F344C4F6F3D6C40455AB9B068774D7202A31A1D2B3D5135484802111B202B402D401F2B1A22130901378A2471337B996D6F8344111F7B397A4D7B7EFC848244347E037A32141E3D52FE96566E3D171F2027384D668D4857000002FFF3FE3202CD03CD000B00330065403426112612262B262C04400521100C200C300C030C460C22091D181F2203A209070692001D4033210C31CD0F0F261D401C211F1D15B8010CB1263410C4EDD4C01AC81A

1112392FEDD01AC81A10D4ED003FEDD4C0CCC4111239762F5D181AC81A3130015D011406232226353436333216031E01151406070E0115141633323E01371706070E0123222E01353436373637363736373635342702BC573E38415843383BCF38213E507E486452325B3126413E194E7D496AAD583B523E71511A31130E2C03534F6041394E613DFEA93643253468507F7F3F425C243F5C0A9B6530274A8C5B4D7D48374B37162922191A2E250000020006FE31020F03CD000C001E0044402A1A0E1A101A112B0E2B

102B1145154516541554160A0E1E1000920740

19211A1F161A190E1E0D04A20A07003FFDDAC0C02FC0C00110D61AC81AD4FD2B39393130015D01140E01232226353436333216031706070603020706070E01072712373637020F20443138415049363F971A05020C19270103036A694817C03D1A0B03582859334037456D3EFEA01225196EFF00FE75152144111614130262C857380001005E00F2045F03200005001CB10002B80106B303030601B80106B1040710D6ED10D6002FEDCC303125112135211103C9FC950401F2019797FDD20001FFE100000453057700

0A00454021010304040006050A0008090602090606070A0401010003050A00000703070C030B10DC10D61112392FD8C011123910C011123910C0003FCC3F3CC81112392FD4CC30312103233525130133152301015FDBA30160A3018FE0A5FE2502B24426FDF6046551FADA0001FFF0FE74041C0598002B0062402F201F140C0B000A0B0E6224221F1F140004030014162115142D2429220A070B220B1F0E0E29110300072915141C1103003FC9C0C4D4CDC0C41112392F3CDD3C1112391112390110D4D41AC810D4D4

C81112392FC0C0FDC0C01112391112393130033E013F011E013332361B0121372136123332161707273E01353426270E01072107210E020A010623222610031C0F14122C1E4149284DFEFD06010521D4C84E7705552B03052F394A591F01240AFEDC0C1A1F4BA4C04E1221FE901F5E2B021B1EA60117029952E1010E2818A1090C150D293D0105D0D75259CCADFEC6FEC39A0D000002000F0130045503AE001800310078B71A9419279426A41DB80106B32F934722B80106401119A4002AC02A022A040D940C019400

A410B80106B309934715B8010640160CA40F04010419400CA7211A0D33264000A72127013210D4C41A19FC1A18C010D4C41A19FC1A18C0002F5DE4FD76F418FDF4EC10ED10DE5DE4FD76F418FDF4EC10ED313013273E0133321F011633323637170E0123222F01262322070605170E0123222F01262322070607273E0133321F01163332366455657C3B5B64B45048375D3C4F42943A4D69B9643B34332203584F42943B4C69B9643B3433224A556580395964B45047385D02855F7D4A2245213A515A686026422323

17845A68602643222218585F7E4B2444223A00020022000004C2058F00120015004B402909140B151B15032D1501131515060503141310F50E000214400E211F0D010D1505064913400021011610D61AC81AC876D418DDC0D45D1AC81AC8003F3CE4CDCD3F3CC8085D3031015D3327361B0233161B011617161707242322072721014E2C1AAAA5958A2A84C32F2E202A36FEB795AFA29F02B6FE9D523A01BB01BB018D6DFEB0FE0F766F4B5F520702A0038100020059006403BA039B000B00170042B40410AC0612B8

013DB6081408078C0405B8010DB206DA01B801

30B51214138C1011B8010DB312DA0C1810D6FDF432F43210F6FDF432F432002F3C3DF43CFD3C31300135253637170113072F01262535253637170113072F012601E0011A4B482DFEF9AF3210AC84FE69011A4B482EFEF8B03310AC8301F12DF7434327FE8EFE801E13D294132EF7434327FE8EFE801E13D2940000020058006403B9039B000B00170042B40814AC0612B8013DB6041014138C1011B8010DB212DA0CB80130B50608078C0405B8010DB306DA011910D6FDF432F43210F6FDF432F432002F3C3DF43CFD

3C31300115050607270103371F01160515050607270103371F011603B9FEE74B492D0107AF3210B67AFE8AFEE64B492D0108B03210B67A020F2EF7424428017201801D12DC8A142EF7424427017301801D12DC8A00000300A8FFE6071B011F000B00170023004640120F1B1B03A209152121090A2547474A12920CB8017CB21E9218B8017CB50692004924D7B9014900182B4E10F44DFDF6FDF6FD4E456544E6003F3C103C4D10FD3C103C313037343633321615140623222625343633321615140623222625343633

3216151406232226A85B3F3B4859413D4605555B3F3C4859413E46FD565A403B4859413E45724C61483F506247454C61483F506247454C61483F50624700FFFFFFBB0000057A07420222002400000007004301D00178FFFFFFBB0000057A06D7022200240000000700D901900149FFFF0099FFDD064F06E3022200320000000700D901FF015500020061FFDE0810058F0048005D00A140595375195E062426100D0449395D474949573944143A3A433944444710003901392C005505012C2F552E2C5F1024495D040B

2740F543428D3EF53A3C3C46382E34E2385F2A27024F5F2003575F1509014744F546B506F5080B08003F3CE4FDE476C4183FED3FED3F3CFDE0C41112392FC4E4FDC4E4111217390110D6D4ED10D4C0ED10D45D2B76C0180111123939102B1076D0181112173918D00110D6ED313001330607060F0106232522040727363F0106070E01232227261134373E0333321E0117363F013325321F01060723363534262726272E0107031633323717072E01270316332036013635342E012322060215141E0133323E013736

370724500F171F0B094B63FED806FEB7130C0B071A42263B9769E67E9B37277FB7F688579B622C08050E6102271F500B212642070C0A204615F71A78612CAC6E09216A96A2793645013351FDA21E4E92588FD397448B5A559B671D152501623163863A08060302010E1B1354421A292D77910106A0B27CD1A55F2A43383F430803030E70C64C452114051007010401FDEC020F0E67090602FDBC043402BB894D408249C2FE23DE839A5A4A7A523DA80000030062FFDA060703D0003100410054006D4039071A283A07

35002C1A424D422601224A26260B4D691F3D69

165B1F0635690B2C7D045B0B0B32620F554AA1225626732863803A013A463A5556111239762F7118FDE410D6ED10D6ED003FF4ED10ED3FF4ED10ED12392F01111239123900113939113912390111123939313025170E012322262706070623222E013534373E03333217161736373E0133321615140604070615141E01333236373E0125141633323E011235342623220706022536373E02373635342623220E010706070605AF1ABFD34F4B72286E5F47516E8D412F1E55ADB15C7456332D55263B6E37616389FEBD

5F0C23472F23462B118BFBB760503E5454345D534E31465502956C1D33463D130F352C213F33161F141BF33A8559403F4920174B95548B9C62757C48311D463C1520215D516FA078065D2B304C251112084E40747037A7011056806D3045FE9C371B0C14334E33272230371D39314545660001000201B60424024100030014B7010002030501000410D6D010D6C0002FC8313013372107022603FC2601B68B8B000001010C01B60719024100030014B7010002030501000410D6D010D6C0002FC8313001372107010C

2605E72601B68B8B00020087033804150589000E001D0069401E060206031602160316111612270327042705591159120B13041809211708B80374400B401001210F000213401718B8029A400A0F212010011004400809B8029AB30021011F10D41AC8FCC81AC8D65D1AC8FCC81AC8003F3C1AC8C81AFC3C1AC8C8C0C83130015D0117060207060706072736373E01372517060207060706072736373E013703F71E35760C1921902D1D5418534B31FEAF1E35750C1922902D1D5517534C300589224AFEC66B020927

0E209C278A6B3643224AFEC66B0209270E209C278A6B3600020087033804150589000E001D0075402809020903080A080B080C091109121A021A031A111A12480A480B590A590B690A690B111001210F00B80374400D13044018092117080213401718B8029A400A0F212F10011004400809B8029AB30021011E10D41AC8FCC81AC8D65D1AC8FCC81AC8003F3C1AC8C81AC0C0FC3C1AC8C83130015D1327361237363736371706070E01070527361237363736371706070E0107A51E35750C1922902D1D5517534C30

01501D35750C19228F2D1E5518534B310338224A013A6B0309260E209C278A6A3743224A013A6B0309260E209C278A6A37000001009B03390266058A000E002EB304092108B803744009400121000204400809B8029AB30021011010D41AC8FCC81AC8003F1AC81AFC1AC8C031300117060207060706072736373E013702481E35750C1922902D1D5517534C30058A224AFEC66B0309260E209C27896B370001009B03390266058A000E002EB2012100B80374400A04400921080204400809B8029AB30021010F10D4

1AC8FCC81AC8003F1AC81AC0FC1AC831301327

361237363736371706070E0107B91E35750C1922902D1D5517534C300339224A013A6A0309270E219B278A6B36000003000C002B0459047B000B000F001B002CB31692100FB80106400F0C0092060C0D130392190C09091D1C1112392FC43CFD3CC4002FDEED10FDDEED3130013216151406232226353436012115210532161514062322263534360233364D4D36374D4DFE10044DFBB30227364D4D36374D4D047B4D37364D4D36374DFE2498D54D36374D4D37364D0002FFF8FFF403FD059F000300070028401404

0007050303010602030503060400030207010810D4C919DC173CD4C918003FC9DC173CD4C105090601FAFDFE02020203FDFD0146FEBAFEBB0C02D502D6FD2AFE3601CA01CDFE33FFFF001EFDD5045105600222005C00000007008E00B4FFDDFFFF006E0000058006D80222003C00000007008E011C01550001FEACFF1202A9063D0003001D400D01000302020321000403000201002F3C2F3C0110D41AC8D407103C05013301FEAC03827BFC7EEE072BF8D5000002002C0001048E04630022002E017840C085008501

850585068B128B138A168B1795009501950595069A129A139A169A17A400A401A405A406AC12AC13AC16AC17B400B401B405B406BB12BB13BB16BB17C501C505CB13D601D605DA13268309830A830E830F8A1A8A1B8A1F8A209409940A940E940F9A1A9A1B9A1F9A20A309A30AA30EA30FAC1AAC1BAC1FAC20B40AB40EBB1BBB1FC40AC40ECB1BCB1FD50AD50EDB1BDB1F240F101211120F002220212000211109080607060917181A191A1719070F12171A20000609080315104019BAFFF00019036EB2211811BA03

6F00260370B5152140081008B8036EB2212207BC036F00150371002C03704011030F12171A20000609081D0C0740111011B8036EB2211008BA036F00290370B30C224018BAFFF00018036EB2212119BC036F000C037100230370B11D2F10D4EDECFC3C1AFC381A3C10EDF43C1AFC381A3C11121739002FEDECFC3C1AFC381A3C10EDF43C1AFC381A3C111217390708103C103C08103C103C0708103C103C08103C103C3130015D005D013E01333216173717071E01151406071707270E012322270727372E01353436

372737131416333236353426232206017B33713F3D7232C689CB2121221FC783CC30733B7965CB86C81F21221FCC89BA8C63638C8C63638C03982022221FCA86C833703F3D7232CB86CA1D223FCA86CC33703D3D7132CA86FDD0638C8C63638C8C000001005800640233039B000B0028B204AC06B8013DB50808078C0405B8010DB206DA01B90130000C10F6FDF432F432002F3DF4FD31301335253637170113072F012658011A4B482EFEF8B03310AC8301F02EF7434327FE8EFE801E13D294000100570064023203

9B000B0024B208AC06B8013DB50408078C0405

B8010DB306DA010D10D6FDF432F432002F3DF4FD31300115050607270103371F01160232FEE64B492D0108B03210B67A020F2EF7424427017301801D12DC8A000002FF07FDCB050005C90065007100FA405F1849170062614862036262634917144948471017170C5340562155530C4010210F0C2266B76C6C253C47383B3B632625141026322A2610472522732225262A042D1F3E3C3B3804413540312132742D5D350B040A031718144951486159626FB80136401169000F0C145D0A01400121410003486200B803

79B2184703B80365B71F075653595D510F003FEDC0C43F3F76C418FD3C3C1112391AC81A3FEDC0C43FED1112391112391112391112393FED19F4181AC81A11121739111217390110D6D0762B18D0D001C8102B2B10C076D0180110C02FED10D4D41AC81A10D4D41AC81A1112392E2B76D018C02B10D01112390110C81112393130133736373E02373E013332170E010F012E0123220E010F0117323736373633321615140706030607061514163332373637170E012322263534363713363534262322070607062327

0302070E020706232227363F011E01333236373637363F0113262322013436333216151406232226570CB31B142B6B856364294B3E222B0729215F23172A22162BB474432969371219250B1267320A07130D1422403815C49D2D1D2D13326E19170C0A1C260F192BE84056422C65AD3E2B312721211F1E12392016280B130F1D2326764429290384513B323D4E3C353C0338333A0C6E6071634A2C1B39932D013A391D4561C90109051D0F261F222B47FEAF9F2B1C0F1115122129348F4B322D2167A2016C4F0B0F1A

0A0E020502FEE1FE84C784ABA71F16115E7D07272F16131E4178B1B902660201C341533D3247573E000001FF05FDCB052C05CF006500FC4075262622194945442B454C4545632C22142C22471021215536403921383619401A21175719555A120F470A0E0E635C5A14105C015F5C475B104059215A675F5C5B03625A0A0E0F12040617179A57CE405A2159004000210174625D060B4D534C21221D2C342B443C451A551D5D5301452B404A212749B80379B322F5254CB80365B539363C5D350F003FEDC0C43F3CF4FD

3C1AC81AC4C43FEDC0C41112391112391112391112393FED19F4181AC81A3F1AC81AF4ED11121739111217390110D61AC81A2BD076D018D001C8102B2B10C076D018D00110D4D439391AC81A10D4D41AC81A1112392E2B76D018D02B10D01112390110C81112392F3130251706070607062322263534373637121336353426232207060F012623220E020F013E01371707262322070302070E020706232227363F011E01333236373637363F0113262322073736373E02373E01333217060736371706020706151416

3332373604A4198C3953361C13213109073582

381C19211F2010081E534E14211F1915246F6031091F4D5932284056422C65AD3E2B312721211F1E12392016280B130F1D2326764429292A0CB31B13297793585E3627280C06FA7C1828FA2005130E0F120EE335602232130A39312B3223C701E801018220131404374807731124555BA302070811670305FEE1FE84C784ABA71F16115E7D07272F16131E4178B1B902660202333A0C68647C6B41240D1E2323311882FC52A21C161216090700010050FF8C03EF0577004300B7B608F50B471AF517B8037F401105F5

00471DF52020142C3EF5414726F523B8037F40273BF5384729F52C492C142F12F50E144432F5352F0208053E3F194F19023B2314172023472F2C2CB80254401A380B1435380E004147380B0B381D1A2930004000021E383845441112392FD85DC0D0C010D00776D0D0D01810C02B10C076D0D0D018C00110D85DC0D0C0003F3CE410D43CE4111239762F18E476D418E4FDE476D418E41112392F18E476D418E4FDE476D418E430310116333236370E01152226230E01152E01232206073612372206233E01351E0133

3E01372206073E01351E01333E01351E01333236370602073236370E01072E01230602024718363E8A1C08191BDC3012250E481E1F3A190E510829EE140A173F974B1331152AA76007142DB2491023103F1919480E0F410A49DB1E09150348AD3F113701A3030806146A1A0C66FE32020201032C01392F0C19681D070759FC810503126D1B060854EE37020404022FFEEF3907051A6C1C080C4AFEC20001006601D4019A0308000B0016BC0000027F00060003027FB1090D10D6FD002FED3130013216151406232226

3534360100405A5A40405A5A03085A40405A5A40405A000001FFB1FED5017C0126000E0032B2012100B80374B40440092108B8027CB40F04400809B8029AB30021010F10D41AC8FCC81AC80010FD1AC81AC0FC1AC831300327361237363736371706070E0107311E35750C1922902D1D5517534C30FED5224A013A6B0209270E219B278A6B36000002FFD8FEDA0366012B000E001D0067401609020903091109121902190319111912081001210F00B80374B71304401809211708B8027CB41E13401718B8029A400A

0F212F10011004400809B8029AB30021011E10D41AC8FCC81AC8D65D1AC8FCC81AC80010FD3C1AC8C81AC0C0FC3C1AC8C83130015D0327361237363736371706070E01070527361237363736371706070E01070A1E35750C1922902D1D5517534C3001501D35750C19228F2D1E5518534B31FEDA224A013A6A0309270E219B278A6B3643224A013A6A0309270E219B278A6B360000060046FF8308530598000D0034004500550063007400B940102E1010450F0E3434400E210F0F21066FBA0233005C02ABB4677F56

0040BA0233000602ABB4387F002146BA023300

1902ABB44E7F217572BD01210043012100590003035DB40B0E0F466ABA0121003B0121B5610B4A164013B80121400B21292B10342E262B1E2651BC0121001E035D00490121B12603003FEDF4ED11123910D4C4C02FC01AFD1AC0762F3C18EDED76D4183C10F43CEDED0110D4EDF4ED10D4EDF4ED10D4EDF4ED1112392F1AC81AC40710763C10C0313025341233321615140E022322260523010E01232226271E0115140E0223222635343E0233321E02333236371E0133323637030E0115141633323E023534262322

0601342623220E0215141633323E0201341233321615140E02232226130E0115141633323E0235342623220602F7F2B37770255AA26B7B85FE315A03492A61343A54150C0C2959A35D82835D847F48345C2E7D39527F380812090B160AE51F15393D366E462339354671FE6F2F393B7345213A3738624B26035AF2B37770255AA26B7B85DD1F15393D366E462339354671FCBF0124985F4CA0A8718FEF05731D19171916401E539B9E6C8B876DDB703425343A585103050503FC304C89464550779BA33B4C577C026F

535A6DB08F4F434F60A49DFC9DBF0124985F4CA0A8718F01564C89464550779BA33B4C577C00FFFFFFBB0000057A0736022200240000000700D801D00178FFFF0012000004DC0736022200280000000700D8011C0178FFFFFFBB0000057A07400222002400000007008D01D00178FFFF0012000004DC06F50222002800000007008E011C0172FFFF0012000004DC074202220028000000070043011C0178FFFF00000000039607400222002C00000007008D00470178FFFF00000000037107360222002C0000000700

D800470178FFFF00000000039E06E10222002C00000007008E003B015EFFFF00000000036107420222002C00000007004300470178FFFF0099FFDD064F07580222003200000007008D01FF0190FFFF0099FFDD064F074E022200320000000700D801FF019000020000FFD10595067C0021002E0039401B2E2B0221050217141A2E1615040305242B2B2424101E0D09101E2F10D6D6C4CC1112392FCC11121739007D2F183CDC2FDC3C10DECC3130001633323633321716170607061514161706070623222623220623

22030235341233001615140607060706073E013701E2D5232DCC4B7B6036355025438E5B2658858334B73F3FA7349D9797E7B0027A023C4138372347029BB304F23E46422641443560747FCC1B7B86C94245010A0107FDEB0128017D140A40984137130B0698DE29FFFF0099FFDD064F075A0222003200000007004301FF0190FFFF00A6FFDD06B707580222003800000007008D01D50190FFFF00A6FFDD06B7074E022200380000000700D801D50190FFFF00A6FFDD06B7075A0222003800000007004301D5019000

01003BFFDD025F03CC002B007040282215150E

47090D0D6323221410230125231047221F2D2022232504281C0F0E0D0904120640142115B80267400E1C125D1C074000210174285D060B003FED19F4181AC81A3FED1910F4181AC81A11121739111217390110D6D0762B18D0D001C8102B2B10C076D01801C82F10313025170E010706232226353437363712353426232207273736373637363332161514070602061514163332373602441B4FC82F1E1C222C090B29540D0A288F198969243A2D1C151825080D761C110A0C1A3BE7353881110B33352A2D3C9A013E

380D0E6535654A14200E082823262940FE52851510120E1F00000100AA0461032A05BE0006003A400B0301020400050604044000B8013AB2800502B80206B60100040402060710D4D4393D2F18C0C0003F3C1AFC1AC801111239391112393931300133132327052301ED8DB05AB2FEF16505BEFEA3CCCC000100B604A30379058E0018003EBB000E011A00160380B38F040104BA032C00090380B2126400B80206B30D99400EB901FC0100B30099011910D6ED1AFD1AED003FF4ED7CFD5D18EDE6313013233E013332

16171E0133323637330E0123222E02232206FF491D7648224B543C3014192E1848157B4B1F37A031141E3404A3796F1320170C253472770D3F0D2900000100C204C8036805460003001AB900000105B2030201B802ABB200030410D632FD32002FFD313013210721E202861FFD7905467E00000100FD0461037605AC00100028B10700BC024400040256000B0206400A07994008DD8001CD001110D6ED1AFD1AED003FFDF43C313001331E0133323637330E0123222E013534010148086A6A5D8A204A2CC673547E42

05AC5B64655ABE8D427B481B00000101A1049202920583000B0018BD000001340006020600030134B1090C10D6FD003FED3130013216151406232226353436021A32464732314746058346323247473232460000020109043A02B705A5000E001C0030B549094916021A410B019A00030014019A000A02060017033B00060011033BB10D1D10D4FDDEFD003FFCD4FC31300171013E0133321615140E0123222635341714151416333236373426232206010A0A7B6759680A8060566E6E2E2A3142072E2D334404EC5D

5C4D490D6068534A0E0C07032C3A565430364D0000010009FE4301D90007001A0038BF000B0376001101B10018015C0004012DB200080EB80377B300086E14B80229B40100001C1B1112392FC9F4FD10F4003FF4F5FEED3130013733073633321E0115140623222627371633323635342623220727FD535D18183C4E2C807E3A593F2850403439312D1C2717078905234523476E141D3F213224202C09180002009D046103D405C8000E001D004F4024291B291C291D381B381C381D491B491C491D591B591C591D0C

2A002A01290F2910041607410A01E8000F0000

0206000A01400001028800180140B1101E10D6EDFCFD003F3CFD3C3130015D005D01233F013E0133321615140607060705233F013E01333216151406070607025057F33D1C2312273320331E09FD9A57F33D1C2312273320331F080461FD3F1A1131231B2A1B11059DFD3F1A1131231B2A1B110500010042FE7001E7FFF200160038401C5B0F690F790F03010014474005800D090D400E0E010800210111081710D6CDD41AC81112392F1AC8003F1ADC1A76DC18D4C83130015D051706070623222635343637363733

0E0115141633323601B7305A2D464F41481E251C58585329352B203CD81A591B2A473D2945291E494A46202A351F00000100F70461038905BF00060028B2400300B8013AB2800205B80206B60506020204000710D6D4393D2F18C0C0003FC81AFC3C1A313013331725330123F75ABD011962FEB78D05BFCCCCFEA200010026000004A60577003E007B40450C08363B82044708820505571C20141C101319821C201047232E2B55302C502C602C032C40192023140504083B04370C23F52B255F2E33F5303755360814

0C550FF5130D02003F3CE4FD3C3FED3CF4C4FDCCE411121739111239390110D65DEDC0D4762B18D0D0F001C82B102B10E076D018F001C810C8313001072725363713363534262F0137320433323F0107232607060706070607251705030607163332373637363733060706232227242322073F013E01373637360120E218010C220D2A0316247F0C39011532353AA30B16721E0E090D1D2314012016FEB9470F0A9862A95D250E133F4838103842509EFED82CEC830B661011050A1405023E5F5471C44F01101B1618

150409450B03084B010F07111A9BBE7879558AFE61594B0A1609121ABDEA7E0804060A3E1A05100E196D180001001CFFDD02EA05CA003300EB40B22A322A33340D340E340F440D440E440F683268338A238A248A258A268B339B33AA23AA24AA25AA26B51FBA23BA24BA25BA26DC0DDC0FDC10DC11DA23DA24DA25DA26EC0DEC0FEC10EC1125061E2E1F2E20243224334B1F4B20493249335B1F5B2059325933691D6D1F6D20761E761F122A252147181C1C6301301410010F0601473010402D21102E202E602E802E

902E052E35060130030A2E181C212604142A2A9A2BCE402E212D00400E210F740A5D140B003FED19F4181AC81A3F1AC81AF4ED11121739111217390110D65D1AC81A2BD076D018D001C8102B2B10C076D018D001C83130005D015D010306070607061514163332373637170706070623222726353437363713072737133736373635342E012737363717030607371701F33C3003080202100B102236401EBC5131251E23121A0F170740C713EF45170903021127730ADBC419450E32CF140316FEE6D5132E180E0B15

14111B31368034140E17203932538021011E69

477D0138742F19100C161608013B1A4416FEDD3EE26D4600FFFF005BFFDD046C074F022200360000000700E100E30190FFFF0035FFE60388059C022200560000000600E1FFDDFFFF0006FFFE0565074F0222003D0000000700E101550190FFFF0036FFE803B4059C0222005D0000000600E1FFDD0002021D000002BA05DA000300070018B50100040A0307B80106B200040810D63CFD3C003F3F31300111331103113311021D9D9D9D038A0250FDB0FC760250FDB00000020017000006090577002D0045008540410D

06242B820447060657422F144230822F4710423B751018301850180318472F304203434403028D2E450103000706042B0005250D42F5405F0D5511F5130E0230B8FFEE400A30335F255521F51D2408003FC4E4EDFDC4383FC4E4EDFDE4111217392F173CFD173C1112390110D65DEDD42B76D018E0102B1076C018E001C810C831300123373312373635342E012726233716333237363332041615140206042322272623220F0137363736373E013736250207171633323736373E011235342E022322070321070115

C315C0340A080F1B365F050D61856F9FC63EC901019174E9FED7AD399E5C5F4B2EB40658190B070B12250E01224B15CA372F70523A2B44663D326D967371575B01621502B06A012D4D3A261414080407480B03046FF9AB97FEB6FA8405030108400B0D060B0F51C54BD7FE61911A0621182C45CB01257E56AD6F2D0CFE0F6A0000020062FFDD045D05CA0028003D0091404B22072209260D54015402051801190229013A014A0147034B06070B0A0A0D02030C0D01000003010C0D0A1207000326060706263362123D

621B3E0D0A180700030626262318060700366926B80150400900230123062C69180B003FED3F5DE5ED3FC811123911123939111239390110D6EDD4FDD0D4CC1112393911123939070810C0C0C0D8C008C0C03130005D015D010527252E0127371E011725170516171E0115140E0323222635343736373E02333216172E0101141633323E01373E01353426232206070E021502D3FEE727010B2E4A41524C5C44011624FEFB371C28314766AB9F72A099312532259AB5691D231C0C1FFE5860552A47361C262C54512B

5217264428048D8B4783353F2B5F27494C874683533C58D5778BF68473449C9E81906D402F7249070A4F58FCAA5E632542445BF55C5E742B1E2FA7CE4F00FFFF006E0000058007580222003C00000007008D011C0190FFFF001EFDD5045105A50222005C00000007008D00E3FFDD00010019000005280577003F008C401C2E2E333A130E040A0E0C470A0B0B573A3814181E2038473A10003B33B8010F402A25410A0B0C0E05133B3A0038305F2A2A002138E2365F2121001919135516F518140200055502F5010408

003F3CE4FD3C3F3CE4FD3C1112392FFDE41112

392FED111239391112393939390110D6EDD4C82BD076D0C0C0C8182B10C076D0C00110C810C81112392F31302507252205373237363736371A0135342627262737163332370706070E020F0137321E0115140E022322262735163332363534262322070302151416171602C20AFEAB37FEED077D1D0C070F1C476115181F7D0AC78181C7095F12201A09130DF7A9A84C698EA85B2954424935909C848834555142172E1845450808440C050A1692016F023F3A171A0507014A0B0B4A0202030F156649054E915B6BBF

834C10164718F6997A7C05FE39FE893919170604000002FFE5FDD5042F05CF003200460089404B1815042B0D0A82054701820404632B45142B2F822B474515401021118210153B62234845333F3518152B031E292C352904050A03010D0D9A0ED140112110013F5D1E073569290A2F01000E003FC0C03FED3FED3F1AC81AF4ED1112173911123911121739111239390110D6EDD42BF01AC81A10D076D018E0102B10E076D018F0C01112393931300327121312371237363534262F01373637170607060B0106073637

3E0233321617161514020E0223222706070607060706011633323E013736353427262322070E0207060615523B5E2A3B1E031A296A0CBFD91A1B0C084841020A6041329C7334202B12196862CC885C3B393D1C07032534700144635E38534E2D22100C171929387C691A12FDD50F0131010201A2F10156E51510151602023E04541362341EFE9AFEBD0639934635712D223447557DFECD7C8A3E0DF497264204091502A1353C9FA780684A1812141C7EB24F3400000100460203049302AF00030014B900030106B400

0105000410D610D6002FFD31301321152146044DFBB302AFAC00010095008204440430000B007340160A02090B060703080B06040308000501020900050800BDFFDF000001060009000B0201B40306022102B80106B5050309052105BB0106000600080201B200030BBAFFDF000B0106B202000C10D63C19FC18383C10FC3C19FC18383C002F3C19FC18383C10FC3C19FC18383C0F0F0F0F3130370901370901170901070901950163FE9D740163016474FE9C016474FE9CFE9DF60163016473FE9D016373FE9CFE9D

740163FE9D0000010054023002630571001900724011760A850A02560E660E0200050806470505B80373401C0F0D140F10400C210D470F1015101B100F0D15050106150118F51600B80372B70C060808090D0C02003FC0D4D8393210F43CE4DD3C111239111239390110D4C82BD076D0181A01C81A2B102B1076D01801C810C83130015D005D13373637363713072737253637170703061514161F0107262322540D710E220A68E912160103424E21126F0716256D0D626BA10230370A07103502295F1A4D4B14240B

59FDBD260D1512030637030001003502300290

05770023004AB71A23F52140012100B803724014130F210E08130219161A0205010E210F471A0105B80373B2161E2510D4D4EDD4C876D4181AC8111239111239003FCDD81AC810FD1AC81A3CE6DD31301335373E0135342623220607060F0127373E01333216151406070521323717060F01262335AF8074413F1D29140A14273D51425233797D3F3FFEF9010735430C0F0517A72E02302CA779C2433B401011091F3B13AD261974633C803BF60A101D0F51030000010030021D027C05770034008340353500350164

00640104191D191E3501350235033504391C391D391E44014402440344044C1D4C1E0F290E5F136F1302131321310731B8037240151A21022926108F100110102D011D1E022101002D16BB03730026000A0373B12D3610D4EDD4ED10D0D41AC8D4C81112392F5D111239003FCDF4CD1112392F5DCD393130005D015D13373306151416333236353426232207273716333236353427262322060727373E0133321E01151406071E0215140E012322272630273705494044683D482E30121B1C136B571C2536314A223A

5434543648693259784C542F57AF6A434126024FC521163E46765E54420F0D4B04674024181F373F1B8F1F1A2B4F2C396D310B2D5133438C521109000003003AFFFF05DF05760003001D004100CB4018010003020203210000434237343820231F2C212D47381F23B80373400A343C4304090C0A470909B8037340141311141310401021114713101915422D212C2631B80372401D1E3841F53F401F211E080300080201021513111909050A19051CF51A04B80372B7100A0C0B0D111002003FC0D4D8393210F43CE4

DD3C111239111239393F3C3F3C3F1AC81A3CE6DD10EDCDD81AC80110D4C82BD076D0181A01C81A2B102B1076D01801C810C810D4D4EDD4C876D4181AC8111239111239011112392F1AD8C407103C31300501330901373637363713072737253637170703061514161F01072623220135373E0135342623220607060F0127373E01333216151406070521323717060F012623013603828BFC80FE770D710E220A68E912160103424E21126F0716256D0D626BA102B6AF8074423E1D2A130A14273D51425233787E403E

FEF9010735430C0F0517A72E010577FA890231370A07103502295F1A4D4B14240B59FDBD260D151203063703FDCE2CA779C2433B401011091F3B13AD261974633C803BF60A101D0F510300040054FFFF05DA05760003001D0039003D00FC401B0100030202032100003F3E3A26241E232D2B273B24233C3C472323B803734010302A142A2B1036303F04090C0A470909B80373402613111413104010211147131019153E302F36231F243A2B3B4026212F2449241F293D3C272A29B80372401B1E361F38F5371E0803

00080201021513111909050A19051CF51A04B8

0372B7100A0C0B0D111002003FC0D4D8393210F43CE4DD3C111239111239393F3C3F3C3F3CE4DD3C10FCC0C0D8C4111239762F183C1AC81ADD3C3C1112391112390110D4C82BD076D0181A01C81A2B102B1076D01801C810C810D8C82B3C3C2B1076D01112393918C00110C810C810D8C8011112392F1AD8C407103C31300501330901373637363713072737253637170703061514161F010726232201373637363F0121350136371703331707230706171617161707272203331323015003828BFC80FE770D710E22

0A68E912160103424E21126F0716256D0D626BA102ED0C711A14090EFEBD01A4465F13648A0419890F0306040E126909EC1DE1E64E0F010577FA890231370A07103502295F1A4D4B14240B59FDBD260D151203063703FDCD3901110C324F32021A0B1B0CFE000F574F0F1B15060A013904013A018300040030FFFF05DB0577003400380054005801644090030003010302030303040305091C091D091E1200120112021203120412051B1C1B1D1B1E1B1F12343100310131023203310431053C1C3C1D3C1E31333134

45004001400240034004400545334534270A371B1E1B1F1135143611381342185528372A553E5541425A515A520E3508360236353837373821003520350235355A5955413F393E413F42563F573E57473E3EB80373401B4B4514454A10514B5A2926108F100110102D011D1E022101002D16BB03730026000A037340192D594B514A3E3A3F4655564041214A3F493F443A5857454244B80372401539513A53F5523908290E5F136F1302131321310731B80372B21A2102003FCDF4CD1112392F5DCD393F3CE4DD3C10

FCC0C0D8C4111239762F183C1AC81ADD3C3C1112391112390110D4EDD4ED10D0D41AC8D4C81112392F5D1112390110D8C82B3C3C2B1076D01112393918C00110C810C810D8C8011112392F5D1AD8C407103C003F3F3130015D005D13373306151416333236353426232207273716333236353427262322060727373E0133321E01151406071E0215140E01232227261301330125373637363F012135013637170333170723070617161716170727220333132330273705494044683D482E30121B1C136B571C253631

4A223A5434543648693259784C542F57AF6A434126F103818CFC8001F70C711A14090EFEBD01A5456012648A051A88100306040E136809EC1DE1E64E0F024FC521163E46765E54420F0D4B04674024181F373F1B8F1F1A2B4F2C396D310B2D5133438C521109FDC80577FA89013901110C324F32021A0B1B0CFE000F574F0F1B15060A013904013A01830001FFD60000047505540040009440542F2F2A1D100A000608470A09095727351427342A352735471000277027B027E0270427191E551D0019401902194208

090A060401103430318D2EF52A2C2C3C251E27

E2255F105512F51611043C01553FF53D0008003F3CE4FD3C3F3CE4EDFDE4C41112392FC4E0FDC4C4111217390110D65DD4ED10D45D2B76C0180111123939102B10C076D018D001C810C81112392F3130233736373E0237131235342726272627370433253633321F01060706072337342E0127262322070607031732363717072623220702070615141E0117072623222A056C180E11101D5F3D080D2819680C012111015F4F675E310A0718100442020C272E654A524C0D0C513CC18451091B98D9372B3A04061643

6B06AC7F6B450107051133A2021A01583114090D0604073E060501050C1D91592A8D1E1410060D0B2C43FE360205090C630404FEA21B301C1E190A02450600FFFF0098FFDD05FE073C0222002A0000000700DB01C70190FFFFFF9AFDD4043905890222004A0000000700DB00AAFFDDFFFF00000000036107130222002C0000000700DC007F019000010059FE43043D058F005400C5400D442F4A4E02332F3B4E020A5F10B80336B30F160116BA01580002015940091A2F4E27463F3D013DB80276B746D43603302101

21B8027E400A27D4001A091801001913BA01B30007033CB3000EF80DBC033B0019033B0000034E40111A1A521D1D205539565220B2212124F64AB801BDB5C033E0330233B802BCB55241B23C832ABB01CA005201A1005610F6EDF4ED10FD5DEDF63C10ED1112391112391112392FEDF4F4E410F4ED11123939003F3CFDE65D3FFDE65D1112393910F4FD5DFEED5D5D313005073633321E0115140623222627371633323635342623220727372E01273E0137330714171E013332363534262726272627263534003332

16170E0107233635342726272E0123220E011514161716041E01151400020F4317183C4E2C807D3B593F2850403439312C1D27176A6CB43F0B250442020220B064A48F35321583BD455F0142EB5B9D4213160F41020216172472475A854244462B01057B43FED81E6405234523476E141D3F213224202C09189A033B302AD7367215283055B475424A16091D2A3C539FC9012F2E2E49756F281E0D511E111B2746814C495C1C1132418257B3FEC50000010033FE43033D03CC0056013F40692E462E472F482F490429

19381902192F1930164E164F292F29302931254D254E254F6B2F6B306B316B496B4AA32EAA4BB32CB32DC32CC32DCA37D42CD42DE12CE12DEC37EA48EA49E353E354F91CF91D210A360A37025302541C361C372A362A37264C264D0A0AB410B8024DB72F163F160216B403B8033E40201A4A4B2F2E0443260F3F1F3F023F43693C39070021102102212669001D1A0B07B80313B513FE1A0EE40DBA023300190233404A00001A101A021A1A511D2E2F2A324B4A51473F474F475F476F477F470547A10F321F32022F32

FF3202321D22FC21201D801D021D3C302A402A

502A602A042AEC513C3FFC3E303C013C5810D45DD4ED10D4ED5D10D45DD4ED10D45D71ED5D11123939111239391112392F5DC9F4F4E410FCED003FC0C0FDC45D3FC0FDC45D1112173910F6F55DFEED313000715D015D7105073633321E0115140623222627371633323635342623220727372226273637363733171E0133323E0135342E01272E023534373E0333321617060723272E0123220E01151417161716171E0215140E01070601A64B17183C4E2C807D3B593F2850403439302D1D27166F4E63690C0B1102

3E032B8B4A4053272439508C5D36171240A96143427D3C14113C0C307A3A2D4F2826268858172C432835A53E2A136F05234523476E141D3F213224202C0918A31326294C6C2A603243274B25253E1D0F1B37653A3736284069221F205B94632D2E2643273723231810080E3857324064841D14FFFF0087FFDD058307580222002600000007008D02120190FFFF0050FFDB041605A50222004600000007008D00C7FFDDFFFF0087FFDD059B074F022200260000000700E102120190FFFF0050FFDB045005BF02220046

0000000700E100C700000002004FFFDD04E305C800410059014140AA5B535B54A423AC53AC54053C283C29461545204521445344545903590459055B0A5B0B571457156B036B0466147D037D047A058B038B048B059B039B049B05AD29AD2AAD2BAD2CA552A553BC20BC21BD29BD2ABD2BDD05DD06DC0ADC0BDA2CDA2DDA2FD956D957EC04EC05EC06312F5555424D2F352E2A2E3042058203414742426316141410164D6210359035D035F03504350E211716471410400D21300E500EEF0EFF0E040E5B1200B80230

403610032F2E320503410A17141615041A0E55594250452E2D2A4104323F0A9A0BD1400E210D0045693F0640202121741A5D270B505D320B003FFD3FED19F4181AC81A3FED3F1AC81AF4ED11121739111239393911121739111239391112392F3CFD3C0110D65D1AC81A2BD076D018D001C810D45DED102B2B1076D0C018E0111239390111123911123910C83130015D005D01233733363534262726073736371706073307230207061514163332373E013F0117060706070623222635343736130207062322263534

3637363736373E01333217072E012322070607060706151416333237363736373E0137033DF510F00E1018245F0CBEDA191430BF11BE8B150F0D09050609261947139D10442E1D1B1E2C0C05478AC0794E344B3F2D201C155090753D395019294D364C251A202B2330141114172E2D4345334F0E04384D562B10130506013D0454134FE14DFD647D5721111002021612323C740A2D120B332D233A180125FEFD996160677FFE5F43221836612C157713101A13465E82B982281C0B182F446C4DC445000000010000000100009BDC33015F0F3CF50009080000000000



AA00990556001506AA009705C700110473005B04E30076063900A60556008E0800009005C7FFED04E300730556000602AA005604D9012B02AAFFB004D900810400FFF402AA010304730050044C006C038D005004730051038D003F02AAFF100400FF9A0473002102AA003B02AAFF880473005C02AA008A06AA002904730025047300650473FFE5044C0045031D0032038D0035031D005E047300310473003606AA00320400FFF00473001E0400003602AA002204D9021D02AA002F04D9006A05C7FFBB05C7FFBB057B

008704E300120639FFFC06AA0099063900A6047300500473005004730050047300500473005004730050038D0050038D003F038D003F038D003F038D003F02AA003B02AA003B02AA003B02AA003B047300250473006504730065047300650473006504730065047300310473003104730031047300310473009E0333004A040000790400FFD80473006404D901480473001E0473FEF205FA002405FA00240800003902AA017402AA00CF0464002B078DFF8506AA006805B4001E0464002B0464002B0464001A040000

1A049C000C03F4001A05B4006C069600690464FFBC0231FF4102AA006102AA00680625002605E700490473001E038DFFF302AA000604D9005E0464FFE4040000170464000F04E500020400005904000058080000A80200000005C7FFBB05C7FFBB06AA0099078D006106390062040000020800010C04000087040000870239009B0239009B0464000C03F400080473001E04E300730156FEAD04D9003C02AA005802AA005704E3FF0704E3FF0504730078020000660200FFB10400FFD80800004605C7FFBB04E30012

05C7FFBB04E3001204E30012031D0000031D0000031D0000031D000006AA009906AA00990652006906AA0099063900A6063900A6063900A602AA003B02AA00AA02AA00B602AA00C202AA00FD02AA01A10473022902AA000902AA009D02AA004202AA00F704E3002602AA001C0473005B038D0035055600060400003604D9021D063900170473006204E300730473001E055600190473FFE5



0B39B739C339CF39DB39E739F339FF3A0B3A173A233A2F3AFD3B093B153B213B2D3B383B433B4E3B593B653B713B7D3B893B953BA13BAD3BB93BC53BD13C593CB93D543E093EFB3F2A3FAC4064415F420C42D642FD4337439344BB458445F5462E467F46D147DF487F48DA492D49A54A324A9B4B3F4B8C4C304D014DB84E394E914EAF4EEA4F634FEB503B508D50DF5138513851445150515C523A52ED5305531D538953FB5431546754AB54D854E454F0550E561356425670579258A65967598959C15A2C5B2C5B38



3F1F6DB80118B5471FC6DE2D1FB802CAB6DE1E1F8B6B3F1FB8011E40176B251F0100010100090102000800464600000012110840417D02E3023600AA000D022700AA000D029601B4000D028001B4000D01E101B4000D01D201B4000D012C01B4000D02750135000D02230135000D01E20135000D01C90135000D01BE0135000D016D0135000D01620135000D01280135000D01230135000D00EE0135000D008E0135000D00810135000D00600135000D029E0111000D02990111000D028F0111000D02

6B0111000D02620111000D01EB0111000D01DF0111000D01740111000D01680111000D01100111000D010E0111000D00F00111000D00DB0111000D008F0111000D00800111000D00780111000D006C0111000D0226009A000D019D009A000D0157009A000D0154009A000D0122400C9A0D7B9A0D769A0DD10F0009B80289B275211FB80286B275241FB80284B2D90F1FB80283B2752A1FB80281B2752F1FB8027FB2754A1FBC027700750801001F0274B2D9181F4109026F00570401001F026C01D40401001F026AB2

D92A1FB80269B2D92B1FBC026800620801001F0267B2D92C1FB80266B274321FB8025BB2D9BB1FB80258B25E3B1F4118025700D90201001F025500D90401001F025400D902AB001F005002510060025100700251008002510090025100050251B28D171FB8024FB2D94C1FB8024CB25E1E1FB8024BB2D9411FB8024AB25E1B1FB80249B25E1B1FB80247B2D9321FB80245B25E181FB80243B25E161FB80242B28D3D1FB80240B25E151F410D023A008D0101001F0239008D0101001F0234008D02AB001F0230B2B49E

1FB8022FB2B4621FB801E4B2D9101FB801E3B275391FB801E0B2754A1F410901DD0075019A001F01DC007502AB001F01DBB2D9161FB801D8B257E41FBC01D101D40029001F01D0B2D9351FBC01CC005E0101001F01CAB25EBB1FB801C8B2D9471FB801C3B25E791FB801C1B2D96C1FB801BFB25E411FB801BDB25E3B1FBC01B900D90156001F01B8B25E2B1FB801B6B25E291FB801B3B25E241FB801B2B25E1F1FB801AFB2D9381FB801ACB2D92F1FB801AAB25E161FB801A9B28D361FB801A8B28D381FB801A6B28D

6C1FB801A5B25E121FB801A4B25E121FB8019EB2B4721FB80176B2D9101FB80173B275BB1FBC016E016F0401001F016BB25E4C1FB80169B25E261FB80167B25E201FB80166B25E1D1FB80163B25E141F4109015E008D0401001F015C00B40125001F015BB2B49E1FB80158B2B45E1FBC0134016F0401001F0133B25E891FBC012F012E0025001F012AB25F1E1F4109012500B40401001F010C00570801001F0108B2D99E1FB80107B2D9431FB80105B28D3D1FB80104B28D4C1FBE0102008D019A001F0100008D0201

B21FFF8DB802ABB21FED62B8019A40171FEA5E191FDA5E6C1FD48D811FD3FD201FFDB4BB1FD2B4B802AB400A1FCEB4CD1FCDB4AB1FC2B901D4019A400F1FC15E811FB763211FB6D9791FB58DB802AB400B1FA7B49E1F9E8D561F9C8DB80201B61F95D9321F948DB80401B21F9275B80401400B1F90D9AB1F875E341F85B4B802AB40111FB469241F6E5E1F1F665E291F5E63301FB80131401363241F705D301F60697069806903905DA05D02B80271B662241F74080E1FB801D4B262321FB8037D400E5E371F626324

1F90630163571A1FB8037CB275371FB8010F40

1E75241F7557381F9F57AF5702AF59013057405702595E131F552309230990BB02B900070090014340490790D60790C407909607909107907C07907207907107906707906107905A079058072408220820081E081C081A08180816081408120810080E080C080A080808060804080208000814B8FFE0403200000100141600000100160610000001000604000001000410000001001002000001000200000001000002010802004A00AFBD02E300BF02E300CF02E3000301734BB0C063004B6220B0F65323B8010A51

5AB005234201B0124B004B544218B9000101FF858D16763F183F123E113946443E113946443E113946443E113946443E11394660443E113946443E11394660442B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B182B2B2B2B2B2B2B2B2B2B2B2B2B014B5079410B001F027D0007001F02700007001F02530007001F0229B3071FD0072B2B2B2B2B4B5379410B0090027D000700900270000700900253000700900229B30790D0072B2B2B2B2B181DB0964B5358B0AA1D59B0324B5358B0FF1D594BB01053205C58B1B4

B44544B1D9B445445958B12AB4455258B1B42A4459594BB0DC53205C58B1B4B44544B18DB445445958B9026800B4455258B900B402684459594BB8030153205C58B1B4B44544B15FB445445958B9087000B4455258B900B408704459592B7473732B2B2B2B732B2B2B2B2B73742B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B

2B2B2B2B2B2B2B2B742B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B65422B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B0045695342014B5058B108004259435C58B1080042591610703EB0124358B90B0E3F0A1BBA00B103F1000B2B59B00A2342B00B2342003F3F182B103C012F060CB0062342B0072342B0124358B93B21187E1BBA040001A8000B2B59B00C2342B00D2342B0124358B92D412D411BBA04000400000B2B59B00E2342B00F23

42B0124358B9187E3B211BBA01A80400000B2B59B0102342B0112342012B2B2B2B2B2B2B2B2B2B2B7474007373747474737373737474747474742B2B7374732B

00>]def

/CharStrings 258 dict dup begin

/.notdef 0 def/.null 1 def/nonmarkingreturn 2 def/space 3 def/exclam 4 def/quotedbl 5 def/numbersign 6 def

/dollar 7 def/percent 8 def/ampersand 9 def/quotesingle 10 def/parenleft 11 def/parenright 12 def/asterisk 13 def/plus 14 def

/comma 15 def/hyphen 16 def/period 17 def/slash 18 def/zero 19 def/one 20 def/two 21 def/three 22 def

/four 23 def/five 24 def/six 25 def/seven 26 def/eight 27 def/nine 28 def/colon 29 def/semicolon 30 def

/less 31 def/equal 32 def/greater 33 def/question 34 def/at 35 def/A 36 def/B 37 def/C 38 def

/D 39 def/E 40 def/F 41 def/G 42 def/H 43 def/I 44 def/J 45 def/K 46 def

/L 47 def/M 48 def/N 49 def/O 50 def/P 51 def/Q 52 def/R 53 def/S 54 def

/T 55 def/U 56 def/V 57 def/W 58 def/X 59 def/Y 60 def/Z 61 def/bracketleft 62 def

/backslash 63 def/bracketright 64 def/asciicircum 65 def/underscore 66 def/grave 67 def/a 68 def/b 69 def/c 70 def

/d 71 def/e 72 def/f 73 def/g 74 def/h 75 def/i 76 def/j 77 def/k 78 def

/l 79 def/m 80 def/n 81 def/o 82 def/p 83 def/q 84 def/r 85 def/s 86 def

/t 87 def/u 88 def/v 89 def/w 90 def/x 91 def/y 92 def/z 93 def/braceleft 94 def

/bar 95 def/braceright 96 def/asciitilde 97 def/Adieresis 98 def/Aring 99 def/Ccedilla 100 def/Eacute 101 def/Ntilde 102 def

/Odieresis 103 def/Udieresis 104 def/aacute 105 def/agrave 106 def/acircumflex 107 def/adieresis 108 def/atilde 109 def/aring 110 def

/ccedilla 111 def/eacute 112 def/egrave 113 def/ecircumflex 114 def/edieresis 115 def/iacute 116 def/igrave 117 def/icircumflex 118 def

/idieresis 119 def/ntilde 120 def/oacute 121 def/ograve 122 def/ocircumflex 123 def/odieresis 124 def/otilde 125 def/uacute 126 def

/ugrave 127 def/ucircumflex 128 def/udieresis 129 def/dagger 130 def/degree 131 def/cent 132 def/sterling 133 def/section 134 def

/bullet 135 def/paragraph 136 def/germandbls 137 def/registered 138 def/copyright 139 def/trademark 140 def/acute 141 def/dieresis 142 def

/notequal 143 def/AE 144 def/Oslash 145 def/infinity 146 def/plusminus 147 def/lessequal 148 def/greaterequal 149 def/yen 150 def

/mu 151 def/partialdiff 152 def/summation 153 def/product 154 def/pi 155 def/integral 156 def/ordfeminine 157 def/ordmasculine 158 def

/Omega 159 def/ae 160 def/oslash 161 def/questiondown 162 def/exclamdown 163 def/logicalnot 164 def/radical 165 def/florin 166 def

/approxequal 167 def/Delta 168 def/guillemotleft 169 def/guillemotright 170 def/ellipsis 171 def/nobreakspace 172 def/Agrave 173 def/Atilde 174 def

/Otilde 175 def/OE 176 def/oe 177 def/endash 178 def/emdash 179 def/quotedblleft 180 def/quotedblright 181 def/quoteleft 182 def

/quoteright 183 def/divide 184 def/lozenge 185 def/ydieresis 186 def/Ydieresis 187 def/fraction 188 def/currency 189 def/guilsinglleft 190 def

/guilsinglright 191 def/fi 192 def/fl 193 def/daggerdbl 194 def/periodcentered 195 def/quotesinglbase 196 def/quotedblbase 197 def/perthousand 198 def

/Acircumflex 199 def/Ecircumflex 200 def/Aacute 201 def/Edieresis 202 def/Egrave 203 def/Iacute 204 def/Icircumflex 205 def/Idieresis 206 def

/Igrave 207 def/Oacute 208 def/Ocircumflex 209 def/apple 210 def/Ograve 211 def/Uacute 212 def/Ucircumflex 213 def/Ugrave 214 def

/dotlessi 215 def/circumflex 216 def/tilde 217 def/macron 218 def/breve 219 def/dotaccent 220 def/ring 221 def/cedilla 222 def

/hungarumlaut 223 def/ogonek 224 def/caron 225 def/Lslash 226 def/lslash 227 def/Scaron 228 def/scaron 229 def/Zcaron 230 def

/zcaron 231 def/brokenbar 232 def/Eth 233 def/eth 234 def/Yacute 235 def/yacute 236 def/Thorn 237 def/thorn 238 def

/minus 239 def/multiply 240 def/onesuperior 241 def/twosuperior 242 def/threesuperior 243 def/onehalf 244 def/onequarter 245 def/threequarters 246 def

/franc 247 def/Gbreve 248 def/gbreve 249 def/Idot 250 def/Scedilla 251 def/scedilla 252 def/Cacute 253 def/cacute 254 def

/Ccaron 255 def/ccaron 256 def/dmacron 257 def end readonly def

 %endsfnt

%beginsfntBC
truedictknown type42known not and ( %endsfntBC)exch fcheckload
/TrueState 271 string def
TrueDict begin sfnts save 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt cvi 0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt cvi 3 -1 roll restore TrueState initer end
/BuildChar{exch begin Encoding 1 index get CharStrings dup 2 index known{exch}{exch pop /.notdef}ifelse get dup xcheck{currentdict systemdict begin begin exec end end}{exch pop TrueDict begin /bander load cvlit exch TrueState render end}ifelse end} bind def


 %endsfntBC

%beginsfntdef
truedictknown type42known or( %endsfntdef)exch fcheckload
currentdict dup/FontName get exch definefont pop

 %endsfntdef

%beginType1
truedictknown type42known or not( %endType1)exch fcheckload
/FontMatrix [1 2048 div 0 0 1 2048 div 0 0] def

/FontBBox{-340 -566 2193 1882}def
/FontType 1 def
/UniqueID 16#004AC281 def
currentdict
currentfile eexec

6CB8900EE141F000C790716FB6DD1AA0F7BD432C0EC680102C227BF114D9077812FBCC656A262A052E820C737A45421268821B6B4A84E47B3E7AB665D6E46220DE5B1DB388AB52CF28B3369FEB87AF929A7FED0890FFE33F1305591E8E541044417AF4C77E9750C1DDC8D7C48AF179EFAF688E25908245EB9DF32D65AAB7FDE694F86239EC52CD4CA572377B1119DB49DDA75E8592C98032279CC2E40BD679F15B94E96BDE9C31529A4AE7B2DF70D716F3EA66178D52E77CBC76B9F09463DE118CE301636275B1D80A

2EFB02BDD6389C1C46E6ACE05A610ED86EFD19D4CE35261B89107313351714B1EB542340CAC786BCBDB3736BDDE04898796354A08A10EDC5DD1D9948F747D7E47C72A4BF13E40AA9C486FE34C6F43C34BBFB105D3E32BFDEB4DF9E8605171105529829ACC8C8C3EF8AD6659E9184B8F3087481DF6ED067122DEADF865B2257A780809FE65D26090CBFEBFE1F94042B5B99B2E910549C2BB1E6E7738644244E56F78073C8D7151C61ED20B96B00BD35A9B4EBC87113911C6379ECB17D7B80C5BC6A93D755D5E6FAC7F0

9E77A09DC16317D25BD49D31CBB91B600732D4D4BAEC3904BFE79F7C7281FE4002BE8E5126FF87E36190E935E1E4395341538CA8C6E4D5B672DEB3957B55F51C5578A41694DEABC3F397D7C3AEF15683B988F403423C75C57DA74BBF3888412FA5D5A616C8FE39CDFE60EC6F9AA2D2F8F2025BDE5139C283FB8E539E67BF754BEE7017031EA9A9697ADAD9CC90F3EDB4F081A9ABA9E6415A01BDFB8C9EB7EFC062C6248BCF1FA4A250F9F7006BAC77FFA6E228A4959C479A7D3DA61C65F20746BE2F30F23B5F42E7A1

442C529771CFCB291240E1C20A00C92E88D860007E2126477AD9554A94681739A52C69DB3C11615EE0BEF8C1B29C6F06C810F2CBFB7D2FECE0530451211A56164F3CE903006EA3E677A2E6FFFE7B1B4A3D172CA731064B75722C9F5F72994560621FE2E0A7F6C273A96287148F78D6402515D2AAE4CB5BC0E0C1CD382D186FDAC1E7D401D9BB6366AFA13A473234C9EDCC539722044ED8E853312131BBBD7A1B25376AD6D88B1707EC9ADE8EB0C748F90ADDC017A3F5F5E018DBAA25704EFF15C1906538FD8FC589C8

FB46F8A74FE6EC2D7ECDA41B375A14F27AF67836E56D9E7573BE32E35DD7E4DA03F8A0C6F5A94BA8E8132B65692A95D5173DE0F2FC82C166436C38769D3C4EC5FA46CD632D2EF016E57248A8FA4BFE62AAE7A7D9A4536F9BBE54CEBDB70D6059441E0BFABCB6065D74563BE95B4BD4B377668E14B889D7A48F9CDF513F922361C4D6E6AE90DE4D18AA51CBF9B895FC7AC9FEEE3FC7A0CA74D4B256BC81417EC3944DEAE055F140D03AE238DDF6E95FDDEEC4C6A48C0436E57342FCC91F4E69335A3A54461C1B05B93D

22818453310EEF5AEBB2A5B7DE59BEABF5F3E7
A1CC85E4145BEE57822888BB872C8B91A5A317E5FDBD7D8ED7EB5A86D954CAF8532153CE60F2D8CC8E77192F9B2612381281EC5C734D97939C76A24C18F64E814EC3BBF73E0174EDD38EBDD0F7F91FAD11DAA19E8C091A3F5E60C86E56865F1884CDC8D6FE69A9052CA8C65EDF22C8B3E8F714FF4F525122EF9A77AB7ACB4EE9C7759CB4DDA76DC82C26FD42D22DD9F539A5CCD9B68233843F0B7DCC4C56F07E5CEC07688C8ABB2FE9A66B7E5FB998A8EDD8DFA9EC54D9D32A6B3757F46CBB660E47808D5981DCF054

36811D369B993D30F1D59941B450E037E5056671D77336F3275870E8FA1651870A26EFA3D4ADD2ADABC7FD302209DCA642CBE61B5D55E519A1C4338A263E8CA7A620B79070FC82B6BADD0CFFEB3CD92666D2D9BD631008E276B25A1DDD59611A48A505E2C811D386F0FFD7EDB0FE96334831CE414111B319931F9C96F4AF4796FEDA18371059730E00955160C28B29B8064C8E2625F4BC9F22159E48B9F787B09AE9C070AC34E7DB5DBAA782F6BE257B9DE47F9573A430A12F42FA1C801B1EAD2A77B23C2532A39CD2

B2915F47DB00A639977632B3F350A369205AFAC6DD4F40FD933C2170B9395AC02D4D07AF1390BA9E56591DCA5373F529EDA6ACEF120EE669AA1214070EC21E1786D1BB38AFE75CC79948E3A1526359F3B182AA51B08328E797D0A31C241C4F8203A43A5B5542A71B6F1F23FD139527329C90AEF4C90B59A1B5D6EDD6F985AD30BD2D5FC346F83DDDF46D13411A992727FD5BCAB58B5B8081ADF3408511F75FCBA5D08BE068D400BBB4D375D91F568CA7FAE76F08C0E048E1174948C018EF89394A09F68A80C6EAEBA9

43FA84A3A865B9263045AFBAD045982B0CF9470FDA24664BE8BC68E52EE07B94E22DCD15B31E239869007A8B2676EDB6AA4BA5DAC97D318637480AEA1CF64B3E01D9E57140DE4DAF13000BC9D68E6C08340553D913ED34B423A9BB77D2342CF0A573A6B73903A5FE9EF484171EEF4FD88B0A6B6870B9DD912010661CDDB660C0F0708848D4EE1E033EF606CF4AEC27A2D3DF47BF0C08BF602CC0C0BD45375B071330ADC51F396832472006312A3CF2F2AA909E73FB7E6BDCE1566CF4256C11A76CED65E2585DD77074

CD48342D34F89EA3AD63C337BE2277432924C73EE1BE7B51CB0DC0C92582B50E02A571368C956B54A3A973147274600CAE4477A999555E805D19B704AE967D06D48B3308A0ACE49F5ED4541841F73AF9AB34337C11A843E79B46EF26423C10CB7D8A1D801FE12FEF0BD93E594D1110B5043D00066428B656736E82235D171887D2D7774032E97F7185E48EBFEF82BD7181FC393A3FE800DD5690C74E885C4C1BB2E7BCF98AD406AED3265992A5A550619B51496E14B1A92AAEDD323F0CF2254732B2DCB3182580E8EA

F523CAD3DA5071A101CD47765ADC3CDD16E25B
06C52827851D50CF1FDA8AA15878721324790E8EC6E0A41D7115BCF3FBC7E8C10F4DE5A78D9C7D266D951F5B019686E0C08A57AD4B8E7F09B3DD0378D72B62197E133CE55065257FACF759A0399D82202FB021B4261425DA397E9C9E30039F70F3AC70C7A6C372D66D8AB2CF9AD0D48CC22DDB6C24085AA6E83F69ABD66D65EF42BC9975DF36A71DF459DDD1B59209E78A17B624E7EC6B9C8435EC1A1385F5F595473D177313B9DC770F8E8D9FA30CFFEEA6A6DEF4A94A53F7547E325A8021A6D41BF2E22DF8CD0A82

3CF03CFBB4266D105B934924444B4313CD802AF919023BE61A22AF42C812B5AEAD398AB9C4A9C86F27F2F00EDDC2DF057BED927FF4F51362582254B7277A9152404D762AE5E5184765919E7F1F8B6D485BF1374ECE9958D4322785AC2125199A9608A2EB592DFE5AF0E06CF648B0EAB3702FF9242FEC35967B2BD60DC5CF64257C83A31B0133793041815A8315C984AAAA1F64339FE6B5419D55977B89C19D2B7326259719F160B57617E666A980D515E15305E1247B19E62403A545BE08C6667CFB9226F0F60F9C71

8118B00F5311E2B9FC70116DEB78196271F66BB110F0A534CED35F02B332EAF83F0BC1F78A8D699DD9C05CF9B0BD1373C4CB32B150E2C4EC9F55246225BBA77344FAB511F27A34D793BC1C13CA4538B71E621EABF0E7EB9F0F66DF4A72E342C2CA7B69F2D836893129032D267BDC594197CF4B5B99FF67719CE53078205520C05A50B512A46EFBCC8002E07804030B3029B0A16F2CBEE49D4386234AAA5203CA3EAA2F6593427606B3C0534163366B06061778C07246EB51DA4AEC0613E6E24A8CAFD02FE2B41521A5

310E4907ED53A15D855FA7A51DA54210D056A2C3F95D7E76F1CF84DD38FB7A3190273C0B0250A6233B291A75DF0585D684CAAB05A6AE6FD2F0A7C3EB42FCC817720D47B613D53416D43BBED6E62AC4924CC08E98B7FE8750B1016AFEB2CD8232F7E52628589B971137FAC632E689784C2FE8FD5705461E6AAFFA951A2E4DBC2EFE32186756942AA26C9B6A991883593E288489FC1DAEE3344B91621D201F63210BF075A403F3447C8E5B3381046C86CC3DF8E261F3301CCB33AE6D878CDD0E32EDB97E5D4BD2726D41

E8CC488A3C5BE0D809A6338BA47F857D05579D04F50211FA2E6D9F07B1A47A83CBCAED0A75E01C32802512086BB1C86FCEFCA2AADD40DD94F5055EF0C072BB81EB1A67C2448A362F1093910D89502DD83DBE4F112CE421F8734FFDCDC021C60A5B4B7356CF94782F106387A0E3824C32CEFB5F1FD3370D0D0E9650A01D5698654C968F9C3C8D6084EBE3C35623984205BF24D37F39FA182192E9D933854A2040D9FB1EE1C2EDF1B99ED4F8E049E58DDEA0CC482A53D98B2DEC940E7AE9D29B517FCEDCFFA3B8AAB01F

D926BEFEC4161CAD46248199488E8978F61F19
D75B2CBB3F5612A93FB4DDB9AB9A0DB612B471F275FF97B104AEFBF68C52EFE551B7737E2000149300C684E8C8E30D5B99D4BF22232589227B3DBB00FF81EF8B2C64B90B6AAAF2E1596DB0A01352EDA900C1FF1C43914EA2B3C7BCFEA562A41874AD4C1D8C504136C1EC73EF712F2F681C3C10FCC79BF953EBC56DBAC0A39045E6788E09DAAC0343D513811598FFEC1B55A202547820E17780D7A31A955ECF8DBBD7B0A5369ED139845604F5C502F7DD153C8548DF3F10B6D76E28AB2378421311FDC7B914545B9E1C

FC2F6CD4B34F5FC95F237148834DEBF7EFED77A52F17A8B1A9C7E1FE61552A02919C42ABC8F8271433BD28A91F6601442113AD98CCFB4C18AB78836100CBC05EC2B5C5F9D4CF0FF9541EE980EB48A1DA83135AD459A37764398C15637834BB3717469722B36760E340221C75A36B9652B63227B4D70105B74D17CA0F8BE2E016B5E9D5FF99461F5292806157DC3EA622E8578C6C7419760FBED5BA1A49982BC797BAAAA329D5F4DFD061D91313626B3550E2AF5901F53CE172B6615DA0E517DAB2C3EEA15D72A4F65C

2871BC01C3E8381F1471FA837E401A5C4F17E9AE03AEFC954069BA784C1B99528E89068ECAC30652DAE7F40667FAD5A3A0E02BC8EFD32E43030D09DC07CF661AF7856649F9CA072997F772802851D9ED1E809D334F6C20F504DA5A1472DF1AB00DB84617A26F182D89AB7DE8F1A9ABD9F941E65D65DA79A8CFDD8DCA11250CD70680E4E1A358B467E2F3B08AD28B9717DC6AF31AE625547B1E24D616631E9C440ABBC213A60A0BD10CF3F71995C16BCE4F15FED01BD2D42D694E9ACD88EF62CE844C505F6C1ACF66F9

5460443868F3C20D911E2E0D4B0D4C2578F06DECF3DB80706EE6630A6F7912F72607AD1B4D75B055A3945E5D4478940C97570D7F91E44421AB53EC957D6209C672F678799A0A20FDA76078E57C8D4F4334FD313FF85F46C31BD14879108D615C125CBDE631AD7C6CF815E21420E8E2D6319F946136C76A9F2BFD28705CCB1654EA2C44AA696448291C96636F3B28A538DFDA483846C37F95D24BACECAFB20BD8EC5ECD0BDC6751A19653538E76F908CD0AA5219ECD23E5CB78194A475C0985F8BBFC45147E8C296667

BEFE664A5A1E7D77C95964D10BB4BDC66AC83E947F223A9947A7D5452034461AE741BB02DD70995060F6D22D5EB94245E4E809C6758EA51E9FB755B7281B0702D2963D0BA096FC387E78A58934C0A638CF0681762AFDCDA1E30BD632723516B1A8D48671520FA5074E75D78744E4DAE752E9B5DBB90A6A84E53BB321DA56DD0127C38793EF9DD56E828F4B1E08963883211F264AE6F7F7A0E35E6A61473A6E553900252704283481835A4A28F055AEB9F0B69CF4ACE6ED59BD7E2D9B8E4EC53420D82E18306C4F8E1A

AF8D62D779FE9BDE3DB3C51F987F03DB69AA34
273417FB5D84D9F5F54EBE81C124ACA041D43D77F0371B88DDBDD54D78DB8FBE0485113629CABF321E83E857085FBE5EC4BEA53C6755A8FD97E04B03D4024264161D2C89F8C7873B3ED6C285964C5EA8435BC8B6DB4B36E904962C30D604091400DF90EE15983A794772ECC884766A4ACF0D783C580E71FB621163F0EE156A7AA27394E6C0CCCF6E67606EC6B820DCB1C07BAF5EACC84942CB26E3416A0629655C44B4D1643501C5355F7C358050DAF0DC3321C7BEDD52682F77096B351EFF32B86D52FC499B2BC1B6

6C6096BEBE14F06FFFD4EF12F0D856C8671264CAED6C6EE09AED65B67C977B0868E623D89C7782EAA45FC3BE1715F31748700F255A3FAAB24E871037D99A8C06FB40EBB3B7E77A04B162EC147DF29349A8E16432E41193A531CA7F55C47C3E4EC1D2915988C20BCEEEED3A6D4115DE54625E96658148871356ECC7ECA685E41C90A16ACD7187E03FA480957BEC1444F2D5D5283690AC4177D17136DA33570E4461292B0E040FBA2E9F8BE6DC020E577AB50C5AA9E6B8F0E980B631E3CC171C1C8083F27D3271AF7A2E

99B21FF0190812AD948D8235CA514C0B650D8B0FA9B4E8C2DC3FB3536DB90ED80AE2B215AAD2177909D9C472CF7CEF50FC4C1E5690CEC03A548CED221F6ADA43ABF092EBF2430F5D46F0D45EE3DB46F1759DFCA423216D6351313AC1AC76C3B816DB09079A8AF5F685462B64AEB11CBDD935429F06A3D4336320ACD22B8F6920572A441E23965C6A709496165BC529D7F6FBD652C7C01A5149E2C39197AF7FCB6573C7E90DC83CF87CEA6D395AECD53B7C503052E1590D16AA75E2DBC4CFC65B15358A9FC67BB44E9C

8994C775B0CC44B1507898531C351326FA0C1D7FAA142C4DE79987B5136AECBFCD221DC594CDD7834A8E45007DF1F98E8136EA13CDED1A84D46A6B635E204AC3880B9DF106B6301438580798629F137DAF6A7806E0EB5D432550EAA6201AD489A292952722A9840066EAB913D0158B694DBF36B403EEF5EBD72D83E5CB7BBE6F91747797075F07F6A44FE45AB91E37BF1470CABD070B9BEAD1FB4CAE6619872D7A20D1508B832D5E8B291B450C27630AF4E360A926717B4B382C9C9C12E4C650DD88035029B110BF5E

D3EA3065CAC61604F1EFFEB26CC10D89CBFEE4B54436FFC0771E232371EB66E161B0E403DEC24E21BB588AA4BB584D60FCAB022763505904F6BAE1AD8D1CC2825DB4F92CD52BE60709B1AB43C5E6F60E717C7449455BCEC98FAC3E372893480A799399A24D80B703B047FB06846C40EB750D8F2D302298A395D0113BD60B857EED25E47808E3AEDDFEF7001D658787EF42A4EF68BC8E4865C80F5C1CFD02467F9AD48BF1FE0A0F527D727195B594C1D063E3A8F2C70D44F5D934FBAC837196AF518B6708ACF3137E30

68C50C1A67603148AF913C14D9BE525304FC46
19357D60044D49F5D6E14FFF4EF63FE48661B60685A8AC2C9BC89A8996D33476F72299FBC7B48347BAE512186AA7FE0A5A4906D4B2386D57E65BCC5964C96967E4D577D7F7A530F9CCF2EA6E6CE704C56B559CEBB863C6B1D244C553EBF065887F0E69946BBB5E8812401FEDE5D7F8456D33F2810A34E0F433DE2F10F1CE3DDBFE6A9C5FDF3FA0C96374754DB862A34A573527029ACB85F011C23AFC83D7670F7B052B9AA15C597DD3DC6882BFCE77F8DD93CA35A2B049D0E8A446A36CCDE32BAED98C62BEBD2064EA

11889DA66EA0DA8C0E14FBEF55A94C1586AC5EB3376FA1DD1D14C2CE05C416D4CA5AC8CE0BD698429A7FE54E5A2BB5F7462A6F97DC9B7E685E12507B536440041D151F856284DFA4E149A0FC2206BDD799E5C4EB8FEEE4DAED9C7B9FB05FF5280224660A5193AF1A8F41FB41848029BEE1BABCCB25DD1AF09A2109F864F51459AE99ABFABB4D46C279604B5D839AD8ECC607D0AC35A81AB3B520AD09151B9AFD70FA9F3BBC798D3AEC0BE150AA86A1A92CE432419C8D285C865CB3B83799E78819A5A3A485C7817B5D

4E1E4FB79455359ABFAF47A31BB55AA9C161D446168E0800ECB7575D246FCE6D2766D2EA585AD4BB330D1702D7EEDDA0FDEC97F351803470C29D364DD9BE0EED76829445C389EF94E26B7C13DCFA857DF6DA00743580780BCB3C9802CA1FDCB5CFB7307562E96E91FA887225A840D8A62CF627135D4184F53406F9EE6114F55E3CF2F5F03AB78490E2A4BB6986AA8CF49291F2F2BA1C9F6ED64D2CF6CE14D30031CFBE6BB124A4D674482FCA5D084C4926190CD316B37554FC994734A6BCB90EE570C052F714585D09

C1F726CE254A4EFF328EFA1DAE3059D91FDA38DFB7B7B6CAC6938C029F16D5E09B022758420E8563D9E243F6F276446D6FD8172395F1CF42DE594297768FE8C8B94618D57443865D2BAC011FB214807FE8DBC0E4F336B24E92CD820D29E1352DDFADE0B0F0F1CECD7F824D098E20793CC454586DF6F14DDE937914DECF2D8314BC614658876621C519A8CF1786F67FDB1E9A7B0F4951D68686B3690A5AD2480C4BFC5D9542C8B79A585B068A8FF9E177071E6EABE5F6D750FA17062ED4D3320D4FEDA0541CF66E746F

A710B3CB58345AE84D22B57D70D02165D02BB8288B6015462B6A0F989958AF1CA1F84E566D6F546CB4F2FABFC6481F6CF3FB0A483268FBB1CDA5570F09BF128DE21921457AE37CBA284ECB1339B45D6FFB7C9236B1D5B96E3C85E954A041394183BE848236841D4E8D34D590F14FBB0D0FFD09254C64525AACD0B7E21F9394F8536DE93BD17B149D1EB4A11D0B7A2EB7D3D4A273D100AF409C55DBEBBEAF4EF954C9B686D278FD773A0FB8CC6BB3F6E722E13A7633F3B15E3EE2845DEFF0B43FF0D7DB255C98550B4C

6929170CFC2AA05262191B7D754540795F1D81
BC9689AAE73E6009D2CD803DB8536DB318383157756CA0BC5B5B92B2EEC3343EB785E760546A9C7953951C69A8422C0D857AF549D8C70502C28541D743C14FB2EAED087C7DBEFBBE3B8367F19642DF0D09AEC5AE3F6EA2A20A11812E22AD13B32CD29A08D4EAAAD8BBEE7A8DB9611312425F91DB14283E407648A4609DBB160C5C592403D509EB00DB7772ECB904C26BE37499B8C154D02629D193EB5633348E1B287B0122D2B665B1C8F84CDB22B275E7013D1E281B410FB8233B59D19C046A06A4505D2DB8E83BA2

C3B64A04DCE05A60DDCF2ECCC3F0A49C7D22E6264A4ACE0194E8CBD63AD1949566BB4214351BF3987CC00AB21CF106C0C5DB83618F8B3B614B8598D7234DAE12AFFCEFD907D4E23EC6126DB7EEBCDDA18936D5751EE3AE6BC4E269FE2A9B43BFC2D5F82D9651C9375CE2D9BCFA1C2FD79A6902F2FD39215BE763A31231B2E088B47812A66CC14A51EDE39C35E1EE6C074CDCA0312185BD5C3599C802B521EBF08B72208F410A9B74D2FB477AE5E45C229734E3DAABB50A4EE722ECB3AE1CCD93A6EBF8A834E2CAD3C6

662F32FC85DBD28A3D74926F0AD35C4433B719CE9E0A400AF1EC6BA387CA736D0C4E3F8FDE083B6E7FBB426C6E8AD9701DE003CBE591A47998BCE53D19B9C0B7D3EC35E51C5F8CE8078E64B038D671099C282DE92A2F9DA4973F1F3D468C00D1785BB913B8649C79EDE1B9D5F7425E0BDD878C0729B4BC15599EB06804D7879D5B5413A2070B2325159AE23EAFE296E1CF05E713378C8DA5269BACCEBD4DC77A87B0040BEE770DCAC022DE68C65941BC9B89661F7E3B720BCF940BC9377D770ADCA1A8AD452F5EEF3B

D6710EA76E83F631513EBA377C7F8911C87D70825F0DF0E89808EF5D00CD62AE0AB44EEE1BB61CD5982A795C88316D4BD7E6F9ED50A84E2AC0AA50929848E5D28FBFF1C97F433F8593520A257AA0FC2D8623AB3B7DE8A624C9809909ADDF1D364E40FBF908AE0781B57AA3127A62C216C372EBC1B245D595AC21FD905DB370AF356069787015C72388D3B481686068B8E7C4741734C396E784BA78AACBD2497909EA2439BF9015795A6A8C871D83EF8F6A146DC56037F28C74FCD20C55A303B69F866085D1391A3E08

9A5C1FEF1B94CD0664372E546CCF7D743029B4C655328256411F8C21AA859C7A6EC2652D775783F3264E1550BFA2BDD7C2C2CA339A8D33C57BF8EB4A08B5F7DF34E8DA74B78A4858044604CBF4D5943AA89834989819C927F76767CE8C8D2D1B270768DEF1122CAE0D4D7B6D0739AB3B287EBA724C3570F4DD5E5A05950797FD2527E7029D7609737ABDD96BDAA575510B85CACD1EFC2384820EED3B1E11D221E0F1FADB363D826757E6459D44946C7D16ECE7AD74CC0993027B98307C58895DC9D04C014B50DFA416

84F38208AAD356A35A16F89A67BFE9AD126335
B2E148F819FD9618515661272EE03FBA76310AE579A781A6A89980016A5F7EDFB52DBD55BB19D35070AA54B12DBAC95877216600A1E4FFF2622D15285B2DFB33C08EDEC5DE972F4B93E177D0F321E3FEF8EF58AC70DDE3884DD8E43A60ED04976E813D924BB9C07A2E140C5D194EE3C7AB0DB07D5A9AE61EF9D704FA785541DED5934C5D549016C484876B25863D268F2F96E6AD1C7EF594B8E3A4A6C941AB5433E8504FC0E2210950E7091E75A8B23E02C0CF84F3C67EF00EB04126D37E754FB9A0833D551E6A0FDD

CE5CA9FB2890D612AA8E923EB897A7B248152C0002BE3D891254C8FDDE967101BD1C615E69E6E44E4369D1861F8682D810AC5C7E86F6BC8A080DED96108373A0D684154646E37FE299B1CF50E80170BFC43DB6230F36DEFB58D4F31E19287337022DC9B425578BE5AE5C16FA55CCF695DC80705E7013B0EC91A098351FFE4222C38D28441A1745FF21B82422C457EC642B9C88FC2589CE81FA497C76E167D82F1C4DA111A94B11B98DFD65A3B098F22E367A8C2272522B17F9C06E37FE2D477B463852DA5934AEB41C

12BE312FFE75D4196D63BDA8718A701E90874FC404AF1E6B38413E14651BD90E265F2A67C1D6DEF7DA3954738728DD32ECA9BDBD53D14FA5AFA96952AAD06C7038AEE263C7D159FC191ECFDB9B13AC02B9598CC93B8394E03EEDD30173D2FF10E54BFA0395052DD62FAD7C3FB954455DF879E7F07AB9F1778A4747D05AFFAC1487B9E4EDCCA073055A9E3228439A59E152FFA6067759B598695BEAB73EE7EF37469850B39FF33BCAA844E116F634E48C0D757C7AD686A4400C3D5C819FFA3BDF5E5FAD7022F1A205B5

45B0C767A45CE830CB77511EA7B2C0C5B8B5671A4B14A42E4BCA7C3215239CF0487905DA75899F7DBB14B73EC9631C53D5ED6FA13809BC7983EE529A7706C431810114A1B9EC7329092593ADBE22591AA1E84112F0C6E119B4258C2FF0B971E0B32E261FE3E8E5A982BE2D2837B12D78006B809D7C5B828BF201E4571998181975BF0739BC210621ED62BC23D28E39CC8D1B5CC7595FE509C2F8B480F371A862DC3D56DB30A075640A470292AAF53168DCC3212B806927A69A787C34D6F3B7FA155EB5E6C13AA04BB4

A71D03A5365F930669E58098390B0BF8945590567AE801301DB6BD43906B61540B5DBC8257C54157253A97CD5023635AEB8EC5017AB1D1930A930F303EF11BD274D942785B9F3955847E65C4B16FE9B9513BA4C9E00A1D3DFEF540EC63842D88116EC0E6EBDED50CEE877FA32C014DA8443D743AB9DFFE2E4CA1F7182685FEF26B642EEAB3F97B16D953683D72F6D5EB652214A7B04590604EAD59EAD9FB2A7BEDF45D3278745172EE484BD87C8633906FA52CBBBFD4EC3C7BFC438059D3311B11497523DED94CA65D

EE3F7C65F03E1EA63ED7F46ACD75AD46C91797
FB46DC0BF4F23D92288E0AD14985054FFFA597F5102D9D743A6F7F6DF6AD65B4C2791E2B56F49641E0C51CB1AEB6666BA5BDD078D25229549C9DBD5F755BAB6283D00336ECFC9A34482FEF6C62ABEFE74AE7735B2F76986B4FED5ECA470C8AE76ACE1D2A1687EC82B73416472CA6A89D5C06B195CDA7B1528B4539E9D67AF9615F96CA632BC2162E42ADB43964D577F1317F63892D6E4C8DE048F0B223709FD4E1520B71A13791EC4E7A1340E4616C4D4A07BF4A64429E59FFBBC416948D37E6B696AA7E069629A1B8

71912C9B6CC77A7AA5280D2B4F1124CA66DF808ABF737E55579C2FCCA40FECA1470202CBD4FE110920E878BD058B80D8E98CC244EBC699A920E83F2CFFF3ED54EE1D61BC9FA17FC90F7174C03DDD0D27B04BAAC381ABF340EF9E4AA90AF88D2F3DACEC7AC6919F47660774C2A7AC831CBB547F1BF028B36E0F1E2E8AEC659A08D0BF19F148924DE67665859EE291FE02070C5C417B7B4FE5C8837D8EAB9D69C8696EB5C7DEF0F05388892654C8A4CCBA2895B8F28C5C99FE697E2C5312F5233C96A1D51369F596FF15

9BD272381F8F8507FF0806B3E4C3329CB7E5FF7E0061C880E3DC63A8AE5F33CFEDF31FD447294043B929CE91E4D2D277E7F81D30B81383D8DF647988228B3128935474673C4C97F871BA41900B964E91C40641A0CA69337B8D0118A61FB2A5182EF432C2E2B7F14B207226D2DC01DEDE6BBF49BC2AFB368C6D4555BF66C9A8A4E7B9C28728A20194D9A109443E47A724368056FB358CFDECE2A15D3ED9381B293BB78BA9298A2DE660D53522EC884059507E9A845485D3214C6D2F1925466B35B4A53224CA2061A153

B4F92871233FBAADAC70F27DA86FE58136A385AD950DFCD3CAE06B3CC2104224FB5AC3333BCBFC5078E7B319C13648E049DCDECFF14A7CB0B901E0B45619335DA7DA0C11391880121F6D035E585961956E743442A77334EAE6B228C292B5E9570E75041D0A236D0B16BAB573FC6C28BC500D5ED98C91101295B7E676FD3B312507DC14766E343D681D820C8EA28B8DD80C50AFAE6BE6DA264EC7825B2FA9AC965753663F88976D2906AE6BA053471F0D138C6EB7842AC33320DA495A2962D8A53595D9FFA5D7E47C04

8E86BE9BCD717CBE1E05E5B8EF09C90F652F67F782332635FB6242771449A8B1A1E841AFD2A5E61B9A75F6A6C0A4CEDC179D8BE0AB3CD3D87DF5ACAC8752A03D2BB81DB17709D06318DAAE4E416E68CD2D272946EF6E31BC67BEB0C2BA3C70497B168D5A0D93E5014CBAF4B470CF9E40AF9CFB49BBEB466B7447E93C7603A77C52AD87BE92C0C81A9123AB2C8B8D98728B9F53EE3985084CA7AED64A6D945D2DDABA58D20F954FEBF6DCC237660E815DFA4B2CF81B0B102813F08543564E3EEA1D384F461803C2EB57

9B4071AE1ABAACAB488FBDB9FEE0D5FE775FC2
86E1EC313F7E1F1F5DAE5BAA9B5F9F0E656A9BE71FEE237A0C657B2785C02E6C18C5C4554302BB35761034C57C3D4B8954B8A65EDCC38062A6CC9AC34F1AF4D114BC8911F25278E9A749048FC101F85186C00EDF1C60F5194AFE37C7FB2C7C9A672E8BB3363524B86332F684CE32E80E53965CF516258A81186914460180742EB5B90412084A85480BB14C3537310D2C4C30F195DA8B3E10CA0384BA7A2A2FA8EFA9B6A1EBAD41AFBEC73F2E63F43DFE9B4CD7118A55C42F88DC83F7023373B17060CCD6ACE576F2D3

11C438207845B93622C96FFF498CC7F77E9306C82032FE77FB9CBC8CAE5374D1D414D1F9328946054249B9B9CFF557FBFD489E338B91A6C58FF12A089736A5FEBAD8EED1AC38EC77C3ADEC8A0AE126A10F9B5B78B8A56D740E9230B8B0C10E62646A1F4C3C08F77FA6A8CC80312C7AABC9FB3D538C63969A9CCBB4344A88FEF194C82FBA242A1CC9DCFF6616E8810FA70FD74A43DC0DF67C09604A84C8EE7ADAC97F17CF9057F32C91D91996F713FDC0A52276CBAB3FB403AE7DCC0E7D181B7BCC253A0FEE7820CEAB

682191B80DD42C58DE3B70CA0748D30A4647A498B6DAB29976F1FF7396D2E88405EBE856D70DC1CB60A8EF3DC921B7CEFA440519DD7B288CDE0433E4D1F7213EBF991C887D0776A90F76FAC50014E845C354770DDA73186058C035E5E9EF88DC9918DA200D7B142B67EB01BB284C493DA01F6A7AE35A07EE39D3CFD52FBA0F465F79D6899FF7962695A075F21F0D5ED7332ED48681EBD7E28798BBC808E8BACCD91E4F71B65B1E96FCEAD450EEE05465F7A760EBE52B703C4EC77D8389D548333DA59A9D9EA157B57D

70FA4783F0549E4C493D845D0F97333DDA276F2236F809388ACD69817BB31A58B7DD7A85B35F1524FB8BE2F365E9DD6EE1526BEE4C22D6E27AE3DF4C92D073AF6FCE5F852768540DEB72707850B3C4613C20468AA701F4D7EB1DB88549E4B993FCE34591A14AAD13A4E538E2CB753AB5E8B80032A32759CE8474E217F4957548E36A30AA6D16731C93D6C3804BB73AE60C9B24BF364CAD639BBF0B5B7885FF58E12106C4D42F463CFE269E05083125298AEE9E87675FBF0F8EC91405D9C8A72688E7B92869FBEB274F

F1D93530003766730ED461505C9CD4326E70810D4BCB77CC2CA0A3564C0668392607690B0E6C627B5ED433EF9BB58FE654DCCC35EE029D7F5E50B7FD6C634FE13AFFB246B6073B071C3EEA7AF3E45AC78B50DBA506AB3AF479B27F75DFD72E5F738F397A03A3D195ED7830151C80090AFA1A85515B1DAE97BC85625EA0486496956CDD81920BF3D8B3D45D86321C2DE4918263D177A15E5398F23DF9127B525EBCA3760817E0A00F214641E3EE66864EFFA575FF52E57CA5DEBC7890296B5E3E0346CF8AA823CC6DB7

FD0AF7D698D88CFA04709CED740F423E7921B0
88D73D9DAF9E6C5147DE83231E050211A73FC325A437385D5B8178593CE56180DADB906D1330AF8D84AC535D01720936D436801750137F7DC54F38FE2A9EA1A8BA41AC6CF7837CAE06D613A66FEE41FF1FEA31B7EA0AAE8527FB0F187917545BF624B80A7FC0965B3D333A2BA40DED06B09495A1341DFA811238366B2F7847BA5F6906F7C68817DC85899552743FA755E685EA6D3961175202AC64DD7B59D4EDCB198FE124DB180F582AE0B4552FEBF4DBAECC6AF04C17C861E442ED4AEB498B6801A1FC126D16F847

843611C77DF983055FD12C7272168CF3174BB33707D71EAA34826B9334F2FBC632ECDC47F042663581DF5C7D252FC8E106D3361C0166185AB2B1ED99B70827D61F6C88507E52E4DBE9DA8DE069FEAE4F4C399720CEB3F801A3372998027A1E7221644C4BD64E1C362A6E33691F00DFB5DD8E7F468710FFD4296E55CCDD978FF74DD00EDC75E86AA33793A81D7EBA521B2FCB3FF012D5D83253EA38D6CDDF71D473CC2D523D5DD2CB39D8075C8AE3C3D51167101500554D7F2867713C4D5FA0471C197DB54A2ABC62AF

C2937850074F8711B46AABE1B3279FEBE72513CF41AC07B47895C13729E4725B3EEC5D1DC5CC7A6C91BECE87526FC72F1AC45D63CF3871E9C6C01666CA6957BDEA52E2B28AB62E111BECB3A5D96C0773E0ABF93B6C6C9542952795E4FBDF1CFA41FF90C314C1154D36951FEB07E67AB27998227E52479D02DAA569C96D5F909A0754F929BC01E4F3A288E0E5C78BD9521FD785267A3630F31E58AF52AD6B776D05FBC83B402228A6079077B8650C3F82676605179828E1ABE845E4C37189673E3256F1CCFC9A2F3C20

BC678EA13AA9F79310C7BE2EA0CBB4353F4D648966C71141D114A8FC202280EA9A25EBE6D1DD61B5EFBD37EE14A7E06C5879A974D315946549874D95BBAD71A379CE4AABC33DEE4A66EFF32C386B5E8559ACE6DFA1025F1B1AAAC89B27C62F29D87556DE06D37941C03545751A1A27AF6DC124697B299828FD20BB7047B38EA195C25992897BC15589DD68F46F5E729E357FA3E3AC8A77CFA67F948424A34BC8F7FFE74CC7D825853AAC1BDA4E0187312482388F12CCADCC86CBDE887263DD7006038FDDB256366347

ACF012D75AB030716262DE97C7CFEB5DE745707A482DB93DEC38865E7BAB6783B4A150C3108053C13927EFC935BF1C8E2B79D956D7A74185036F5ECD7CB5E943E9ACA3170954119A8451B56A1B447479F9EE3C0828766ADAE4A2584219A2B2142D9A43C9999DAF163AFA52E7AD56A13AFABB48A04785F44F9E7467B0C2E5D1894CA1AA5E0957D722987E2A6457BFE224A25D04A992EFABBCCFB49D6CC27BD4471C11D3C0F5CF92192D5EBDDB1AD6EFE1482320659DCC0D6664B6F1F7639F020EBFB57F02F6B52620BE

CCFBAEAC1F5CC29F54800F7A7AD69E75B6EAFB
ECEB3376970936410556102BE6E164F44825E9375887F840ADF177539526E125FACB9A88DFBB7AD39182A4E8D35B02C74AE9A2127F23D74F16CAF977FE6E796FC5EA7C125C610ABA2DC09D2EE34E61141D32A5652A8A4386E297432B9633B2EACDC53E583921B4CD4F2ECE778E1344B9E1F4DD54D196CD4BA456EC72E0BD63465CADAE05B164A63FCA3D92D9B649EC9C1C2966A82545DF9D531957805E3777E7CCAB7B68F177BD665E3F81DB7649DFBA54A09A3BD6F7B5EC85A57473EFBFE3F8BF228DE9EA211A2A36

FC41A0FFF2C7B4771C347E68BA65D57D7D89D9958DAF8AC70B29A38F946795E64BE48FDC6B9D25B8010E2F11B74E54DE54E08C2A0E6686FAE7CBCCB3C4980216CF376F842E109D52867C998B7583DC9689A2D17125A56587166EA008096C8B676EF41119BE7FE9E53CDE9F32B89B35F57EB528799556EA7107EC61EE29EB784B3773FF97002287A7C224C906CE2B553EDB36F8F5F6420C5E886A9B148270AD630032E35FDCCB5D70AE1DC6BF112BCAFD38195C1C161DCF5E8A80918383C53442278D0477BE9B5FE843

5B904DA669F2FBAC58653020C0125AF652FAAE8040FD1D4EB6FD386330AF7231A93332B987A803D5026544DB520D19769AFC284C5C1B0C30265D061B79D3D3FA952F452A6E6907DEA462E0AD187E7983F628FC408CF42AE152E4A96F901F316704BD8075B2E0DA7DFFC4ADE89AD82CBB55D30E34B1B3FA1383403A199994319151403D0BE1B772847AE1BCC55F3F9001D3E1F777BCFAC0B046F01F2E1AABDA55D801822AF90EDFDEB54DE41C7CAA83C4CFC256BB9455E61BEFEA92C1D4EE3C1BB3E5D312DF01C5C6BF

DB1BD6980A37B840AFF7C54C77E83315D8DB197F76DD3D5DCA97482978389B0F84484296E7DBC8553E632E5653E6FA8C1211BC97E20133359AC5B7E63CA026987BB48664AECD0AD4357731E88C494F0D5193D4AABFC9A967142C61E3E973ECF6A1E687888A36AAC671A76D877B96A8991AB0BE3521448EEDB9B911A50680942B7B426A660932D63B01973F3F2D8CA672DB25CDB84BA9E781B7E6AF6F689E08756F85B13323F3339E13D584E44C225796DB410C6F27153CCB5CB81245B954E71E0688BC0D9A3D2B91D7

99DC480A892710D4CA604D8E1039EE638782F9F74B8AC56B54E571545F7AC6E215778C62BEB38C14D861EE4EE86ADAD831D07144419A976C63CE423BFB6B2E367F56EAE86EECC397D847A06EBC159EDE603D95DA3E50FCF9688F64A89FAC03AD25DA9BEFE92A1549DDEBAD6BA9C653EDFEE44FFB781C8C7F5CC2FC61532B8BBF90D68EE3C7586A67293C5A4799DB7599834B6054093B79D93FEDEBDBD834A51B5DEB937129E11EADDDC7D010ABBA5AEEF2505FE9B066847E784BB18A43FBA76A1F66D7C7582302FC1F

E03B93AC66E8600872CE2E4CEF5DAC74EA3258
5EA9BCB04FCF90871E65CFB6FADF435E63CFE42D5DAE0385FE5DEAED7DE09BD13F9AC7FCC5EC99DE776196D5B1DC011637BF9054D8BF32A4E0CE6344339FC63AFCE4F7B5708F71B7109AD24A49AA9120007422DE19B0192169FF9164BAAB3CBF0FFACDCB255927B81650170484879CD7AFCBEFF471AB6ADB6006D2E5FDBE17B90E34879490788F899B123A6C550E16D236DD196B8B5A97C41D43039471C11C900B76021D960B01612DF5020B443A2E2F03D20F74562013688A8BC6E63373A11F51B8FD72278114FAF8

66AA3F9941ABE056C68DAEB1691EB9F56D00BDDB72932E42F925D4DA0C7C26B582A4F0E3D7F534EC5B890A995E6894BF4A5C6BA2A6ABC310D2BA582BC831B8AD3FD996F36198CB038B02F50B018EB4EA8032E1B81D84DD4624670F501FB63EBEE259780E5C7834459EF7B43DFE260C7974EB1A166D10F2A11346E2B75707CE92A8580E71F788DA83D4E248DF79C933C5D16D872A5E966849A16F2FBAA0D3B09229440A8E42C713C43D8436791863082354B059FD3688CEA2A65586EDCB3FDE39418F76EDFEC8235EF1

6211B72728E30E49C08F25EC5D9B97CD99457CCB60F8D0523B680CFE5A2BCB060B9DD6DAC881C26F6CFE9F522C64F41493596C240F3F0F9917DC62BC39D9D663A33F09A44A7651931C27FEBE88849A10849EC13474EF924D833AB7BA13384A61DDAB655C426BE7BA17817ACD5498EA94AA45CB99979FEC9EBB3AAB4A280BAD6FA18DEF4773DDB1A01E7E15E51857C3A0D0D6394E5C68D1C84670A1C66FFA9579E4A45A901A17C8B771E77272482FCFB55EA604A0149FF0B010E42FC8C27D6ACF3A4C98A28EFB5C4B3A

75010E552A2CFC52ABB519B9D0754ADC50868D07778F154624F698950FDB7F6DF7D394A8E6A786D817A6922E36C1EAFA2D521EB40E75DC57C810FDDD94661872FBB7CF1DFA457E3C35C8D57CF9C6273DDCC2A2283043487160CB32C8F35D1347F1282DAF27B90E31D1CCDDEF1281E626412BC319C904929251ED08B103321EB54CE96BEA502C64040CEA482BAB7155CC3B95B966BA8D245845B284DC65BB636FDDC6C6CE44C65606BF863EB24D6CB249B573870FDBFD3E16053682A9CC33C7BC16719D48EA2EAF25CA

C02C87360D182F8F3200C1234C9D7D0048024FAE4094333BE97708DBDC4EEC85225DF060BBC2441EFD556A01C299A98F18E115388D4DBA61280D56FADD76D8E3247BA8C21966AF7668A62D7DBEC847E6B3EBA51EED48DC29BA278CB10269F11BF07E52C26ADFC431CC1E9C05DE372EC90213F7784E2D86684CF22446C91569D79AF1C4C92AE09A251F75B7998792B807B4180EF0528E357E87102C2AE8F181AC0FF19844EF74B5E8DEEF921E78F308DC5B81587566D63DCF0D3B065F21088DC1E77E5D5558103AE332

EB24C887E75AFC231B4B60CAACD767CDEAEC95
9EB701DF2CAF510B20745F5B8740B71AEF4D0DBCF936F766C363A8ED07D9228274B3629977E7AB49268A70D3E3B0F5B4C3562C59333A0AD19316B56C0F0CE566D48E14E4F1E4608676E6270A3D8B14A0045D6134071475485878BC02CE14C681F30884F8CDB072FA61F20C2E496DA7E71C5F055ECCB6ECEE54BAAC5498EFE7BAA03D2B6BD32CFC3ED818F09C5D2AA10CFBFF6D600CA3092075E5E8F9B181E1F20257E50937F3702FC59E3655CE1557BB78D86696338801A7692F75113682AE81A5C99E350D24AAB56C

0EAE606EA32F844B492CB3136A3ACB4DA94B43B2330AC1758CF460C4B543247E5F4A1A346F4832BD33DAF7E1F50FE284FEBE9213D54B7FFCAAE78BB1C4B12C3C0A347676AB04F353FFB40F51CBDF20E6E0E8258C046642938EB48FC3C52523662BBC206B9656651181F28D2D94D48E94FCCEFBE6DCA833C0037530A6AAED2BDAC455E03F0F5D56586E1187B84E6E555138E5C626AB1094215E79D0A3951BF27AE2398C700920EA5D6E6B0DDD16D26F061822DB01B6FC41F6637CAF830B4A7F6FE1C5F969AFE641E978

4261CE29E0D8064D58F529D77A97811408C6C1FAF47743A3745A5C6F7D7E803AF0C60E62E3008D00F21CEBA3ED5597EB1E962DC18A03E9C42C88DC04267DDD13C1A2225264C9F72D53D5EE5B2596BDF0796E544099314AB04ED0B89A587CC78FA9657D556C091B879C819DED25DA6E57BCB10CD576EF59025C8B9CF97C60E9957FDE2F6B4127892E0CF5C04794698A32F540DE00A5A81E0424217FEF3D58D85EB45D13D1C6BF4D6DE895A9E06BA0B4D548BD7EFB2152DBBBCFEAC4AC0016161E9424F9E3B3C6D0C5F0

59A050B3FFDA65CBB08C5EE4431A4946A044A9D520AB794EA774CABA17EFFB3F32D8145858CBF0249089B73335B88178CBB504C0FFD99C1076C4C9A6FAC323289143C1935BD0BAE553E5D6103134F9EE03F8EB177F483983B19844D29FA52F11D52D912922399203522F858FDB1CD4359A51A72587F1BB33F20F97D649B5C1C0714146A2D7A5D688C5F5FE693DA05B784E84A2A1A6581398F5B7411C762FC79A45D9103F88B0CCDA8112DF8A522CC4AC83EA638310418F858CE67E5C8FB5F20AD54F6A08E28E985D4B

DD369A26913B28B00384E1F369E377E0A27BAC30AEC7EA8469A7D14559C5BF4459A9FB3469CB582053C2FBFE0B35C6E496C9076F78F1C856394161C1B0A62A0017770AAC33E4BCE33905525E6D2900265344ECC22BB138500D73B59114D64B2517702B2B397A67C99BC64BD717F863DA97C901B2241D671639A32211272FDA5A4818754C75920CAAE5C2AB2FECE7865C626CABCC8307D990C64624AFC4E5FA038B259E1C7D0266CF0D39964E50BE07AA659F21FD210989E760C211B70AF5567E086BE9AE33CF87A2E1

1CB444F4111499354EEAAFA3BBB12187B91BAE
F45A0C5DC0A58D7338EA68D6EF143B38C09A453DA58C5FFB525CE67080A52739EBD16BBDA93BED37634BF0D2599998AEE38BC453F1E018C7F39EB6FB978C0424764D8770D0FF86D94464C83CBE322BC8B9993E31A5922D40081E55C926568F78F074E45AA20EA17E4A988F0FB1F12B8A1B495AA806D63F5D2DC512CDB8282A7BDFA723A46D2E11AE5ED624CD559E73E614C78C95ADA0FBA82FE891592C4CA071D75945EA7A19160C429340767C62C318F2181C88780FAD8995ED32ED2F5FEE19189132698BA9380A77

EEB2F94844E858E36EA03C3789846C8A84EF6F774E77F821EFAEF7B650306DF0245E23B80397E510B68954781C3BD7A2EA4A281372FA717D995ED221F4DC3303F94C3CA6FD8F4A95CD9EFDEC625404C018F8D915F17BFE399DA9F00DE8B88E8C12BD0DF58D3B35B3E1800756D2DCC6F3A74DF873786048B7E7A927075A2752B8C639CE53E2099A6B3CB48B08619842E91AE5B9D0C4C75E51812D4CD781B737EB4CE27884ED1F5F41A6F663AFF354E3BA5FBE076BFE7DEB3A44FBFD22AE39FF21CC1100AE8FBC6B00C0

614312B14D6C01D2242C1D83B8F0D17D9532EEF20ED15843721E3C40441766AEDD9110E9B226A4D4B0EB89E3B056480CF91AE80FF6D4ECE0D8D439C8AA78F83B9AF41C797A233A47A83995C9A0FCF1910973392B9692FF0743C1A57054B2FF584F4EA2D4DDEC01EBB642267C7251C546E006C9611DDBA7FE4EA589AFCA56B82913BC8744461E187A03290D9DF5C4A3078B307818DCC9D4FF4C4417A37B7F1C1D49C498BA5B87D9233E8466B4F8B56A55BADFE24589BB7935E64B352AB7674E3F071897767A60EF51B1

10A808524AF62F78B7441012DF4F5BF4D17F63E6FD849745B2CA7EEC3E6F2E40369CD6134E702E7F3F33B7A75DD17FE2F34E6EB54C620DEBDFE99E8E140724DA7430A025C955230FEFD4BD3D23DD74C644D24974BFBF90F3A2DC9C6241E1609B3A6975AE1C7B28BE575BA1312CB17EB8790E146DE5963AEB476C9F58509A3DFEB187942830E9C5E3C13881F337ADCE6DCAABFAE3302048E067209EB60E8C8DE386794F7A4904CA05B3F0E6B766A729E0874A5B96680AB464B51B38D797EAB30CEEEC0B5CA83D4BAE49

5B5899F1483586F6D7EF21CB395ED8F58C6E90C45D6C20D9274C1B5BA267ECA9FE7587D46A41C46352F2A38E69425ABD470B48C57A1542D89CA670C902691CF7F8DE529BC662C9CE866AAC9A693089CC25B36EE74E64CEC464B26CE28BBA7E589210824AA25094C30A6873653C37C9674E3C82D7AF1B72993963186E224FDC2AF9EEF4DCED0DDD9B5596AB95F325F0E7AD89CFD151B4F6C3F6849623A54F7AF3CAE46E84255EACD9BC46B111CFDCD5451E696F3F328D63400E5B1405E978003B6489D277C3683164AD

1ACD9DEBEFB3122DC29BC45B7BC3010DA13A36
6F1DF1D8AF60589EEC398C004FE45961A229D446BFA18C81E11BEA427120F403E0DD67B7ACBF5ECB6A4B320A5BDEE1680182F96BF08085226842C87E3CF2D5E1ABB71340363BCE375E5AFA4A7DB2D2392B60D3B27F30C27064A24D61F54875B161A9444D5011685FC23DB9710AD31C57FD05DD6CD939F158E04FCCC58465ED0F22958FF39084963CAD93565B5C3A51C4AEE84BEE14A1627D5B38095C3FC5F121F579DAA10D9AC7D1C3E485C6D9A8FC9605A0419B09498FF7FE5FEBF0AAA4B562E16251B117319AEFD0

6E481F58239CD6E1E5A3B9F251EA0D92125BE175921321019EBC2C85BC110F58DBE31E147387546C6456D28D3059EC63354635832FBB0A3C9416BD105D902C89523DA5BA43BBADD3BD99384D90198DFEE147E83117FC84EA0D5596B019AAA3D315C440925DDE7CA28DFA9831911FDD85AB81CD76646BAB3CA9D590829C2166C47162E53B1A12A2E339CB4DB6E398EF2AE9EB4E0952AED41515739A4ADB9988D1C64A950127C7C2D980BE3C5400EA611FFE71648EB2B77F4F88F6E6974B5BEDE424CE06D01258E6FB9F

DC68D54093A3EEFF1675589AFE0E6A6CC94DA7A95682D4B8C3E41922FB01F158B0933E3D2529A9C029EB60315B7BC6149FAF4FF6DA034A1386A721EFC586D4B47482139FC7EEB7F4B21476078E8EBCB664A4410D1F8DAC6D81552159993B923BD10693F43A7DEF0BA7BE6108E6AA5C22A808242DC3FD6EC32FEC98014CED701C3E1BE299FED167F8C487AF5D1B5C34E3A4ABB99394408C8C53C4ABB7192CBBAFE18E73DB65B6E0B67E40DF18409ECE4C5046DC3A3904E33292A6EDA01A3CAAA5C5343CED180470C115

161B4C15354D0EA4D872672AE31DE81B58D658C6493025D915D0892C8C08A72459E9FA25DD20E10997B7C690A46E125CCD5E503C5247C6D6E4BFE6199E90788F080C963D71E6A2B6CFB73F7BE47FE68553DD4E1363A0BBA5E8C1EE783C96C53632726603546E53EFDAB25E958114933D38EAB968A70AF48F27D58720A82147685BD594DE09C6D7A102BE61681B086523181DA3911AF45AD30A51BF0BD94052685B65602DA742FEEAB89BC01019E7295A497337239F3146F327A864A989E55E21337B460C004C402C3B

966803A48B398C97C60F737C6E240E3B1F670576C40F3786A706230AE227E7C612072EEFCFAB399AEE4A50014AB683556B2C70B16282499ADB3CD6388EA20FD2131F28E8ED4631ADB1AA4534AACE040838F2B3E5CF406EA3FAD208C0235683FE1C6289C6D4B9B133077C6A12065F97A0BDA5914C2AA69009C50E42BB73351DF161B383476ED189CA15FD3A51751453FE9041C832A55B4904557212D4BFB38FB35CBEBB6CA04357FEEDEF3C3923F1849E48730920F0138988BD8E3B4DE7BA51C068AD5B1AFC2A99EAC6

14AA03613D8EDE36179DFAADF5B07E9C7E9BEF
07B08738D40C8D299CE8265D2E03A054E3C514F82426678844D918ADE265B5E421C3268E477BC6F3263EA3495F51143566C42F32B651BD2522683ED1CF330004A76ACC544DCCD2435BD8AABF6C91C095EE520E169C3C59CB6EEF4485574F32710C297243564F46B797B830C9043EC7CA081B5856792089D42685C9D9EF8B614588B4188C72E60533F0158A449E01A1ED8369F8B781C470BBEFA2F8F2196B9CF36DA14292FDC9D5FFE4271C6D38FCEE9C6F9881E9C8C1593A2573C66B41562B923F80578527C8EF0E14

A10F950AF64689F4BA2A3FB554B9EC8F8D9DBC701D5B26EE53E240602B1629660D62F274BF9DED2F357819AFDE7BB8A2DFE3CCF6A50F85D05159CB3A46BD9F8005C1FC797BC53D95998300D53D502BADB6A69C9B6C8C232F43C43874A603CD60515CE268F2B7CACA8E2E1C86A169072278F78F8DBA478966B0F4F2EF686F694259CD814663D463D0205D94CC30FC77A965B48397C6846AB5D9C3B8BAE322751E0B1B23A82B0A9BC6308F70B60844CEC76DFF3F09D30885BFC4AD9BD0C7FF4BE5A0E9B818F1E2B19FBF

A2965062290B0946A3DA08B35379B4A0F546DADD0E68A698D0AB7F430C30B7FFA8EABAF05A13A1E4B5D54A675979AF1C0EAACEF777E671F3A67E10D8435E96F2A849991CC7C9EA1C3A28B98074F573A24BED1A656987012FB3C9DD3AD1E241C17BEE173B90C281103A311CF9BE88863FEEE024EE6B74FB4198CE4A35BED794AA82A4802E2E967DDC66FFD515007EFEBFADBDDE83ABE77D09FFA3D64FAEC1AE2B0B1DB3ED369BC7FCA6BFA43E33C7E333A71C2E3F639F288D74B3EC13224C214FD76D2C145752334B89

E77889A90FDEA780EF4A9EB92A3459181A24FD64595452E66CE436A58A3AA00344725EF849773F2F853B39EC37AC16E2511AFAC3A8357B495B18EFDFDEBE6D83F7A7010A1CBCC855EA584ED9C3D7002381884C184798BD9605D6CF71C4ACFA20C0181C8878F077E4845598BCEC1A1475C14271A2306CD72695B90EC7A135493C20C06BC847EA822FB3374C731C0A1C28D625CB935325C136A97BAB54ACB8489D63777A1F99B4B8EBAE564BCA78B5C590D5C7A60EC96CFAF9B1B9876A973FD76F579B19B723C9343E23

6801223F7B395236E9FE1C100E3ABA871417EE10CDE77AE8BEB2DFB0652C35DD56FBBEBA6B504C4455F023D8DB8FAEA4DEE68EA75F3E983FD8D5C20FDB2A33B5E9ECEE2E99B000B7A72B071922A608B624462C2F93F720EEAE811E9A101F1C04CFF7324D8E6EEDEA82C7C6F01E3FD429AB04E5CE2A446696936F9C1F609CBDE3F16CDAB4C4B5DCF2A9588D4A5DFBF91370113807BB3F16879FDC4391470AE2F30C9B6DA459171F084A9EDB48802F8C18D4283A6DA03EFB2AACC068EA36CAA5470795C944D52F9B1F26

A842E9D58D41107DD70C7DA56FAF42D2D0CB52
E367B72B7A3BAFE6A4BA279E33151A33CCF1EABE710A33837D1BA9ACCD1E294E386EE12CA1DBB22404DCB5423DD35853C9C668FDC4EB754BD39E8FEDEF1A6F20DDB8BAFC44ED5D5B69BAEBF261D5F83403B4F5D1F156FED62C8BE733800FB08BBC6A6B92C8D098717D272528B08B4CDD6B392F26E8AAEDFCDE4F521F940D4E7C349A4340A7EA3B06448B750A7C6392397F133AC78BDDEFDDAD683B595F37194C368E5241E2874382E97EA076FAD7FACB3D30655CF93FC43B7D40F78601B01B98B70409DB032E43BC1E

9C2834E4323D4883CFCC095113C240D9C2F064882D778FED23FE1D0FA071E84B030E553FC9937E0FE662F12EAA24EBF76336326317966254B0EFC6538EF2E124781607D35B770F45D903F3827BFB8BB4B1F8EAFFACDC4988D24C28ED09D5E83F93CDAA2B208068DDF4ACC78A8C2C03D0C6AE007ADB65718BA016DD492A6ED784E28F64F07B20E7C09BD637EA5E0308A147BD136EA3F862838D935BD448AA06DAC6C11C77D5484362C0CA1B9582069A43AD8DAEB2C73D80BA96B00CB2705F390CA77D5961A56D3D6A2A

8D3D3FB8CE56E2E9EE4001ED675BB826118B0560C681740F7664DD9835A38FC22B41CE8A3CA25F5948163A37D5FA8476F151669B2462D80293211A5E3B0901F8600D46B730C8FD2DD364FFF284CABCCB6835601D80334F6643D45FF5BAF4218D1D14FF38219E5FE6134D385E58F75172A9EB98A7542083EF1E2FC7B30F9692EAD385314224C4EBEEA61E4F2B87BFD8C53B80FF8EE6A0098B3DDE87CB050206DDDF0792E5114B964728F4EAB7B2C8457D6994316E56CFDDBB61E2174D5AB477CE765E4617EA7C3EAD8A

28B5AA3655981AC3B13C7273800990BF54284651DF6E5D7232375A7841BA97450CE367C0D48862A0F41A74BE9891A416FD0A446F484D6E9EF1EECA2A09E3EEA91ADDB126F66F2599603434D39847F2E1FA0A03FD93507C7767BF353B84BEA57D64C84940E42FAE7FCD639D491D10FFE0CF8EB49C9FE183C71CECD7E80A32F6682E5124878C2D1413B1CD3DCF04A263B2CFF3C9C9342FCB097B0A75DF432B3BC4E9D71A798AE65AA908D919CCE41B528946786A849A23CFBCE24E25D174192AF18948A7FD4E5145F5BD

D0B0CF0793618DD80A8F853CFE9D8C0660EDB7C8DF9B83C6439D3BA616D85E23BA3473DE2E9A978E862A01E6E48E4038B070C620A18D168C0EE09CF23210D1C1D0522A41FC42088426A72D11CFD764E714CB9A74000767F9F92AB3C4B4E12EF044BE9A45A0EBEE16C729FF9D9DC7E779DD812CBCC9D667850E8489FB471BDCA331D2F0CEC83CF248722CB0A177929BC55DEA843F8268B2E9489DB16741D1FD9C2D51EDDA05FB34F198CEB4F90F09A5E66E59C7D832F26346B9874812130A2EB1B1A83270FD01DDEAD6

CCB9C5C7F9592409B54AC7148CE9D41683684A
6B84F962CAD8CB6DBB75B9AF7A6E3D60A1B30C9106AB190A96A5CD87A45DCD393402C2C37B3EC72EC8A8EE07A8A82824BBDF546D2A1A98D2F575498302A1345236C734646C9C9D2C94C99B560A5EAA57AFA6ED3D0063D4C2E333F7566426B7786FA95261E4CF2F50B171E5672634CC53ED44AD31468847A3065EB745AF4F30BE3260D068B68E8A2DA7BA59FB11ED273CE0A92BF767CDA3480165BC409CB59662B534A95FE545DBE7C0C17FDBA36369125C074B48D4DA01219C3B22FD43876346A6CB8969516573596F

5856805B771C7B5192BA409752B266943C950F1E993D2552338E9BF73CD6BBCB1F7E92497EEA86B3B7977E5437ED90A0BED20C5F371209D72EF36203CF88D5BF494A2BDEAAB9F6F29145824E94B928FE9BB2FC9EB09F857F38A8F30CEAD7DB232FC7C32EF0121F299C7471A561317485AC980628E43C2567B6C7E89E95A1AD2E092E1026582BEC372BD9716332A47C8CF5120D1D4FA31E19EAFAACD6CD633B961AC2ABC125ABFCD09BE5EA09B3D7B6F2DE12FC9BF0868FE68B1A2C4022057614220FA3EA75E046B595

530BD17ADFB4AC6B5CEB415D05412EC13CD6508200B9DE94A8534AEB815B57BACA814A04FF5CBDBFC76D331AAA4B4C77CD18366FBE362A8B7F6927DF71B1DD44D77A6D0E1CCE671C113313366D6EA7CC0A1293A2B812B36687EA2BFEDE5C2A2B73D8D6D0BED07B395F8451AFED9EFA5B6EB0DB1FA6EC476F6ADFCFE561B6DC1285CB406A381BBB98CF144CD2108B290D536A8EA27C893842D4B791C56F3375E4F57D8E9160881E1B4ED4B2753A995C859BF84881ED629F6B889617862C6B66850F6F036E71A17F4B36

14DEB41D7713427078827F2CDFC7CBBC3FAA1AF7F51415ABA0466FEA55EB96B1BBEA930C64DE0725FD5E8200E3F4BB77BFAEADD6C593619C5DB0BDBFE55DF7C7B8C9E2D895F4CA1F7E370082789350927348D4F75EB7DBD360C1B1640EF6FF527C51A58C3DE14D4EB9DD518DB05BE98ABC4B6C4030AEE55B335C43416C8725EC5DEF0A87823047491361FD8BFA527170D45581CF6A9E6E5DFC1FFA4E17E2DF6FB12B12617F4FCDA066EAD2B43C1A5E132BF01F9D0727AB203EFC4711F42779990A465F6DFC4210882F

8038F8C5B7FCE0F30D49D3D3AAD20A2151BF09E8CB436B7FC864DC3B08C501FA4DA14391CEE55B19DC20320BDD6B5C23893B0239E2D875046695A848BCD5D59B9D5C77F66C90D6E60F6762C3125892CB3C9C098CB1AE6EC4CD09965264E551950E2C7E880E2865DE4E2AE202F64F6EABDE7CE341CC728D18DD76DE9F393B150F7572D877991AB649177F7439F8C5DA0F9722FC773115483D6A2A56AAE7ACB329274E06D5C0F1D3FDB16E84A489C803B164F4FC0212B8F08DFAE7044F2C61CD77F442C6B29488A02CFC

C86CE86B102C9C000FBF65E73B696958E88B99
ABDEA0650B32426C3E21AE7CD956447336840E90208CC306AB0FD4DD74DE582BD18E1E8C536B9B9F336DA38DE99815A3AE9DA4B5C17F571203C4857BBCE014E0B8DB5313B165E03D9651E97F4BF8F7F997F7EA6A65FF3612941A4EF5E6232886EA8C5937F5828B9E25568B391DF65EE419E23834EE470ED310669A670C612EFACC0EFC007A7A218991EB4B8EBA809A3B66B7398B083E81FB916A4D28FA0AAC466D12E624B414A705ECCABF448F9281966909803D039C4B76ABC13951E3C4C45C48E8847933C0873CFD

57C4ED5F7BCF61D36FBC0856C4769387195064F6CB5C55A94B0B5F5009DAFC4B75073FB97CD2322AF4A367EE99E40772C302E2552E51AA315E5FF877B6CDE434FD21A390F923B1228D3AD230971CDF7B52A4A6B44E6B38D7BC949DE31F8C07337F614CEDBBB105C38C7F83E3FBE54CFD44FD092EBED56A40F0EE40FCAC7FFC59B482F46FB1B9076C587F0F50F9A4474482FAFB3545B81E36D2CA81D038638552CA3F2371D28B2052876583E8AD81328FEED04A05548D553D227E0563B4016E3B1F53A49C7778EC5995

106E402E5376B9F8FBC8E86231E1E865B503C7304A3834FB59A712FCAFCAAE42202CB05C786CF03FB552823D2209CE28E178A75D1625B068192191BD1A445B74012F8627A99C0FE148735D31EEF00127996C5933B07196802BDB434DB17803F3FE1BBBBFE88BD716A6C0953BE3634C80E2062E102BB709372319937CF385FCF39FE18EAECDA782AD0C60F8522C414E3A2244EEC99708772D25157F7B7E6CD1847B502DACD4C3DE7387332C66A4EEA16414DEBABD7946CA915F674C455DDE2859CA9E7BB906D2E01066

245F3CD4C1132CF68633921F103C1BA0F08D46923EAE254F39888E38F2098CEBC90E1BDAB8018C7750D2C7C7888E21FEA2F9C995A3D290C1BF6A800033EA2E154203A14C37B2C65C69236CE3F5738827FC9024AAC0D08D4EA65B8EBDBB2782D919D8AFC13C4373205D4CC5F2D2874AE8FE756C597CADA69168CD13E2FBE10486F41D4616CE9182281A74E2681F7395C232DB8A1742106BF18087F4E3EFBBFF451F25158056D0888DB1DD3E7327C4B73CED239EA46EE7751CA20D18FCE062CDE0C933463F9F22A32ABE

542F1D5E2FF907259707082FE1C2BF172C8A1A20573678F35FA846B955B9A32F688BE1EF13ECA6AE8DD71A4A9E91AB8CB4CA595AB64A0E0435CC9A0A1B1E087552425317DA557AFB0A7565A025F0D9835B2CC848BE22347336AB643164D875C5FB326AB94B699CA69AAD461D8FEF09CB6296E7C1EC355746820A1D2C2DF9D9642A3DE64D11E438EB2234EB41845D31ECD8DAEC514D4AE21F37C055D497874AE6924FDFB1DBF59BA0393AC3C1DE7D632DB510DA4BC8C79ADA9C6AA52593935702679325511C4A517BBA

9B49396DC632D2927F3343DFD0BE8DF1BCB6BC
EA9813D890959E8342043DFD157EF0B469DC3A78E4FFEB1087302CA399E988909E761D8231AF0BF73B200F09347DBD4700273CDB45F3FFA731D04594736DEB6F04B70062A99A9A96DFEB63BB12E17B15203659C5C1DFFC5447A11B2C7D7458FC90700980738F7F59E038A1D8A07FE31279513A28E56C04A010FAC86C86390D6405CD07FA79BCBC92D8B5CC9CF458B5D2E31BC8C36C1B7E85D8F80819E8B716C10892D5B6A16606C9D68C3A082AD262D6B3ECC88E19FF56A63035871E01E358639B31CA132F6C92C6BF

5DDD62DD6E20FEE32729829F3946BF8D560F80AB5439A9A46E3FD06FD3AC7AE39ADBDF34E7DB727DEC271FB9BEF2766BF6FF1D6AC10AF72BDB88BC4987C414FE643EDCF0AA2F867E3D4E49C66668E570DF6061DBC0A8AFCE2A17EB89DBE8FC276E63DB71FFFA97CC18ADE47BF4DB4B50700FA06EAF3737489F2EBEADE1A221C4BCB0889E0B8F32AD3E8ED301B1D4BF655707F71BB5802D5754A353112C49927B4FB7237CFF18319F0D2E1B223666D63C798EC014A9F34855B318FE13F795A735B012B516D1D6B0A2B0

BAC5056BB2910C5588263577769CF60456B8F8CA8AE410885DFB15E0339CF0E46AF913338D00DD3835D6B97110EE2666A58171F7AC340642399F46CAEF9A127BAF3C2535718A0801FB61069D1DA18E1826D9E9BF534FC019A7846ECE4151D640BE9E2ED1267FB0139811A53F724C736C68761AA284D0E744115D71D186ED30CE416CEE2EEBC57373655C1E56610E42D35DE77EFF02F64742389F2F5C33BC2490B0AD7493B41E393ED5B64AC6F27B982265C60902417487EF29A77DB7B30371C0E02FEF59C8A09C4379

DD67C14B47BE8B2D07E77009CAB12F70CA3CF29D54CEF4A633660EA64C58ACD05386EF4D20CB0C087FE196166CFA7A384316AF00E3BD47A8455B3A9F6AF8ECD523762F4EB6141A6D35A121598650D34F59298565AB4D737C159CBB8048EE219082D30C9CAA249CCB0EA5F3B691680569DAD64B1B48BBFE4913D2D09E82D4E52505D3E506929AF27738F58141CD759F139A4D8F0F797CE844B8DE34DD308DA34699F04E82F937CBBC5E87F677F601C46B50B9DFE534C4B53AC0FD27495F36A9E8E8B806AA994F92FC0B

259FEC9109B8009E8DFF12C1820017141E8D9608CABAA57805F6C5BA9185D1437F832BE938C7EF207B611676B838C8A83CB1B1D8B5725C75BC2A7AFB21919C2816504BF2650AFCA5B92A37268845D282B4A36CDB48355DEA09C651B3DD5B422E2A94B7AB0B89903CF0E335F606F8C2F83B252EAFA3AD8D7AC2C86AEBAEA88C1FDA44A2A664F6B65A99F8720F6D748F0A9E7B76944C2D6ED852E6FC326C06D5E9B4C40DEE8E8D7F51BC1C6549F615437925EAC243B5A5157D668F5FA770B239D5AA2F3AC432BD2CFDBC

4BECF023507A622E9B460B642834FBAFA6B75B
3CA0C3D8394965AA53738AB554D1FD7DB854FD7D222119800FBD86E9FC1BDA312A4705FF6917A44C47B34901C96C3C6E57868D64DA4A715C98D18671223ADCBE26E10D27F5D301D6DFD8A15C0F9E2A4D36EAAC2228426DA6361BF6941E8220B39B488F2EBC09AA6D0F1A3C5F4438B0027B8DD4958EC8293F20BDC3EE2E65E2FB79E844148F1ECA5D28CB294B892616EFA72A5A6366B2D047CAED925D4E0109F8B82D74ED7D2B414CE34BCEDDC4E409785500C6F2DF1483BC60FDE09A475B9C14C7B2FFEC48B136ED44

9AA241D2C586F1DB491725894EAF554F70F154F4B0FF1547DC53FACA02B0520C75563CC79D776C84965B7BD45E187C54EEE21BEE4B0745BC084510FA641E3A4C9EE45E1DE2A0B2B5AF91385E416A78D407F6D4E7D0E04BA8E0DCA2C51311AD588F09D0B0557D90E6DFB5AB78A19006F6920F8962A6BA3393750D20BF1CCC0BDC80D962950E6C3012288B13922A48755E28FA6CA3B6DF2C994BFF942DFAA5C40254984EC0FDCF08BB364A2114C6E2AF636B823B778AB7B9CE6B78CDFD0737640B84EDB788201106934A

658FC6F05F79EC30956BEDFB31E414D60DD22FFD9FB8283FB3D81648B3D743E854EAC88857EBAF01774FE247BD77DA79E4FACBB944EABE745C214CF29C68E176781BFEA3FE9D36BF6107B79364548A65DED011BC079CFA1330F0C4B8D4573C287C63AFA01C15D5C3F791925D3184D0AE6DDCCF7A48EA911C2AFF1C2F69F3CD731433F20EF024FC2A71F426CF93B6DDBCBCB604E437449186B10322F1D8050412FB96A825174DEFAACB29BA28631DF81D5D1D769AC61A3171C07FA3A851F464693F9B8305A37AAE89A6

F9C6070D929DA65215C7A220D0FDE830B0596A586ABD8754166E7610B9D956687A209E813A40FAF204987A0609FD2E472425DA936EBC283A2D750239D22F5C2C9DB35034FF9517BF1FB290BC965B0076DF652505D43A4144705F2047DEB00A7F9BEC167D4A982B11FBA00982EA291164A3EED9805DCB4B6F74B05D69FFF9D260E25629B6AA67980AE6F6E966465653D0CF2CF38D8F7537C90D3C5A6D6B10918BE3B41543E9073E83A7B304C91135A45F4DA09502D795A163C3D882619C7777121A2B8ED95A979D338F

01B11481D2470D730B9B58D18BBD3AD7549FF5CE006643266EA617D3B0E1A41BB4205BA4FD080C870BE50662CACD183DE3CB6263DA9E9D2CACEF6F73A147F02DC274019C662C0741D2E254FD5F8AD387B5F60E75849E608D9C1D579EF64FDB86FA76E0B48506FB2FE9C45F0802DA352476573545F62952653C79F129FECE3274C2066E7F06A073DB8B97B72F307748EAAEDB97EE72EA744204BF2ADDC23FD57936A0CE729AF95E359634C10B87065D98F053EB821F4F92DC3D732D0E44FA212EAFCA08E3F95210CD4A

40BADB4A3D22B10016F9E6F99AA8E5196D3DCA
F34810CF4F889B7C499BD056C7C9DC7A3A8752674B32B3497356958318A06364839744B7C682F9887668A6C603FDBF06D4AD5D9F93B8816BD19EEC3C71FE7EBF276B5100EEF5424A960D71E9AACDA9CD1EF534CDE146599EC6DE4D4C349B8A0A93843C1E4222EC9C9538748F5043071669776A4EE38CFFE908A3F950918DE75BBD9C03CE7F091CD5602371702E40529D9161BC88D694109FF9EA073D2F0800FCF723F3E0D7771D1E0D889584F99E45921AB49A26421F6E066DC9E499D937C05F0DDC5ABD48CBFBAB2C

04197982179064EC6C0F10696CD59834C0A9E9DD9E068CD735BA10E44E8B37F103C326DB02AFA71E74BC5E49CB614A6EC7AF7522411E2288D7952A7160CAE412F6F1E9ED6E5DB09D23227D53C9D90E1C4968DD40AD83D56DC2D0AA6F2AEC61FED0630E8AC4DAC8146CCFFDA80656B138CFAB226BE932D2F575FCA423AA21676BD353A6A320D359488CCD9548A0A7F6132D2E239CAF71F6022E45D411CDA60EF4D5DBFE43E79F05F9369F66860033121E96C1DD6C7BBD1D0BB8C70DC42CE8DBBCD3594BCA9FE72833C6

628617B6CADDF35E429A0C3E7ABB1AFA7C526B12706801ADB2AFBC801886AE017D33DA01EAFA6CD99519B2EA1FD1D5A830E858DA55F5DECF99849130CA0F14FB6FE6A330F53F1ABA44819A8A754281FF3FF918ACAB6284711C5722E3998E84124F6E043B7C04B2C8DDC36F23008171396BC6499F0F91A081E5C7F2E7BA8D6C8989C9E0EF89F98F480B6425FFF16D358EDE23E7FA0D46D77008999AA01445467A06FB70F495F5F4FED324E8FD8D884829868571E608078F332A160817196DE6FB8E17B9894B9BF2257B

C328A57925308C29310A697070AFE3A1E2C4EDE732503FE95D1CD78F056F05A3FB75026AE59BFC5EBD9047AD11A611AB2BFF23A57F2936BC0A3EB77B562750C2123966A35113080DF157B9DB123A2EA88E2DA1121D9AF403DEE46F0BE73CEF2AF709069E942FB7D9A00EBB573F6DDC196FA9EB35E54F471FA3B6277DDA55B03C994F0656FA2F40C7AD5E2189D4A1D16EB32809FC42E464972C24BA71B652F9F3B46CA2A9DD18CE4110C0778AA9B7201C4ED6A720C2FE029961F7E5BBC22622BFB07386DA73260B0BEB

FDB1DC44DEB91C9E4B7CFA6C1CA54EBB4B0EB4FEE01D6B8BCA666659710331092B871BC75CCD7F563F16E8ABF1B66FF5EE801E6FDD883A81DC0A5107427E7A6BA3FEDA569D2A91673DADEE094B98825BA0F1ED230A7F0CB29394FC801991AFE6490EA9290296B25A820D99C5D0F70F1FB4C45D1CF8DEEF9B862A2F8BD923F1FA48B74DF9E7F6F165B295C8EB75F9C931A3765CA856A75BC567B3E6D96FE1A7CEDEF298903FA06E596E4BAFD5E8CCCA5B3900C6901503AE662226FB2AD0BDC2B37C66FC96767755CE65

472EA05B0F78967DB5292EB53A6605C05817B8
0EE72A5F32B6933D1378FC69CDE4694E6ADF5BC97CF5DA55A2E2B8D3A0E9FFE00A7E990EF78A12E7EF53BCCAFCAFE869D8867754954B68C64E7970CCCADDFC3108C820B0817819EB5A75FA6AD7BF04F98DCA8D23B00078AC80485FFB98463E993DA741EC3587E1D05406D0E6EEE080F1535FEE06960791CBB30BD675E2B81B3485FB7E672F5548E6053A83319CE3567F921DB79D0ECA688C285558390DBDB21366556D404E250DF3992E7C99B8D622918DC1382A80A2A127CDB8B6747BC1EB995B122675613EB32121

61B44424C266EAEAF068BDEB59D50D156BBC5B134530533F0F49788A576C32ACB4937A5CB64905B21BE488B95A26DDA8C516C0F1264B4F1A345D9EB56FAA4D8E9C2704F9E30C2E7EE30BEE413147CFB2EC2EF071EA62CBC8FE1607ECE0936C9218247BD5423F82D1A969DB34B0DDF5572D49617EF4527DF5D1B761E64903506E17B479F7911C6E89CD47D41868AA5C8D5505FC28B906DCD9A74D96E5F669F70FAAB06B9EFAECA57850E7C2CE36197EEC250F6B46014DFD3E93DAF2591EBE4DAAC5B67A4B0F0156C035

93DDFAA50AA4677D8693FFD7582A39A588DE243580909704D92ED2FF87DDA662DC11531A2E012142347092F06B3CC47E4749BF6C49E12FFC9DDA27F79DF63EF8B52A282776A812C8A017217459BED669FE0BF708509CCD1D6B892CD1CCF2C305F7DAF739D7ABA851E1D9513E4DD5C97BAFD450036EF9C716D8C1C780A58429FEB5C42CBC9F270725DCAC5F6EFD0D9966A20BDE4E6D62D44EDBB15EF788EAAED570EEDF119E6070F315AED111C28FCD8FEC083E172DDA98C8432CD023C5E5906054A987F4DF37D837D4

014A65D32CFE9F5D6A6B1DCECFF7BBBDD65DB7DC4335D2F62AC368D8BCCCF248EC7B61DABB4D3C87E3765988945B876C32995234AD26DA2570527BF2EE30A8EE1659CD5BEA49917C7574AA57A93DD7939C29FF3A4759918A6D7068DE7A6082DCA6C058FAECED67244349AE5785F1F765C6ED5B08B1DD677CB1638F5FB02DA53D9ACB9EE2A0B2E3062EBB618D7FE5A712EDFDE8DC03451DCEC796EE70D158D5C3D91EC630BFBBA21826A2DD9E10B4399430B6F7C3BC5AEFBC290159C9C493B9D0BC63F78FCD4D3E34E4

A17D8555D1465BCC3DB780AA6D2AB38CB8155CCF9837EB1873F42430E436276CF0E5BACFEDDB2E962CB4F5CB99AD60C74C31E8E6048C6CDD72D4BB0354CCD2DCF517ED162F5C8A59722DFF5FA74129F51D2EC2CBF9D41C5989546C19689FC2BAF5C37164C03F871AAF9C9C34673BA6F030B76D32637CC85868EA3409FA6D2B45756CC7E159B4C150C57AB3EA0792B3B4B2480E78D920FB268C3F46931919F4EB7CF0C685FA863FF4CDF1AFBA5653554EF4FAE34F1B4FF397AC1DA132C26B4E3B27B45ED622EEB9BD7F

8AC4FC0C74A321F96CDC76775F96FC1108FC89
409FC8A1B7473034FE2D7CD1C211EA768031620EECF1B89D2ADCCD3874A7FFAAA54FBBC85E5FEF357593A57C032931A4ED3FC792B9B029E8602AE173502E516733F38C5C223EB3438653C017D8BFB1FE4466E0DD92ACFB4A759D686B6EADA1007EA3310D4B2E46FA464CBEE45B52E67D885BA7CFD3EBB94B42AB07D72CCBFC4117FFDA9E008D1A3B4CCA537A229049DAC58CF71B6160F0F69AD1C160D29999BCCBE3D821CA6AA822B48A2B7129F99FE2E4BD3E0CF37201B1171F922BB5A052C463A9A6A406C2328813

752E6C8EEC49D241EAFB408F224FC6C543F920DF1880357559D8C2BC70F2B9D1D095E93BABF3DB631F356049CFA5EF6C58AFE0C47A0209F067E31B6329BDC3D6B1B5F6FFBE0FDFFEC5DB3267DA6A5250CB180DAD5D685CBAEF3F8729252DC2C02D3FFF49CA3C50495385CEE8A32E565544CF57793715ACF44AD9719B89826444229A09C7090BD3677C827EA3604E4FF4D9C13CB34DD81EA657CA1A3F8034856646DE9A57AB2AD6FDE439C2D2E4669E32842E53D245044BC960512D63349C3274BDF7FE3C9E32DF0A5C

C327E8699E2C30445C2E22E3D86ADD55CC472CAFB5115C5FD213FD16507A5ADEB1C9C3E0B7FF5000C27EAA19F0CF4DE3ACC2452DCE3723E3DDE268F922DE12B739E1DCA68BDA9672EF81BA49F88CCA2D63532CB3885C21976D958920D509ECB64BDD636271378652FEB71558696E1A4A8C2B502AD4E56D24B119642644CB1F17F09D13741A92D1C046389DAFA37CC51B7F73600E8A4D7F8C6D4AF7C0D6A4F2DE0E113350F88F083949703880F6CAEC7CE2DAFC2D18846C5951C761F59F32E3C91C7AAE509AD0D91F42

5F21C2B0E1809B234E032FE62EA0584073D1534520FAC333833AC0ABF7D98D18EFEC7EB23937E7BA05337ECFC277A4AE3931542B113F9902B8196EAFB6B65C7686BCF4095A3AEABFA3AC6B062AD74B465F0B4AFA2DAA6E65963B3BCA3DEE1C76D053B122AD5FFB10258A82002DB9EB3F9724D91A95F7FD8D27EAB29405C2FCC287CE0081F562BFD27269E3EE57D7345A9257000791DA534D5B9D7F7465AC95B93A57E5E1FEEFFCFB269B3520966F3D83ED7A0614064FC0B361CB1A86F9D976E9DA4C772200D971CDEB

5244985BA829222C48A21E1C0314814C2B8AD839AA262F6FD706B7B3C156EB5A9E47EC86564010EBF9DA40280F30041B8218A4D78030FC8915791FB4DCD221322AFD276B8957558B85678537BE9B2400B09ABC37F4C28CCA7F3AA8656C00194809A33D4B74C34C4BFEB86EBF4BA7766D8F48B25AC763C1C982964AFE8259603417255D31116BFBA7D71C74CCA45E761576A34CAE68FB7888C8C9783823D80D9E052582BB384B8BFA1FE8CEA9ED899E0F3F3B77CEBD89758E5BC1BC03385F4FE27F46EFDCE3764A358C

A900B5BDC13D3C5CEA9197E3476CC95829D1A7
FEEC1DD51D0655E48896F859B14923DB779C00C29088937E4479714A5BEDAFFDC5F7239979CAB3400E0A1FB52A178A1E352B0638D0991E5EBB005205D59841BABA6FF2EC20DB01B2E54A964A5DE39C5E69B08B195FFACDB01FDEC750545CF3A29002E0E0F236E6EF441E01F69E90AFF42B4DB0F45DF039BC5EAB226163DE80CC7943F05E5975A48CB01A0401C7578143AB44336CC189FA7A7034CBA793BA19A5D2B86A71CC7AE2FA2B7463FADEB274EBDA8F7DBF1F76074886922A26331B1060A83C9E4031A966EA5A

DBBC46362847AD3323227A9BF57C8874E922D528DB800190C80D445A93B527E88C02CB8D664B838969365A86CE85D8A5EBE702F7440C9CCB2FB9E5E54A66FA5AF6B0B6A7682EDABED51AE71262042174A692DDDC303BE18D610C6086C1EB2A62E84846ABC1E0F067C0BBB6D07CA97A2EF7BDE16BE1B8DCBCAC8693165F94A04CC875FBCD4EABF6D7511E3B0687333BD5124591F29C0EE27E8E198D1718EC1EFBFAAE13156A59CA2379E1ED6C9930ABB67527332D6B1D3D6C7123A4ADFDA4F4464CE4D5BCDC6CA60A1F

3FF867EA90883791974602CFA5826E2BC4E65768519DF8B35F3F70B1F5C01BCFB3FBBB0217785E8D7D6BAA108537F37510E86736C219E883D61E69CE8D51F5E211F37343A1F19BFA1D5CBDD3F0D2CE7964D1EE437DB82EF7A7FE03CFC7193B476B8ADB9B16BB03EF449B4AD61F90A59D23D231210F73644355742EB41A2A6C8D8B6F98218869C655534A4C1C4D40390A6876F7C4019D1451D4900F7DC9AE36D294A400E716FAF19E4174C60FE22E6B2195C07F8FC6A5F8C8F0389D70A370BD72167B2F2A295DE6E0BA

013E0FA80EC24C0876B358E3B4D27C42611FFE81F3AFBADBFF77614132674EB31C4BFE1C33BA2912DB8921CA8BBE34844540D125B9EFEDF1756565DA38C5A954F813E8DC99A8DA6D6CBACB0C92104D450D2D2D4F6A0CD6605139BCD138BCB1FA64F8E74A41E5A2F41BCDEF568F9BE8853C7F3922D74DDA8B3D3BC843D17C45070C218BB1AC1CA5774F0D3A0325C4531E265B7528853FD07A3D9E64E3A34F4FE678C4E455F2CC46AF72F4596BD2DB7C0292F61F2D4232096DED24FF6EF7E92809F011FF0E9AD190EA56

64A8FCFC2A5A571DCC17B4BBEB7ED04F6A47C52C15C1E5527A0A53D975CBF590A10AD9BFD430DA2C9B0A2BF5906A019AA02B685EBA043DB5A3BA71DD085D91C00F36B65B2F492054258E4BC3298BFCFF2C3C0F6CD1137EA752EC560D2453ED1D175D08287AB6B315880CC928A002D9DD6A71AFF6BBDB423B151059CC2C629F59F53160CA1D702E725F47DC140741D2A03ABE8C9DAC66A1A6D6DECCDD7480EA649D71E2AFAE51FE51C51FB42C9F973500DBE7FC5F731F25B4E3F8E6A7833BB26F51B1C85F3044F7F690

66FC6EDE7E69137902451D3C280042DE208E73
BEB1BBAF81E59F6A2E7838CA4647D370F4BC7447788A3F5F7A878532334F3C5E8E58187585D60CB119BE9BD1699BDA6DE7CD98CE1026AAE882D4A65053FCD342CD620A646F809202730CE678AEEDFAFE00D38F93E8A5A2C918F8FA277D03E7CDE6B0FA867EFB60E91099CE30D2DD6F60314FFD8AA3C4E2DDCF9E6856E16989B8EB036E37B19C51D211C43FCF5B1D33979D55CAFB19365C5CFA45B2B71A83F95886C7489E1CF9FFDCE01B050620988B839E144BEB2CF3ED35BEDC0C4B978A16869503ACE2A43489BA89

1605DA722A65196453494FA48B7FEA4A996452DFE17FA45CDCC8A9061C03844F9770F787F02A867B8913D02E56F01DB894284FCAAC4456FAEF418B13BA286B629D21AA4AEFF817E56DD07035D584964588F5B1F961B659EFB033727A3696A5AFE9A0B78A3A983084649E50E7E3EA488E3FC5ECC008724395072802CDB288287B96188D504E370E1716CD2248070BC23CB836825EB92CA0ED245F9D45C057D0190BB00F60AE6418CA53D40F78ACF1EB4B3F4DB36B6A0D63E19B31B9977E8FF60F3E758ED187C8D3F0A3

51FAC33C52DDB850438166DF07977B00250CF7DA2A45B5A91AD4A0505CFFB0F7C4A512873CAA2727E6097A2004BC9E9103655F5BD32BD9AAB68AED66CE8BBF8AB58063413FECEEE2105FFE49E7B3C63F15980E943FFC6FA41F7B243E2CD139750B7ACAF5CF3DFF8CF9E9C5A6A04ADC5421F170753F3441EA8027E9775BCD39C29EA6BF14A5D3F5BF169A139F95B5E0862F393109C9464768D0E5C409014A7C513F33EC1E76C111D6AD9436B7A79311B230908B097E7E782CAF434BC0D46B0CECEF8C35FBBAC0A55870

839C4EBA38BD46BD0A7C20221012DC25DE1EB24680B553C4E842A7975417A20FBFE96096701AA9E0648E2D78FBC247DAA5528101B99D3C8AAB1898732020E2EB30E9E7ADE40C853B5C16307F330008A7DF2043FD4A5084129FD4267B31DF37932B30C171D7A8E31814FDEC85567AEC62A9FA3A225816054C93F4AF2AD4AB7CBE5F43165165F33C18D264F0CA7705107870305E0B890363F7F05327302AB6B9BCCBC7079200F2CB7B5627672B7B8197362430CFA712AF3197EF29854A7D3FD2167326695BDD6A4F083C

26E66B1BA11E50E4BB5F52BBCB6B8838C24452E16C268F49D53445B892CDC80E2F68E12F9978C1EBF93BBC0C446F8D914415F8F0ACC8E935EDB73DDE350CAD85CD4A4B4B601889459760C162B1773652049C9666707C9916C8DAD235B5A20BAA79F0F1E58F721F15129D8A906942DFCC12121826F8756A869189A6C72E3CBAA56EB59985DFBB401F3E549A39EC1FEB39A945FCDAACCEBA649B5E4C29DFBE1EEFD4A6277DE4DADAE60A295844089AB7419F980976EA05043AA7ECD152EB955A61F0E35FA1F37C6FDD19

ED67C97E2ABE31CD3A69D6D774FA640490F5B6
04EF7943AA719527DC0AB9FA008ED656572E41B89FB2683BD5D94AEA8BBD6E0FDB7E165DE62076EFE5F9670AB8B898CF6BA1BCCDB785F45272D62F60D213789164F4E01D6E3E059CD88A07955E52D94D28D0BB7534B34BC1A8384D200C328FDB4178717535264B11A5C3AB0D66A5B964E89C420A1A07308A5FA6499DEA9F62F13E2AF05BA52976D2D98553E948EB67D266374686F726E6403B8297C9E4872B5F2084F01AABFBF3478DC7B2714702D07CC5C6D6E9F765AC201F7BCD694DA3F3EDA9E1D016DA448AD00C

64D7C1FEE660E37A8860FF066ADAC7DF1D92495DB8E4BA320ED3BA4A5152B1F9FC33B15F4960FBC4C218C2A957A1BCD25823E0131267B6E699464AC35A8E5539FE47B3DC739F5EC9A0B69C6773C1DB8F5B65842BB2BC14F207E0BED7EAC016425737B48D9E06E7411DD4F0F2494F9D15B1EE7A952375111808EC261F0CAFF4FB014CB194B9EE58F94B7C84EA3831232259B1D2C8388A0832529B9C3486E59EC88F0CD2621A8F2E2D6DE425BB9138085DDBCBC113A5DA80E2FCAB43716F8F4BBF1CB42DCDA0AE38B281

2A7948348681AA2408ED74CE56CDE2638CC7C72232CE2881382F4CB23C680B1172263EC9F5B572488F31E73C3A491BDEA299D4A66BEE834627C8460EF42CA919A506DB799F23023ED938B15026C9520EBC3EF68907063A8D2FBCBE0032A4A9BDFB2B7584E2549684BB3A7C2B328F188E0E4E8DD885A8C5E36D54624F4B349804818582D082C6F73A8157B3C1C64B8D2004EB52885E52E5252315E9C8DCC0C9339D29BC506D9C14F03E45CA5840119725FAD0B8D9F43C24DC621672F4C7F19A71FDDC578E4E47335FB4

DFBDC09F77C2C275D5C0E5B181E54DF667B65D97FEE072DE6DFA6223396D1FE515EB91AF08E82243F404A3EC2FEE6C7BB4C75F94B996456735658FA0E3030DA18F23FFE371F981F4248202DD5225DABABA24E3D1DB10D14D4894209F72134D50DEB0DE6302AC60AE3C415B2C5F985393DAADC69BADDC0F492497BAA35F527C78C6299CEF0FCE54458371E782FA2A0F7D5C80A23A45C0E873D5496A61A0B086EAD561AB0D33D0386BC4B0B913EDA18D07BFA1520DB3DAE6426F2F21FC834E19F26E56125D5ECCE3A627

49A89096A96FD5516F7BB9B23606E81524DABB9E888B2E696B0188D599280CB8918CCA6840B81F2375E06316891906CFB226853A0645B801202937F7E98BA7E4676D6835397091E0FF9DBA9E851E17C902FB226CC572E6BB28612BD7B520E4F5C5B99C9D6571220A690167F9EC0DCF790CC0D310B6214522E7218F56553CDA539624857EE9E0FA24FB93B1FF1AA22DEDDB07D4111D33FC6A12F4AFFDF60DB8807F684EA8A8B6271A5C7F8D63B66AF21F17B92FC79269D037BF709C2633FE323AE95417AD1FD1A91B29

9F5A317E4D050E2308C66C28B1754C55DDFB3A
360C0C65954CB6C82266CC50169418DB0D65F8B2316C549B2F7B102D44ABA8176704865351BE847A088D85C7A3722BEF77007CA5F07A0202B39A23435AA0792914415D9A8E6B297B5CA595ABBF8213C37FFA6F29DCBDBDE7356E7EB837C170E317FA559F5EB06DE9B45ADB3F8A1B30886B273C46F11BF8DE124F8C4B7691260457EFCFFA1B38A7AEBA1F305AC557AE215536EC2DB3078FB4F9970BBA87FA91285D384B3E65BF876CF9B2DC34191785AD129349E32CF354CE4583A217EF8772CE886B2B2F2346AD5AA3

5EFE7B2A3AF89330412AAE1972C8795C0024463CC94B91ECBA2F07FDD22E3A961C6B2945A0605D6A2216361537E788412F748F10D2A953DA31974D3E75B648EAABBDEBE4315D401ED8A5B46B88A654D96CED1D4FD6A455EBC5E79D21602F659C0CFEE2E5EC656DDCE2C9A372BCAC826892CD10C01006DEA969BDECA8E1CC328A7D310ABFF0ECFA86B5D20F32DB12AAC37AEF71834D91BDD36ED05401E0904B165C7A20EB1CACBA228A81DE356D13356B9B3DCF71099BB16F4286EAEBF94F18B7EED937D350DF60A1ED

D108E6005873F19793BFCE3059120A79DE268D84D70FF6D5105B4E86643044CA4DE37C7D82BBC5ECEFE9D976A55D9AD9F958F48BC107585081CECE5EC3053E8564552FFDFA282FD47F2420EDCC52A9B28DA4D7DD3C1E438C61AA6F84E6C565556354942B4AB530157968CF972D41AB17314C35B03C159B90EC68A5E3C18FF50F4E3D39C45C70FA5F35027D9CACF3B3DF0A1DDDF7A848D92B25730E5B7356CDE5AA5B39377B53070FCCC33A475E6D21DC4CEBC5213E232097D50CEACCC23F3939CE4FAD480840C4CE1A

2D54656CA933E5A0FF11DDC46B1C67B20FFF087253C28C32F6E4B5D6175AFF893774118843C5104761CC0BAA80E05E66F2F5D698FC1774DCEE12FE83AE011ECDB565BA5031E4A0C857E9731546FDD437CFB2332DB9EC29CBBD3E2CC377FDA2255E968E1E3726BF013907CBBAF909965FD9AB0068F1B54A9D0C9E592AB88B22906B76AAF0C50C083524C9BD7F9712D7C77BBEE46A7E2E4A756286FFACA3A5E67DEA063C095A0375497E60E398C07B53AB5700899E11552F7239B751FFA7C46B8DC1307AF6CC54B9F124

A9A08DA600800F562F482417F408403B30F1E780666C322147CFD6F2D48B5B0392D2E31596160194F21C7EABE52F62B4BAA9174D2699F8D0AA4DB49D00E2623083FAE8E9D2E340B13CD6815166C5BF63347940C54F5235E60BC028296FAEE359D7F86E6E4B0B9E66679A53350B1F072C6BF5540529B9E7EDB41B3DA823A55D9134C68928BFBF1B8F216EFBC0BC56CF0623BB2A49DDD465FBFB1F109962CDC970BDE9ED86C0D41E6A814E006B431B47BB831F8F951771789E6DBAD65603C50A65BD0EBDF1A4F8DC6D73

30E0D267CBB3057C27F287457758D646E83A98
A3CB546232BE10E13790BD0BB439EEE953E280AFD8055EAA0E914B8E84366627B5E54327193FD570A28953A84B8F333B0F3DBE23E27F89C76ED43F481D85A29907156960C038199A68F5EE7EA6A27202078BC61728E0B9CBC86F8F9BDB69B43F0C76F501AAC842FF7B1CA9760F80BF71E0745381C85679D3E50D601B97667C6D5A4CEDAC4F3A95EDE1C7E916ABAC3C6F6C1CDEB72278EFEA62518334BC9727E6A6E0AA42418DA7B5185B46FF18E0CCD0254181F3771B914EC16FD119EA7AF1DF8D17027DD5250F5D08

26032D039FF920A58E2DA120178C3771465EF903DCC2B32997414D5EAEBA28FE006F3F1BFB7AB7363414A781674D761CDA9B792EFB15294641A6E22CC2D11BF072E3AA77476E2017BD309BD6BDA7323A45B045AD5D05F0DCD85A46337D80B3B69C20A739F00FC197BB68A7B2DF8DDBF9A73A15CABE1C0EF10D695B7034CAE1A3740B1C2CF1572AE745B510CD224F2B2C1AFEFB50BF3147461CD50062DB36AAC29563E570486B03C2DEA477EE96DB6D0316AE66BCF6CB2AFDBFDB593FF08B3E4C11FF4D26E2A30819AC

123D67B155FD866DE3B3DC7233FD9677AF4E2E423A991AB94D27127FFB6A6C2F461EDED5149AE961031F56F384AD8FE46E17CE00C54942ACA0A2012D00928430C52B695210E6890069E763919F65868B232BD0D96ABA25CF73DF69DC6734D692A9D8CE810E192955864EC04F3B0FBEA571620BAED92094B570007AB17C22A5511A094C542D2A79ABE3BC27267EE6871B101A9D00F70CF32E716C52B24F555969162A429B0981928443544C191EFC07A640E8B0043688D271929CFEFBE1D0F0F9927C0BB072C14F8052

BAB2D8076A0FF777D3D39E40828FB3F1781A6245A25E7F2FC408C43A137A39C4DD5E6EC635DD0BCA69F9031F4DE137ECD111D232484B97AB64C7AB44D337B2E6126F7DB937C25EC84C6EE983D19A470327AF3DD77BE009EB3B047B4C421DD080D4679D19505C39BA7225CC1854AACC7C80B232E47153661EBEE89347705CF0BF5EAD18C374603675AA34DBB94EC40B8EE2B5E24D88BEF00142C372EB586D01B62036A34C5FB8D7BBFD673D28D311A87DF651DC97B81C4847320DF836B2C4CE6E7C817D9ABE9D9C1535

2C8A28D5A53FC81A6A46B6D6426DB51C670CB23B828DF9479F7C060CF65E69E8298BCD732DDE2A0DBE9C4E8A042EAA30D6E777A0F6583221CF52006FDA39CC6E65B9CD289BC27FDCCD6E2706BA2A26B97BA4A37CB4DAE8A0392E3FE26552B5F7912FCF666C232C9209C953B032C122357E17CE24A2CC1F86D4FF97080802A02AFEF0C7EDAD303C7BAE3C4F4946C19862CAB0C0461AC5169BA68CB09986C1DD0290E3746789DFB92D5A4F793DA075EAD5EB70DA3086FBB0F78119A224D23A13F2A240339FE2EDBBE4F8

261F7DE44401798088E7E87586E366904DEE66
AF56AF95C136052AC577BB4DDC81C57AD5268D6B87E33FC8820E2797218FB253691AA9333FF9A645C774FD7BCFB2E897FAD23DFC5F26BBC7AF8BD88799AD380824BD9B1ED2D66337AB03CA5B32018C9284538CB3A2A998893672ABE99E89DBADB73F64B222B4EFE3C64A6C92953661012E70A883B18DCED6B5B2CB31491259CF926C095BE91CB71C0A98034039D9B8B67B6F22A6BD5221B35A693A00997A63886AE4A5A11F33871C9EA24C22FBB4458461134DC9A7BE7E8DCD4AF5B3848B21A0E97DFEC5AD5B4CFF72

F7DCCD905869E1D994A561838181CF870B9E663F06B54C0738454E807BB206AE0AA6606CBFB4B4CB5DB72E8D0558EEBB45D808DAE9DFEEE8D51D8C75E1CF4B6957C930FCBEDD486767FE4CEB324BB09C4C700F2BD8F74E43E12A734E499047D9738EBA67B5D0882BA64CE6DC5642B25687634ED58C31FD72211EA420A93BA66975394B6BA696F9B9BA87D556E91C1FBE1BBD8C7FF8771AA75ACA09DB19370DCE70DC063A028384065EB4682A1C9F616454987596C1D68ED6D07A076FDC70D318C7CE1367C3B986176D

AED16D403D9816C7AD181DDF7253F68DEB84714FDB1DEB4722F25C69C9BDC8CCA155B5596173D02ED134A438A87B88D1333B6AE0EFF40DAEBC43D67FD3AFB58C701F4A2156AF59816FB0EBC06A73A9CEBB5C0D935F1657AF34347459AB7A2CA85008E645D12AE64B355A574929477F8C2C53024ACF5DF203E3DF1C8BFB557EE1784991570BA6B7C2364A03D4B520C4E1820C5445A438DB59958ECB120B2514319950FF597649606B67C3FCF703D14DA43902C89D92A04A435ABC02BE8499BF8D25E1AA113C1D21FCF3

95F17885E3FA4FC435769137460ED67CD9249B6E89CC9C887992E3B911A2E83E8959E483106072477223DED36D584A43A802B23F92FB9B495BAFD0E98E4A37C37E5A4EF94333ED6F70553BDD41DB14722AFCF805D99EF85B4D3195AEC6DBC2A40987C7FF00C3690E6B7BA82F966EC9A4AA90CD987BE8D939D562F0E610FE9BFC444B4A7D21FB8B7CEF3D36186991AB5F71DFEEDCC70D91F923CFF25CA10FA4BA3ECEFE0B0025061B3693BAC4B263ACABE1CF4A60BE7A20D34DBB4F8A17B6F813CB0BB2DE119D59DDC6

739DF2B272690C4F647F5AEBEA595DFA68B7229C709638D3BFA985D3D8B964009AAB5B1A917C820B7C006939CF3EB4100BEB4A9AB7C581E7249F2229E2125A452A9BAA4C0AD69CE54FEB483D125C5B09F3D430EF4B981C7811F12B35E965EF43AF48C64810A02CCCCFDCC7FEEFF38695A8E8FAA4EA2850FAF84EC10B428FD30368C298B7CF5C800A3B12B8404C3ADCDC135D7A92C203E30AB72A0740F5B48BA82136708D1CF180032840696147457C9A90E5872B80BA4777BFE76ABC3CEFD471204E179AFA560BA35B

0400ECB6882A9BDD0D5E7C7E236B019EE65A27
216D6F91BE6B66A7014C2CAC88B2C85DE29FB79920DABE1F3361C3D7911CE1148D9481AC1BF3FCF74BF6C598BCD155556D809E68CFCC0B5ECE9CB4D146B4FA826F6D46C3E0C72100D7EBC3F03E0E4E50091AC9A95D851E2A279F18E8A06F73291F7CF2B0AD9E4D033FD00BF570C3ADBDE206A4D33F6F3214A53706033585A42CFF7399C1D0F252AB63191B65D9DAC15726477A51C99A1EC422DB4C13C8DF4D350953A96FEBCA5E09392A82FDBA5484C82DBD406F1A12C58065E86DF4B21640E3C47A82B3E8890917AB

4D64A9290C5BB5402C2098036585AE82DA5CB8806777E876FB3AF5E8FF2D5FB4AAE82F4FE5289AB97BAEBC4423890B1187EA5EF9FDBF9C687E51E70C3EF4F71DC5AA5E9C1C802B8DE8FBDE59E01B798936B74E4D5603DDD57FD209964DF09B32EEEFE9BF03AFF5DFD525B9B093B7DF1C940044DD87662D35B74B6F0D9BAC5718E6B1780FDAC5625B1AB32A94FB489846C6E5F6E95A78C2494BD2D672FAE0D8E537270B8C75A00E3D93A0A496AA6C495DABE141A5356E730E5EB7FE2E7644C1F32D1A94277B734054CD

4A44E0A388BFAB9D4942BE6E26E887AB910B100DA1D52BCE97A64BDBBA4B782281DA2F55A12A0BE315466F2EAB823C26424E3FC79E0CA31CF488118225BB9EF047B895AEF912702928FC97A7BAAB0492C1C904BF4C266CCB29EB52285E4309A4CA6E343DB026A10CBD7CFDB2676E7B9931BE0C7AE163721CC3BE7872862079AEBC7CF9EFEA5D57FFCCE64FE2AFDE4EBA3C048B38B0528255E92A9C8E1212630FB2E1C56C29F1BF5022A97E1C077D70C08AC353AC6977EC506AAFB338B79BAAF6F5C32643BE30895684

2ABF1F2E4BA6C549D14EB71BCA92630E1523DBBB5A99287CD301576F7796E38DB989974906823FC9E66FEC10B5AC0A9B3293374D70533D3AE38FD379924F292B7DF222F49956C7C0D7990E9BC582F18CF8D6DB3437E9DDB528D026A7B4EB16EF3040784A4FCDFC9E2C6CC55DF190F1BC32D60DCBD4BE8DD7851EC61ABB30CD1A91F275E2BDACEC5C3BA843E367D4F7C9356212547844DF7C0FA9C8DA0F7ED6792B717A44B22BA08A9044494AA734856651C384082864ABFA5D0327B2681A5D0A6250A37251F88AED61

A1F830EA1E09DA66D97E53D9242DCDCB87F29E0E72F8B7D698CCFA1C75416CFE18D07F291E0C7E08EEE10595AEA34E15C80D20C716F3123E5453C201D39171D3F83B66656FB1CA19DB0AAA89CC94EA801038076412AEF871D34183C400477C28B20BACA81EDA5FA9773D63A1C08AC5B2F0A0FAB492C7EF69B5FFD0B67AD1077D2AB5442FD72F4995F618FEA07B27571E2E224194F240B2F7D5304C624C553BA28CD581A81B62AA2A7EC0773CDE6D4767D4A494D00F685A6FE9BB837E7209474E89D301459E52385FDC

EBF82075BF6DBC859FA8F966A427F16F7FBE3E
5153A177BB48A56BE71E831E52040B6AC8CF1666C4CA3A99A9A58A261DE9A66D859BF9989B046F7B788C4EFE46C90F9FE8377D874FB42AB7E26553D8AA476CD5DA9B0FC1778F8851192A76F74938498DBD4ECFD418BEAFF566258238DDD4400214555F4A086BD13C14F1E41CDE856C7667CD3F92368F4BEC85AB2C3E1A847900C3739BDE3F2BB45B8BDB0BF546F68D489604393075F7952D7BFD773490D97572BC13498E6D0BBDC37219A8CF709C0040AC7084FB2B5465FF1200800D4AFC9FF93C09E85FB0CA280917

0C2030144ABB5111A3793C198D2BE882B675449EABB99471363E48C27BDBFD57A99EF5EEA0993D0EC49CB15505EE7D9DD8507EAB2F776075251E3AFE3F7E3C5336E859E475E57A10A7E95720B29FE5AD765F19C8C9854E75E755FB1794EEA1870AC2DF786D2325754D99FA51A779487272F41CDA73B2ECE05840EC9F85258A8FD23A0FAFC8F37972B5F8E9981498AC5FFE1BCC6A4A70DF3BA7D0524C6B08148C25D5B399CA8FD2612C8C56A0FC880514D6E7F5B591D43EB10E2D1098C49719D651BBEDC89A0D795CF4

1B2D772361BF81B8733B0D83222855645E1CAC851B6F4A32329B845276067580EA9D0B442D706EE3147988022BA9DF8CEFC9727343D63280108D71AF2D31E5264A32821E4A9E0E7F76F8063774B263247924F6A37CFE1A62C1839FB0372FE38B1F5635D88D5951EA460C5174D07BF849EB0BE6D561487B71817928DC4A6CFBB5BB01F9E7648F648A42707BA7FEF9E161131569FBBC9B2944917254F9294806BD497272C118F26BB7841A28EF2B9F3E82A5EF85783D743E45B2D479BCA0D91A4165B02E71FE1B87C4C1

8228D41DC6F257CE050BE201DB9AB9FE2577201DDAC819C100A944A6743545F3D6498D6CAB591B40D50DDF37B06DA4FB68CA76A37AA84E10376D5BF87CF6E65C4AE697F65D7FB3546AE11ECD9E7A0038B934749DD7D572B5CD348C35882D38D1C216ECC7758C82DA4A947FA79A5C4174296AC99D6FC682F42B5BCFA02CB3B549BB7AF5C1376A0FC1B07B3462FCF15ECF9180B6C55AC50C8B0401AFF8760F6549EEE320F089E0C306E347493FD9999A50C14A4A4CACE7853AB5A038C3F7430AFA446086D1374023B97F

65F5F1335AF008DA145015A6532DD6762ABCF0879EBDBF2972FA5F244C067D332CD00C8C1C9DFE605CBDA3DEF2630598E8CCE77CAD4E15CDB450E68570DAE73FBA538AA8DB9D5223400AA63C5C6D3F59DB62F9471383B020ADB320BDD59753A7BA9208BD9CC627FEABC564096CC1F7468E03070F014579542C99E3A4C5138EE9BA628E3BDA98B14772CB2B922EFA818852676D1A24D1A7EB12E008240A66B2845F66C60950BD66EF544CB0670C65F10799786CEF1D6055201DE7F57EC99D42E8522A0148E30898CE63

6FA8B5D7BB536F5C5814920C29CD5B1FA8A6D4
4914BB684344DBE211B01E29DD42582A5C57B3E09AAB904679C3FC1DEB7983B7C8A4F26E67D220DE2B54A8D5F75D4989B6E561E7946E418C67FE65748DF9A5CBD211C8E58427FA729A22323BE4BCA6B29815FA31426190676675173125E1DBF9B891B6144B70AC9D39408D3EF5F2CDE773E65E4D0E616AB025D08A96E768C7465E057B7C13DC6193D2861EFDDD349A398ABF0D6F3DD62447309D93ADAC291D002BA145B6398F3DBAD7D35F5D4E9196EBCD0F734CC20EA133C8D86A382434DC8AB05E622285B5B89C01

501CBA3632169E4CAFA1FC1980365A2EC160980567E6EBB1D53FC5E8A6EBAC6A3CB408EA71F016D2C22BE6E1DEC28309E212AC32B6D2F71F7B1A5DC4511352A36141C2478734C9AD2E1E4BC88694398214B6657A25C47557ABB76BCEC65E68D74EFD306F28006377560057D5277B3122A7FBEF80D1F3A5582EBDC4C14AB52DDCF04E90454E5AE2EBAB29E3B3CF7B64369CF9D26E0BF8F1CDC8FE4CF2020A814F05CC6596E442EDBCD075A5067C8900E9363E2017A36C1035E72B7CA864FAD31A85D006043958A119E0

697DCDC2DCAF7EE95DAF6ADFF9D5011A4F010524415DA2F41ED5057C6321B734A841F8DA936E1D18739DA4587BD202F51DFE8D1BE1AEE603F9F00E7A192D85F853C6F203484EB7E5BC2955FEF457B91673C34198633A4028CB6B8F5BE7547C96DE4EDB102B0FD30977128E6063100474544F1B400F88B8D7D47DCBF914ACC0B1C77C60B93BAAF5CBE94D695B4B91BA6E5382AA59B8A2C4E0921D627FCAC86E619D3AC52BAEDF306630D81D14149167927A1961B221D2338BABE59BB36C7102B047062AE2C66274AB7C

538D4A5D1475ED45E93895066F5CD1C55CCC7287AEB9CE3279A695518398501264BEC362155B5F408C669B134E9091DF692044647574059038D91899DAEFBEA3C986B77CC094331831D284AE86E70C8AA797933F6178E32EAA520C82BBB217FC38E9BBB8A2554A0AFF0BBBE7DB37CB17DBC615B47EA34BDE36665DE67956D6EAE3FBAF378C03304FF10F009101880D8981E833BA99606A47E26A398BC7C7BF57E050692A98BE97FEA261BA11ACB297F04B3C32B0F0C055957D525845B66177B145C3DCF6EE9E247107

C291F27924EB9D11833572075C9B9D1458A0DE80835B811FCFE2D28FC580951A225BB77A9623A01A78B8B3C4620875A3D3171F9F5448390866868CB4B43DC5C13FFE52DBBB63A8E4127A5CB753739228616AAB055194511395C99D5DA67164A77493CBBE050C5356F0E291417D5DAD5D80FD9E44FD6E21EBCED56D025CFA915E7F6A19D5AE8542A6F5C2AD6954DD8AC851A4BE29353FE186DF23BE9B7437B7932BF1F53EFD7F9BD961B23928D52CF9018B287EF7B3FACA5F1B60ED70BA7C393D03942A19029E5F3452

CB20FE9EAE9A5E4955593B3B7819900B5B1913
D3A70C0ED5FAB344F1434A0C9F0233CC2E189CDE625E39CC381E7C096EDF45D161EAE1ACF5217EF67E13A74DC78DE79438BBB120A0F2C36B58BB64BA84A9958ECED1BB0C8A80611094D8080E6D0D9C5C1C40118824DD8EEBA6BC2548B1CC636874353840318453ABB5C1BEB9C154A650791A38787238E4866BD8686E23C7897762E08E75D732F8043DB738BD597605CD221447A42099A84CC03F070498CD41FF67C70D3E84CC636336AA18BE4C0A6C46B0958D4A55C3862A39B95E9E1F230BD0EECC29B242D371A0A0

4FD5E2CF8D16C5049A838E06E67C95D7865104374AA76A40ACD7308AF86DC3B06A1F25E3F1716FAA5ACD5D90E317C38440F66E7BEEE54154DE336C23B860997379807EE983E09792EE556717A76F2FB515C86A867C491828B1E893D49BA71C8A7D866A92E555583BF03FB8CFF4556222285F2817321EC5C6FC2753688908D2A8A345DC50F782650CBE2A040F45FF09722C2370BCC32FD52E21DC414A30D5032EB73CB39BB290FF63A8D274A7542689AF76E4810F4B084B18A75AD388133D42F8C21D2367F2D15D2783

770928521DC5328F93708884FD11F421918D1D45E008E33998BA105B31F561C6B80444E70AD5DB522B4C34BEDD4B2016E6F00A86FA922F3079AFE297F976D099A228D197E739A92ADB5F650A8A3BDF660C390BA26C5D9CB46E583E59C58D02C1AA78D78776FBAB94012BD5BD1ED718D91BF52771328D8993CAC940354121B24DE7BD4B6796557BCB6B3B05AB69924BE7439DDDF12B54142B0F4F3A87B150DA421286BA00B86B0B4D8BD34CAE747350F9546F1854FD120FE6307A0CCDE0D98D4875BC5A215078CB2D88

5F9886878238721C148B79442C5E8EF80BE7DFC6B9C652F02A1189A0859135E9314161A9A7FFA3972CCF8A241FD9BC66C447CD6D919D9022DAADB580A8C1456A5F9AA3A2928AA1CB2528A73C5519D340F9617FF5A38EF6791D3D714418A6BEE7C8CF2934A005E69032CF66AC2001A8FF7CEEB2066448013D91F3AC2AA08492C224B5FA6F5C65D9A410D465C38B3B9B53157D22F83D0E4E529FCA4B1A53128082E8ECF2A64E059197F751CD3C136498A1A15D80E47F82F17FBC9D9082A10519855731FC26CBAA8EC786

263903F7F2A6C24EAD0E0C0909C2BE5BB01C8E8DE96BE3E0BD54FAA5FD192349E52B3AD287A2AAEF25A102E7B9622E94C358965D083B7F83610071728281026F59E12DF671B82BA33D067ED51CF18B947E0D92E4E362567DF1B77058A742E3DCC14724EEEE7E35E64D0952CF0A1BF4FBF0A6E08432AF291B59CE0114FEEC0DA48A2B7C2655CFE9B350C33011BE0DF24002A93FA497A8A9FD53B2125CAAC85FEFF4D836ABBE6812C8B6D0408647EAB408F8759111430B3A13BA65E7F1D75B9DAA9281120E514FD88453

8D31B982DA9875FF450CBECB3A87346D9BCA2C
F3619324A52E554AE36CFAE726EB30132E3A140891D63E9CA2B9462B44E724992E0F85C46D7827BA2CAFFC5D2FC9858A7950916DF8B41CE6A0FF04F36D888C5C2DACC10223AF3B2A5EF57DBD96EE17167EF4E1428995F17840698AD812685378A74F08C895D4D8A056F62CF5C9972084B3EB7B9D51ACBEC63A75C250D0D6E63CA5344591AAB47C6783A4BA2D1B6892ED132F8B73513F364B71ACABD0F8C0B89418CEF3E2130BBAAAD06ABEF7E2783C22FE4FF5E981125D49952B3311DF274861B9EE9E3AFEA4F96189

7208E0698F3A3AEC8C987B4BFF1F2EFBA93243CE509D00645E78E56264969F09A5AA25581EFD88A4B94DE44BBEDB48A42A9FD9B1685F2FFD1006B7A8EB6443B73B4574B59B61A2B83248D2B31B1B4CE33424F6F57B13CBE3BD3700E7E5B6691A06FFADFDAAF0F3D3803C828C01E910C5024F9D19B69DEC32E4B3B579BEF5B291A75344FD6EC46E3A18D7D9B872A52ECCF560CDB276B60FBF7B90C33B5F9B06D7A6189E6A83833253BE08CD6EBE68F56D6A85F99FB78235B084FD2D88FFCDB389900763E7064502CA89

3B27AD39F70B3C1F15B36535E0030CA3A2A56955D32EDE37432340CD6547579BBEFD7DB8545A1D7AC4AAA9ACBC5342A620AC1DEB344B3331134D857F4879C8FFE8C8839BAA77C468AC589009BBC12C8B854AA372FE72C54D86033B40AE6D390CFACD11303512041D8D25F8B9FBB455F5DB35EB1B2D2598FA9E1C15181A2D0BFBB68A60EC943D9012CC2CAE58DECAE48BA34259E25E4086E93EF3035E14038129D09A9B138CD6D3A7B321F2EA8F2F847DED1EB6C88987CF0C49599D639E63185431816C03FB0B601F40

9414285B8C54123B91A7493A7CEC78F18693745DF9BFC4F904AFA098A693E3CEA01B4DF83E7B1E66FEE6F1511E397B3B16BA7E3BB5D3F4FF91CEC602FDE84DCBCB6294C417CC404EC2643FE533B3B1F295C8482889C2BDBA9C0CBC6FA02518D3D03763D0CD01ADB3A3B6921E4F88F31F3F26B713DAF8095A59AA9626FFE14F9126F777D87FEF3ADCB8F6EF89B0F8A1C30FFC57CD2F440A479A186F42352D45CB4385906CEC0AB6A270CFA378C0C9EB7B0D7225BE64D90A2152C6C4445B249A1F06FA625CA762006576

41AFFB98D0F017CFE4351B54BEB32A20FC2BD02B516B9EAD8CA17938501AB7F71B41F7ADC7C03254EECC53CA1CF56C91DA5BD273E93DF0E18F222D1B71FFDC3206155222DDF9BE5F48B325C4A487A8097745B61329A565D935C631212306F20D659277AD4D6E7E4371ACC355FB3A4F5B81758340B8397A65F6AE1076F6619A84C506E0AA309CEE9845AE27FD0543D38825494549BDF83F563DDE4713C3D0589DB165A7203A24C9FA40C395141E62470F6DCD3B8529983E340D744414C90B0F4AC09499FBAD1BD2B3B8

8EF98498EE438283CDA2E06307B387E12C0CFE
268296087F64978A83224327B42330ABE521758C0A9FD84DBC8FB28BB45C6D19D2DD9C72148BCF0B927BD458D243060930A36205F3BB563D421FC194419C9559EA9468533E39CA4EDAA56DC369EC5A3E0AA585F8EE32773E9D27B2110746FAD76276B40C7BA3032CC1675873BF7BD9B46BCE3EE5FF10C2196A508DC48592ADB6DF50F10CE3492FCA39C5F0CCE1F4B31EAF19D83589E00D6FBED02EBD34E1110975715EC1644E4D5542CB7F00BD6BABF1B540A034443FFB4CBA1975D54F2991C67BADF3181CF352C90A

296252F13BEB6B64BB2A70D4BCE955A5E6D5AC3C1828F800BA36C40FC33633077369BC34299652F755944B730037ACA9ACFC64F50137E1372AA68E4305AF870DB8FAB28042EC9C9BA35DC3C15566905FA67168C78182538573BF38A65939C5DB0A44E376AD8ED934EC031DB29F6EF92FAA9450661A8D1C20BC2FE4492C14CF172BD12CD4BC96478AFC4716B84C636F09F192F68F7B4BD795F18A42E16D21143CE30ECBD9151119C88C7C15AF7F9E766B04359422B2E534A4A4AC87B30C8DA18294FA485B61C690FF06

321BC0E8DC4255F7BB5376BE91A0A7DFE8F998A11BB508AE2F62DA09FE62F1CF52CCE72A6CD904BD72EED1B6C952ACDE574FB350CF6B2BFFF5DD4B62516036EA20BF0BE31CFEBC676D70A82A5CA0FF82D225EF7670D296189C91A1C9D9BD3F05161384BB0720F1ABB24FE9608F8FCE0A9959EA73FFDE8392EE239D886747BDD953C8BE107A1329B2A702BC348FA0100EB2C9267F9598EB8B2E644268378A794D6DF0E495AFA7574E400D36DB2FBC00F9EF846FC4CBCCADA6B5CB16C023012DB10FD39B23F4E40DF40F

8D3B6A13BF23F9370ED1EC224649C5E26696114A63A99114877FEDAE19C42E7A1E4162D1A106640F6398201F599363369CF43D41E07C086BDE8595CC64A74CAA96A3C259198FE7B965685B4D70AAF8DB36015BC3C1003462D629280D86ACF523B3F1A7129ED03D42FD7403B74C5613ED1E2E895D6840613C4EFF9E03FC5656CF2BC6DA2E78D4631099264B4CB1FDE75B773FA7ABDA656FC34BC0223721A6897B0FE37CF58FDD2803B70937F179F3FA013562001753D9359900FE2AD8892FB71B018B14FA9A23B8BB22

56833C879B32BC4132521A58DB7510674ED174F313F3EBB0D83FCEC69412554C4AA104ACE8B1078508A32A54DCF94CF4E2D71D2B36F00C970923EF655B16ABDA7EB5E89AB5AE5D63AF73C0BC7DB61B69917AFF3D519A672DD4FF24AB4318D5A58176B4AC41C0EDB0CFE7A7284D6EA3D7F86745AE8B771435DC359C2701392E4462B0B9DF7767D61C559943D2A536C2A5C113CB8556271CD57CF3D62A0F5368E4EF58065C847FEB056FF873E74F2269AB0E867BFE2AA11F58B8B2F70DC24AA002B55B7142DB3F33F58B

953DB3027B1E9AF87024B71FEA5AE90F04CAF3
D5B3AC188ABEED85F9506399AB4BF24CAC92236D84AC37C60A8567DCC5D43ECD5DDF9BF626B1B8E64E96D3B1533D3C3D4D92F207FFD6A9C1D3738492A7022DC950AA5C8A617933F3ED875B021E5E448F2E38B5D236AD368098B0C51D9405B85A7C6DB216BDE290797214D6DA3A4BB0535879776B27041BF2F24F9C4DF4705E2B08C3C5103BC4C90C28268157C812852FDA226EB2B90C4CBC34779D5AACAE8762F37E22F1425D6EFFFEEF6641D6DB6F94490986EB394AFAD8BC0E4068647F8A0F8BDE9B776A0931A4C4

D2BB287345B6EB1E0D14EA6EBB07C662FE40A23C8A43A4D779EED71C535283A2CE71E4DF7D4FF26B817EEA78FBD28D72FDA148808BD4D0A68D723797AA8B36DB1991722A2CA3CD833AA7A1C5E8ED9C4B05627EF6FF71A430EF7F65CB2129E1016C4AFE71C3172108D3E43997A8B6CFA4EF95C83274A54BF113603AF256CBC9B6B46709A6B645CB661C6FB6C34BAF94D298E65271C28BB2CCC0B1F760AA866759DE78C8357BD4C6815D6F1D5D33F1FEC63DF1DB152208370A88D65E63ED72D875193228D3287653D561

24478DF2E8C13C3D9990BB7B617BAC41536A394E8AC79017B1FD0A8AB0EDEB0E3BC2F4BCFBD1919327D0598C900EE60B4A90C0F3FD2305F21A52ACEB88A3139C3FC5E800A763DC31BE42E544C235AF16324429E7B3D7219C9E113A6EB3194D07A29B28B752B733C3590742547C469DD7F6595C50E0A4B8FB11959B7BE61471010721F9F8162069B2C3ACE43EE6C7E67A90E82B53E643DB346205ACE2E841CFE873B5E5EF3AB113B722D4F68D4468266324CE8E01A0824447B653251051E17796FA2E3EE381622F0384

E5D7430A8FE1001A6B4EFA0993F1BDC916264BDA044027D1043761E85E4C60FCE832BE146F990F2E84F26237330281299CC4127683E7101E7DBE00291DE8995E30CAFC7CCE4A0366676B95262011C66E015222BE56ED65C29A3E6264E6DE7F2AC90D037B255A5A3D6FAA84106D1EAAADE17F6129378DE1B8EE40E1B8E594925E40931A113D21F560C0CB8522D806B5A6794A5D9E86E6CC982526F1204D7BACE8B1104A2BE696B051D65AADEB5E36221096430B296871CC4CAF1464CC89C8E608ABA4709F20A601B7D0

948EA1A17AFEB8C699B0953837A6BCD6F274A4E4D764FAB389B53297E7AB78E9736CCD32FA4C48614FF48B7B1B5317A96494AFC1C15A34F6647A7EEF4582A261404909D55D7B288EF01EC148A91D36739CB3022542FD92346AA981473C9AF7A8024B87CEA1D5325BE568C05C19CCFF827F1C6EE53CF4F5B71A472A4C5212F3708A945B9295BA11A6D3EEA5C35285C85FAF9011FFD6C9C2307D77F93F92DDA0E6074BC194D1F8156F1F386D9DCDCD80FBADDBE0A44A46D8A5EDBA9C8253D18E974B519A10036206F0E9

176C7E349841C580FDFA745EBBE4F4BB5979E8
78A88CF6F6586970CC8A8F21EB017329E6DB420B8E1F283F4AEEAEA09F96AE161ED0CD5E4BC3D3119A96FC23F52CA6217760CBD7EC01C50BC499FD05682E112EF7216C7212F7A6CBD06A1229B2205F8652D63431BC0BF935256D93FE81AAC6DA51F7F8255A3AC8A01BC142BB88B69AB99438AC2444C93CBDC9DC76A1F80E108AED723A9A1DE35A9A42DA0270685ADD3F66BF24022E86B928E5585255FEAA368F8B5CDA8955FDB086455C0F8DDE5BC218791609E435FFDC091A0FFC887011E59C83B5808E7564AE24C6

66031DB3FF13527C659F850D335C7FB47B0F4D38B0DB995E1B96DC4F1BF013B0BED6944738AEA7239AE63CA3092A34CFC46DE5AEC9448F95D337D24B19D5D0DB00BB3534292B956C28BCFD0C29683F09F9EE1EA9D2EC12250ADBAE188B41743B6AE3A42749328EA04C9F5F0AF1C36C6CFCB5012A19B370BF275E4E1A20E6888E54B7E0AB0ED8A5D7590C0C732AD04707E6826B3492F3AAD47FBB5F4B220403C5C5C57520B9B062BE82CE4B5FCEAF1A2D313C4754F116024D7FC9011218763A5E8B299EF90DCD7B3174

06D0308E2230617BA2B68D01775698B5864CA85E8E8333597703B95F967DB9D316CA31F820E32B0DD0C6BF67439D33AD93AB0E662BCD115FCFC1535E40573A342DB4BF87BDB501275CAD6B6349B9A35F6FD994644B77AB9FDC77E48142E83DD344B67717A458EEDE638D131EB9FA03B9F4808FFE3890369719C5215E043CA214DD618F8C3726F75161AF0DDB416AE04D0923C2F5D381231D45923A88149DCA31A32378478B3F2A0D6006094DE9DCD2F4B612B3C6BB818537977072A261891BAB2C2970D8EDBB84786A

49AB685515335204C47A4E903953BCD05DA70AF797E3129051DC99FC8A49BD625CB051D96F8E93252B09F2C4833CE3113ACE03E3999F54EBBBD94AD0C0C958A3AE6BF10350FD2FC00272869C3060BFB9BDA2D335F4511444B90D9D9AA35E02CAE034CCAA6B239D43160E4FC55DF50122371E56DB4DEBC4E93C33C2DCC633D1C5084331A6FF49F2A06A14EC6386547602C5CF971E2900D4493B073BC86A5C2157FFC4EAFD400A7B3298559E59B9450365833D0E08472FED51B95E21EFB3AD4476C685215D40D3382897

8DD409835F27EC42A3F7A300A9AD28A095535FD9A5BF671311344308DB3F790BD2ADFF4D5C6D237C06192A4D61F9F0E44D2B6FF2EA322D4BA3F848785BB0D3E86FC1A2F2ADD6F42C57CB7E497ACA65A8258EBBF807C08730754D596B0B83B2389013C41ACB1A39343BAC91655E7548DD1D36AA866FF2BE32983A0A48BA915C1F502E9C29B575113FA39FC7852B75F40953BD83FAFAD08D2205F747DD0319EA22D6CBC50A4E9A461A264F9D0200940507DAF7F1A4B264EC3DC7245E038BBDAF652D5D37567304D53012

5966366253821354851B4C85901B65AB7D8607
DC19E2998963E3948151B001363DAB8A95B70A20B297C9CD2454A031EDFB2AC047EE09A2B0B9130035D52B75FC8B6FB9F382D80CE2FA97A111D081C3E66456243C17E5814341427FE22BF592477C64263664D72ABD0FF52501C72039A078CD936E86E818CDF8960A138DFD45207FE8401D0ECF74B23A83225D295AA04FF762148A96DC6D1885728D3EEA2473BC93DE55000AC24632B8333696D9AE904E5FD7B268D6445B7B202A80D4F33693A5AA8395EA12D4EC5E6C4041C56F4E0114560B71A8D564F866E4A70F87

67B27E805430B2193DC635CDFC7A4568F3A47C0600854023701E144DCC31EEE52E07572761F43EEC40E60CBF5E45AE747BD87FEE4B38AEAB50547A107E1EE1D7BC788EC3297F397450F8C17A8B4F51BBBB230D550D2F7C59599C8269799CB7E58B84ECD15933BD8A1B771EA62A888FF3CB19467AEA1CEAC33620A65A94CF38E58338E34CF3EEA84EE7AFD08DDE79960CD244C1D27923A1808C9FDA4C3EB8C9377A0DA4643B97D320B2EC12D262F9172BA37D2B0CC5CB1752BF9AF3B482BE7A6BF7B25448AEEBEF5ABA

A7D783A3CFB469A39314668A80A2964AFDAD1A322C2EB4D95CBAFA83EDA714EB0239ACF24C579F0E85DD0A7C19F70F4EC6D30ECA5C38150E4B98F927D8889D8AFC34AD86A325A013015080B9290CC9C3201839E0D303D277A3EC3666204267C1674C05667DA2364FB31DDCE8370EEEF233C69D64FFE23F3C522698AB1FA2E2166525A711985D2002026544C083318B872FA35A2852BD3A2D6E91CF366E2F7DE91F42E804F00D281B9C5DE19F1D479111665D7881F92A15407BCAEA0C1E25C87D8D119B3C039E6B8D0E

CA90EDCA3C06088535AA70FAFBCDE55A10A3AB6EB3EBA9D7D1051BB51EE11A4420FDD6D07913C2AAD448DEE4210E1B050148AF1A28FB535D503715F6380DC21C9156A3AF2002970F35A0049CAF6E8E30C932A3BD4C82789DDE503CA01ED633B533FF7F60EF393BE81FBBD8D641814EEDEBDE8963DAA29EAED89EC2942859DE4A9B27F7F666CE7146D55A0E3EAE95852A0B2D5AECED553EB0BFF111EBB6B468FE3D0552B5581987E32B540EC6E2DE0E3700D2B034B4EA8DC331E8263361B6A2DE22A4F9B92FD886EDD2

A701100A640E20C76D4459281429C807D1CA3AD36295E7A5FC8EDA9E6A934146DC55D159FEB3CA74E1E5F92B98BF47A9341611F9B6F470B59E24C66305527F7C7E6C398041B384701C4706EF2E66557965C6EA81EAF464C67EE8E00597C339BCD811B4E7D917DAF59949FA3F626A603E1B0F6B841FB6D005C6C02F43DE56D0B447DA4B6C13E4B9B019CACB48DA6679D50DD871465243BC792E1D6F6F86984D30518333E7EFBC99260DAFD2C8FDF1E026870527450B6168B8AE8EFE96F63ABEA1C96DEF9C578948A26B

FE2A4150EFBA3C47C33FC7C4B62A0DC52E54C9
487731B70BEDB9B8E48832DF5D19039AFB48A14EA30498BA9CFA7596996469A28B4D287BDAA07995C5DF0779EBF6F1F4D145DD7EA2FAE7CE830A4BE2E3D69494F9D5241DB220678DF5FCD25F2200C798E6CD0E88DCE4EEE873DF9B80FD97E6EF826B64DBA9869DF98FAC06800E0EC8EAEDBAF4AED9B9C87A09DB2EAD57D92EEAE7DDE333C665AE95018BDD4086616E5CDBFA2B7BC87C7FAF2E3D36E08005A84597EB6AF9168EEDEABEEF2A9368E2D8CDF4BEAA6CB84378F4ADC5D9FF15434E57442A0EE6EDFF4EA60B

BFE659D73E5A88B2B0393A062AE34F2F87526815B7645D06352DA3385CFAA3458278A326AB632374EC33F5BB5E20ACC6D09D9C72A8E6003219B380F40BB09CADBF5BCB123898FDCEC18CD6C107E7B431F1EC6FDA42E000E0CC1CF8D13826A87CA8F3880622695A78C3082A8EE0194A087BEE56DF6113B80F4EFA354B95D1D57B6FF5066A25E24A04BC0C108192638E35F7382C305AD22ECC6DB0C8420C8A742D148DAD351EB8F9DA6362BAE38AEDCFC33665E7D0C04CB8CD8CEB87C8527BB013F8377518F74A4247E4

01AC3E6357EFF12E268DCEC2FE1E661118F467A67E411FFC1FF0C6FB9E4FD4C1DE8E70CBB8BF4B5BDB2C54B5A3661A70247E0847ADBAC5524A7BA323FF06C2B3A8ECC909CE14B96BD0D329C6658EF789B85FDC808D9FAE31F9256CF53ED1F5EEF83170886A0229DB51E696680546B16778E60A99465D960E1A21360403AD4A74ADD86A2B7F0AD2C266CB8C8A47DCDB6BC5B7C43D6D8411FE2D7915FFA0A0CA8205ED6F7B9891E7F3BFBF56FC10E3DD384D56A72FA2E0EB7362F3A4FE72921354D1364B15818E128542

D701F4D4B2505017F397F87DC261CABBE95FF790BF6895C5D1C6868511CCB954D96FE59DDB094B10203AB66ED4C34269F399AE0A10CF88ED9E6F39C0F8BED4D56F3BDF3A363EC8CF2ACECC962149463928BBE2AB5768ECBE9D7C63CA20CC3D0D533AE4E8378A72FD09D32072872A21B939EA2D0F82497F980F7909C9C86DBF72469DF2CA3A3FE2E1B8C7D8590D05DD7BE08CBFFDF7958BFD3AE844AB79D07818DB257AF9608C2A54A849F3703CD4F9BFBA71F91F027A2FFB4F3AAD55D1A5FCF48C005962B639EFFD87

0595EE12C31A388065F4E53858EC34D2D7BE2859AC6E9A735C1EA12EC240CB1141A75EFE052F912697B8A0DB1C05F168B890A7F0126F124A1D2757B096AE6625580AD5B79C5CA76A207B2A475B931B77CBB44353AD0FF80EC447EEC344332C0B75A377DDC9CC95B93D7CDF4F063D1CC565E33006ECBFAA723296882763D56C05AEAA2B7130C71B62E06256CB766135EE3E2526B71C2049808476D81A4E668C93B120B8A5FDAC7C0E5DE84F8B36FF963803ED97870D5821CD75D23D0485190CA86E4E868E6B931A6DC1

683B32BA4C656174F5795E5FFBDD612DD4107B
F615C9AEBFCFE3AA2721C47D41651ACB118C182200535A6BEA2944CA0F7D3844EE349B1AA654E479DDAFFA7B135141ED1651338DA9359524633E9473A96CFDBCC155746B6D568C2AF67FB04827F5FE8C0D0F142C8A16874A8D5C5DD4C0C23A0247C96F5E4AC923E3E60A9C89437614906AAAE786DE71C87CA871F4D205C66260AE37ABDB42038EF6C445F02D8F06CBB99FE347779FC36DB54B6607D3C5CA3D7B8C3D88D2ABE69FF0AEE6D4FA7D92D29D06343CF2F42D6A5C7A49113CA7E1B9177B30B045B44655A6A5

0E7C8C8AB686B32C19F69056BE27564986158F740369BCFBFF780FAE7A4FC177B1449E9E2B7DBFCA90DBC887B46D3756E4DD0195E0E55D12A035D6D801768A694E141FBF37A50586888DD1E84718CA8E8CE044666F961F747AA5CA4F9D1A2403AF36174D6B7122F40F88EC66A1D49CB8D8CD81F77602AC9A90EB73E663D6B6F11D8E01631061EDBD3A02860A8E0C93E9AC1064B5B4698F146C7EFF0E64FE2E286341D396F054AE88B0D39EB9EB68ADB55F0A722899CCA4C6D0D23B98228626BED042FBF3D61A4F5011

902A71027EC43ECDACA0F298F8D2A332592C045047446F8743F95E1579F850BAEB6C033B88142EA113D3910153924F7C3C0CBB37C7CF9975414EAF0E5D15A59C994F029242B3492BFA4A8417C004C9EBDB1C5AC6344AD4CDC85C281B4BCA8B569ECA612419633EA1CE02C0E0B81B2B96B1BEF7068B18669B49044D0590ABBE5E68A94076BEE79D9A7619A6896C12F35C6D975A7A680D32A0634A03A359BCE3B1FE61A1FADBCF3856EDA683F21CB11115453D1CDF1FBA2DF4C8792AD994C2BBFC7B6A5621BD26CF7282

850CDF96C13FD04C2CE5167AFB5E9ACF8C76A7A3DE39A37831BA8E067EAC5A039B8D285726C10B230ABE9CA62E49A8D0BBD42C71508CDAE5067DEE38A5228378AC3B594205CDA3996BE79A8C8EB1381863BD3B8FCC0CE89DD160FA54D3BB236E59B679337310829D090BC25201E2DB7638E637F6BE476C82160F304165D651D24BFF42B827D567C1E85E5D1B65D1F217EB6C870AF138A8B3A97D4261841C5470940C0134366FAFCB7B850AB27C314079B35B9A41EBA290082BE443EA5AC7B62AD937B86217CBD1DB24

C8B30FC04EA8781B50FC37CD67141A9C8534825060F2A9F94EB509DFBE783C84498A6CF70F8F16635B6A7EB392F67BF23F8928F871065EEC24B2C3288FA5C354DAB3F4A982F789E7FA59D12E20F5C2E4A648E50120531972BFE66DEED193016007B93F73A2046A7370AD2B68DB9F544E1A86A95DA8B1E1C2BE54B78ED01D8A8D19A0971DF90AB18CC52ECE5BE9AAA6C93728A688AF9CFD82A3B29159BAEDF697BE58E4CEDF1210CED1CFE91E3B8F87E6F6C5634FD57DBDC25DB0EFD466CF8DE8FE8DB21BFA0B5C86F3

132FD7232A37D1D7E34B9FC14790CCB2BCF36C
F46FC4BC282A71DF32EDC30902DDDC0E1EFF6406A3913A5F973AD0C2B8A0D5C0A4FB39F4935ECCB636D0883A4D034E756F2A9679DDF4888DAB78AC9D928FF7EBC986A8957C530A08213D9CB19936431F01C0D6F66F017C2BD4E5607EDE93DDD6D1DD800B895E03CE7A33D38E771B7ECA692B741FCC2946F3D0A3D41BC70E87BB84963398CDED7C2DA9C3BA3C9293178BA196B2F2DF54280C38DADE3645A510DB4830CD2E9F675A15A33B416CC21E4979E599F03C9CE38E2BE222E3B3E9FE1D32D7AB37B3A1DB2CEF3C

5AFA7507439AD4A3F59FFC856415C640F3F0E5BE64F16CF5E9BC67C170627FE2C4FFCEAB4FC54FD793C95B97D956C0D47C44032083BDFB9930D8B024CF631E950B9E110918BB02797AC848E183BE7FEE0050FCA9709C6A51453FA96A2F4D26A4C7CB809E936DEF300DD4E7CCE7FBE0797423FA75D814F3B6DBF1FA12E45AF09AE2B4ECE7DE20DD792DC70219B358C904D648538A5C4C4CE0AB70703C596E09F3DD0D19694BD402DEF4ECEFD43C35FD2F2D448F65290C784E7084C4D9613D7EA291FB2D3DD1039C5BA4

E950898D92CFB6B31FF4DA6BA913A9D96DA2790F8EB4276554D051B47F7663D166829DDAAA6204C160E588F4798044FD5144A9BA650EE380947CCFEB9043681A25D0BEAEABCD845AB2BA932795FD838DC98AB9341506E4F346CED32C91F782BAE994E15F330B3CBB2732717153B26DF1BBE83DD560FA9FBDFF85CD331B5C506DBA13041422C450ACFBA7989CF4DD4370F713A41763BCEFD6130DCD895937CA953973F7EF0E7EEE29C911A0A370809AEA40A339E7487E4BA069623DF742802CCA8BF3E8D92C829D299F

B5E8507D832FAD4A506D07DC6A46DBC48070CAB7ABADAFA669851C78FBF6F35140DE6DA2584CC2BCCF8C5313FD603FC46686C98EE47E9997796B460800D59ACED1946BBA806757FDBEA4C8D324E88ECE0ECCD59454AFF4FA90163F07EE833EE5ECF9402C6FB48AE4C10F5D63D180D930F76013C3511440B0732BFEF8FC7FCBB696A97C252AD75CB807FF880BBBD08DB54860526619C7CC06505229CBD3A02B5B1598B9230A58403179208EF3F56FB19D80D723B53B5F6696443DEAB9C83EC306285D9CF1210A0803A9

3149FBF25E63F229D9C043B2FB32DEF95D741ABEAD783F5EB2254693B736594E91B8AF86D8DA2B9CEE5A9316BE9BCCD56E6AD481F38DB07877A19A26E22A68DA6B4FB956EB04957C02270E228530A15DA423293021CB32F330F5684F2EBCCBD2784D9EE2FFA0A5183432396873EED8F12ABF673EB854F62E63A56B9B8258E3F0AD765366BB937B40E037D0BF4C8EB9A50FD95FA5686453C7D1F0B95E93162CF22B4FE5293FC6ED7379EA4299BEDD648CF97F456C35ECD5579834A7FBAC024AE92914C5AB7DB121517C

35D00F66B081E176328C016475FD7FA3474156
C429E4D57AB4BEE12A42F39F520712B01FE05B45652E94EE13C42EEF3F99E19F110E55EBAA0460024533F554379E017DD816A443A4F0E16884F42F863687CBF82BC011A2A401D3BA02B7DB6E7E6614B367B385802FDE70DC122AD89007CF802475F2B7A8B1B8FB6D5EE83AD489F7242CF5D08E7AB64F3F0FE717992B6B821A383E190C00DA99B48E4D22D140661D0BA3FCCC769DB263070890D00FA00AF05877D1504E15DA176A6054BCC825D352D128CF85155ED5561153EF7E3D3009708F24FC2A0EF4925F21137B

B90F88091E2B824BBE25A7CA8BCF63745731F92954B5B108A149C7A414E924D6403B89097C3C341FC1EBC91DFC2693F8A3B1EC12243C1F3D23CA8A3064B80BF3E50A04F24D6C447C80F52D87C64C1FF55AECD1ABF8BB00BDA3D5E806B20727AADF7C92057073C494DC084DE1634A460BD407210F9B5ECCE0A5C6E62B428441A45221488DD8006DE037DBAC949EAD42A4360145F4C4D9DEE1A7A8C8BB520656FBEB6AB44B312C4585AD0C8BD9A928069EE7CDF81CFDC56F8FFCD3E16B8DE396766BBDEC724957E473F7

84FDAA02422968735AD56960C2751A329A19F7FB83F05602DC1ED176E397F911401F1E1F3B7E999C795B212484BC1C75CE3F21A5076CB043027B261F3E1BA68F3DA9947D0EC7B88F955480D7349E952694FA36C1C62F143436245E89149E85CBE388B6C4EB015309FF70F828CCCF24828C26D744FDA9571FBDA1FD2982E2F18FF38076561F0791B60506D27735A64B1B8BE602A8B805ED30518FC8BC3DEFB14A10074F03E8D430A3976F7CD8108DFC0544632694CBC8668C54A1B90DFA58A5A7B17B3FED49A0105EE5

255475C42BE29480DEA30A75C4A7CE4637950A9A80D7B61169BC35589BACB63AEA07B32C73F787F90F92FC66F944A40498392360057D8F72DE3F09B5D2AA3F46E30A465A5D97BF262150B325D799826C1CC79DAA0EBE50CCABBC36879A48E3E886BC537E9DBB2B024D8C3CA92EE57742AEBDEE5D59E6E8954F5767E3C538BC056AFB6A91CF0BA4D82EC20207FD34551621BBCC3A917E7B4BC59BE49D1E0B1B4B354BD1A23E53779BEDC6F14423087F332C0B949E1594F8A183EA5F291B0A516EE2964D622E0F88D91E

D11EDE7560EDEDC539D34C027E2CCA639E578CA23490814DDEA53BB069077A175B4E87D5363C5B4C249866ADCB9933594CE7487154CCA72B7AD70329F927E54585DA689279FA6ACCBEEC3C6AFF30BF2B49DD3BF9F12773E112C31CB7F67E68AF94293D580E588F472DD98C39C3F044D0B2CC276072C61A6DE58FA241D712A3547530F7A6C03BB81F0DA4DA2A19FFC8D94414E2814EAF82C5DCC4C08B7EC94498FB6AB0C9C67308776246FBCB4FD69182C90FC35D7C53AA8539F632AAEB8037DDD57E2E6910AA0EA3E5

569CFFFFCB3B75BFCF150155E3EA6F2800A069
CF604D59A848D2B98BADA20D06360EF0B01086DCE9D7BB95E09555DEB2657440B2475A7CAAD695BA8014C7D0689E2F86D68DA9BA42368D3CF0EA186E6258F5FDDD9FE1500ACA26A5CE456DBFADC21EEE3B7C20A21B7B166724F35ECDBB6E490A1A09ABA2C264BE105870E8946FC915315BC4AD154340E9C4E5FD65A01445D2456EF2A0187F5488AA19E0A5E94B75EF3BF03465BD8ADD7F5C6401A56935399B4D92F7D9DC1ED5E4FB3E81686110307EDBB00B088930636DDF806DBFC2D84F2BCE1A69CB01189222AF03

83A65772D17839E95156CB6677624F7EF633A35160B53B793DBB21C8DC8F83BC96CCA4F3BB38D9223726AB6DFA46C01C64C1DDA868A4891DF18BC775B3DFA3FC4B33CBE2F8269F148CD36D5C069A161E0C36FBE6DDCB74C32D466494E5F6A103B2206DA44C7DCB8D72EE80EBB68EB5CA18779C47B8C4C441883E5F47ECCEAE114EC7D5AE4411F7AB9604486DA4EAC4640C7845195B8A14756B2A72F0C6574FACB4D50201C1F5C91593825C2D49A04879571C8424B5AF2845999657C36AAE60C09DED4AA885BD9CF618

12493B3C4AD75BF817D250D2D3020BFD1AE0CD5308C9C63CCA767CAEE8694E57493D7A8BD12B4B67B368E60DC86F652ACBBED581137FE47CD4DAA52D17BAF2913FF544FFA13BCFD26DD0FE7D8099599A842E08CDF7C8EDD1667B501213ECBFD40ECE1639DCA668189F8A4340D10983320AEFB1547BD73834A7900ADE0C4F5BEF7692BF1A86DEB3A8B2C55DC6A0F2A65237DE2567A4060C068F5DEA7ED1D604D45B604647B8C12BBDEE8062CD1162045296ACF919B41EEF4546C3774FD7679FDBEAD76E5E755C05DC57

80EB323B12FC0F381AFC086DE28970E661D2A4AC19FBA7CF8B9787760312A6318BE584CEBF7A3E4E921B18E2A324B1E167A5FEF0A7A94C8086E6D6AFEB488CBA08D360B886938BAEF6167983A07B9958696FA43BC18E5FA89FA17EE33153DB0EA6D12CFA1AACBFC844D5117A8CF04F2CD7E38AF6AC6A9499AAF1361EC0083CAF66F6A9E3E328C068E3B204BEBD965D80FC99BD660D90B0908F92D9EEFD4D737FE4A3B42B9D9C1F3FB8E35AC18A9116A5ADDB0C43C11EDC3912BD54C4B86D427E707D61864EE5534154

74F4ADFA8D6C6D7B73A615AB941FF03916F5632FD5E68F57A399AAC04D8870C185A5713FB293B62D46A549AA83117A60C776910A0F9A246B7F2932DBA7E2C16D72C36F05DD98EB38372174B91147A7B15FB588CCFBAC472BD4FB49931CF5771C8D2494A24667E8B3D382C0EC44E4105244271A1D872DD703EF5296A02BD15D5F24BC3548C936C52FF6662950D61A87A238A62AF46E8B29D28153D0D227AFD87266F39BA406974E903FAB1025C44DCF471ED8640CD805B4D73FB4AA92223DFEACDF278F059015F27E12

B41A3EFEBB8FF1C98B35C34667E0F1DC9AC883
6530F665339478F79BA30F839C9F6055AAC1D955D1C17DEE5CCC4B6242777FC485B9615DBC4A3DFD2E18915DA5C93459C6ECB27C0295D67E2E690F96D179DA248EC89799204D40D44F8F1DB8BEDEAA49C08F497F49ACD14B48D215FB2FCF42B0C3BFBB3B337842154A286EEAAB73A82B91FD8599A92558E0307E957E015965130E1242591B9CDEC524CB0305938576896B0A7F7A1E30F5181204E31A119FB97818F12EAC74CE6350825C0C5F1F99A8227963224CBF142FF89232D710DBB1DF149B9CAEF61D29D35BB4

C8E79A8BBC054F1D0C233029B51033938D29FF0FEB06389ADE9286D2E16636D9FA6956B97A4C44F8AD6CB8AB7F86047CB942DEBF576EFDC9BB80DF5F93CE0495746B968C5D55F58043335634538347F69F0ADDE7F12D3B5F12571822CE355B7190A891CABC4D33053AA6C68ACBA3A1E9C6976D9D303146A70320B234EFCC5899BE2381432EB463DE2C133A95EDEC2D6156516E4F47040413F69751B4208A64D7E07A789A067BFAE62E38C1E76807692A9445DF11B0026FC34EB8D22CE0B61C17B0B244E43F5E8D0F82

1E2953BE5A0CFBB3AC887CFED96B845716606361228D70D9F7127F3528FC9191BFD0EAD41DFD40439E0DE8D6D30ED450FEA1BDEFDB46F14950F6FF85748312993B7168666E51A957AF617AF7DDB45157DF38024F0FB24F44574D9AA27EC4951833C26D9918B1702CBA031988DDBC9906E32FE637BB820A94E8A78D6B70B881DE1C0EEF4D8F3C78B6FE6B6E93A47BCC2E8864117C120238376C4C170853C1992F8418E82709EAD8B14A632E1F3694C1AF65B5BF5DAFB81567A50F8F82BECDF3D926F9CE4941059BFD56

1929AD6F82A790B4598B8781551EB8B37F524CDDCC9557409F50F08E778076EF4B268C61192BA7DD45720B8D93AC3EC01CF4F305367B50F0AA2FC0D0CAD60ADDB4BC25BDD2009BDED9CC29F9262793E801443E92E55F1E86CF8C546778903C8A546F2AE0BBEF038013D1A51AC9B5CF0B5EDAF4C420C70A02C20F55897239FF93821FF2C37DD5145BF3A56C71AAA618A0A8B5AF717F076BD0CBC02C0C6ECFDF32F96D9EDBF100957BB3D7BA69177FE92584ED3170197C4DF886DF7ADCE4F58C4C6151B275019F324C92

1EAEEFA3C9CE3DC013C1FB83D7D15AE9EEE8B851028CF31B34AC4A1080B5D85175DD21671E7A739F2515E0174678A2A9EBB6908399251676B455AE7CDD80F59B9704DAEBDB2F105BDF0DA9B4BF03C37DDA03A16BBEA47AF5B1973D1635CF27836AC52E6904BB324AE91BABFA531EA2091B10C4072E219215EFDB29906DE010DD6D5FE6511C6E9A7E582939FB5C95B6F7DBE7BA25B94B3A01FA1C43DE290AA0C97D58FB0F24178DC4F458A49E3A8EE1C13EA2F4E367D3A1F83055A5A2F185EBF08EE12DBE3210BBBE94

99064A0C54B8C885FD4EAC271252445CFD9937
DCBFFB86125F017769F4ED0DA27440B325A8B0FDEB2F8C30736D7B48703E180A444D4E80FBA8FE6CB2306D87E9E77404064A2CF3D29D18F8AAAE7A456B57D9EA89C3FED83E3CDD0434D9209E08C843FD64FF3635D601A668300ADC9AA3AC0E645160ACD258FD7151F76CE729D926950DDB387D79F8485E103604D2A750377B304D444DE72BCE7834487E2AB4D99A2E70EBF8DBF328B9A4434B33DF8E667A76FC9E77A12C72E442E61A1C0271636EBBDFD58697517C882E39EDF578E8831E9ABD1709D25AD9E0111D99

CD1EB6C3A7036C07D604D8859302E4A5D74F61060451159EE99E384BFCEBB804E0AD726F0A1C5F59769FF85AAE3E579592BA00AF037D96D75A3767E14CCF0BEFF85EF35F9F399E2BDCAB8B85EB8D8B5770B72CD18F15CC760AF38F6FDB70B936929087BF022B8F5A2712FED9CA093EA357772C9B6C53FCC5E9456240CD57AD4A0BDFC8B33E07818250BBBE4AE6B5589FF44FF4993AD574E84BDFDF831DD479ECE46EC758EF5352A934C844AB38B532B4E12238033222A8B613EB0A3AB3B85D914893E16469C7061DDE

9CD1C6A9ED08AF3552C4E342EF916DE651B289E785B7294BD689AE88F20074A7C2861A21405C0124ED757B6F98FAD27A4A48269151732C0F5C817D8420825E47A311C111B000A181C9EB77265BD46FDF9D4350AEBEE7717B7BC13CD859EAE23C1AEBCF2CEC1B8ACF00D5877D7FB434177820A33B995531074DA36D923A539A76C180E41030C2B42A60173E05404BBEBCE4D4EE18B0B9C583FC6C94BFAE8F667E9C70EF5AFCFF6718217AE2D4E61AC314AA7506F86A8EA2BFFE9A791B2F54D32BDAB7D706B28C916861

015442FF13AAF7B4D3196309ADF4D2417B63A1142BCA4DB6BE803110C08D1BBB86BF21D5C8EB2E984C760F6C38F9C96CED8C5B49211A769B544B431AD8070184C2C558F65AC5BE083E150C7C5F1A5012101274EE0188621A4950FA9A73AC10FBE7CC30D683BF1ED02B92E19A2BAD2444EFBA3FDA9807AB58182C168AA2AECDACF8202A97EFB0B07FFE881ED0FE20CFE30631BE615537004C9FB49E870BBED2085B7750D4D35F390F3E9D07ADEE13D4EEF1BF0E38169093964F46A10C9FD5AB15E2FBF7E845A7C7FDB0

5FDFF04F39B9ECF32D2572545D4F5D3907A203ED1034DEEFAF6F60797167CF3FF8E6FBC8A6BA75124261E49BFFA8F0E01EF35D26A1DC8105D56855B6D9A7FF489CCADB4DFF17F7A850DB310006873A93D820E4DCF6CB0EDC3A4831F27EF7172D70350B5B097958FE8C80A56CACCAECBB075465C5CD126C5FF1C5AEEAE32913E5DF09E92B6C7103634C7FDBFE4BC2EC31B70915F425549837812E8AB467367A911103AFCD7C4E3898D8F6FB8A870B95BD28D0EC0ECDC54B3AA621B9927080065E558EAB7909303E57B5

332CED6F86D078CCF788BD0243FFF21B569926
2E4A56F63912AB28D2B8800078018D3909B864AF7F55CB633512702F72378319D585E6094A72D00FBA83D1D3D63AE160E20A3FE5BC2CCDF61018017971A4C47F6B99230F8BAE3B587819234C1772A3C6E6C620ADA92315B1399AA471E2AB04D3F554548B969A5B538371491E4A0760534860B47DE2B7717DD621C3940BF7E28E43AF989DCBDF9E77D6C9DCD67D281DA83C6607F4B4A07721EB22FBED6AED709A0C4DE9F8CEB8A92FF7A1FB43DAD2EC5427AD9153464B374ADA5769FB61369CF17E0E399406051A8A61

A038D55B1425A810E984D9DAA373FC95FB21828119EC5FC82718E8E90B3C9038508DA2EFBB32C34AAE2E66FC2489FD86B21A71AF72AEFC29C897C7065FA71BEAD81420584BD8AA8173F200526D07325D63002EA1B29B614927DD7842B35D9C5FB04E8ED43D2F7A3CD45AD12CC70016217A8BD619C7C58EF180880E44AF812FDD511F1C5C467237FB04CB7C3A9756324C036DA5225C89B3EB6024954681240EA06FF77F1F7BDC6396F589ECD7BA0C566C81CA2AC9B495AB60DFA52F0BDC7FFEBB6204F4EAE1E67E046F

F23A99627DADB8A23F1562A52DD40B048B26CE22D138467FB31620B30F3FDD7D0F36C244BA2EA476E71D665C1D323713CF1D4FACDB9A90C5144A54ABD6DAB62A70A6F21DC036A4AF16046383D821279521EBBBC909F7F2C7066C3F4D0E672CB02C53FB01BE1AB43BE3F79DD28B463C39475AE33919A9BA9D842A3FA9109C121BF11E585BCB8C0AE4B525051C68996B6C63D7B7AA9671E3A6CAE9FA24E83271A3F4C5608029C27C6CB1842D90A93E39E1C50C36D9D0CB85B934A70F937B3F06C6A84202D01CC7CF1ED2

62B1E306C8783F7D4CDE5503A3E2D641CAF473F5991C3E4E6B9C3B869BF582D15D316A96EEE8C1BC25BDAE9708826CD3BDD871350DEBFD76844B465D8AD9E41499A02A2740792DCDD4E9821121A29AD9D8238DC8234EDB8648CE99821C86A88142CC1553185687515D5E1781DCA0F70A0FA7702E70F5268EF05502C551AAC73D723E940D67CBC6B87CD809FECCF6067704E5F63A711ADE56437B16BD2984E9B9D2D86A9C2AE176150F963EB65A3267B452D9A9DFB9BF1EDC7CEF80A65DCA7555D8B848CCE78D8A2199

CDFEAF4F1659D21FDA4270175D5A04355D539A192D19324958A1EB8FDE5360B0E6CA60E9FEE6D3BB75F5BFA36280A68B1F19DFF2935A21CDE8715DD01983BD217E303B6B6DBAC92C5F9B3CE4AB5A9ABA700620884C14C7C8C47C3995567388D5A761BC91E929443677FD3B903FD2DF154F608087CC57B9AB109074A350C68E84C332E2DB86016AD844853C89FA86436755E8554F2A4AD5AF66A21D1E8C7C7298834DCAFDB9D04B56F7F492BBC1AC4C114564A1352FD429AABBB72C778508D8B9574B5893466412E219

B2472E892DE68A96A463CB8CE509998D3DDB86
658208C5227FEE8B2B8E11A18301F7F87CA7A7CC0FC3F266EA023307433625DBB53D8CF596502448496412343A83986A8B7E268531DC6EC8225D7003E98BC6FC608C5F1CF1BB9DB776A49DD8E5246CAAFEEB2BFC10B1CBF74FE621BBE5F3E4B29E8E847C4D85D977E6635FD8A524B7ADFA4513937B769509A9580E194F9E56DDF207811A031C587CA1DCEF4A651E637CEA4E8DF51B69069113E26161927557C2503EA02BD12C2D3402659D7E9C170D87443BD2D7EAAFB50BB08FF5C0728781E477747F92DF305044E3

8132F1C3D26F162BE10F253BF25AFE53110EC18DAF9FBF0572891858EE40B9DCB68A5FE2D4A9E12285D63E63CAFCD2894810835041EE2416DDB2585AC146E43E14D16F5168AB87144FD17836F4DEE2E1F64BB581BE0F26D903C7A68CC0DFE82668385FE33F08A3996BC9B2341AE1E74D564972849ED61D7FEAAC8C31ADB1726045EA04522BB9A35A55C3749B14A6B543E66F7C41790F4D911AFC9FE30EDF0568577DCC36A9C97D88EA4A5DF3DE861B5883B2CD2DA9760CD2B99313C16FBE46808611C525EF7C2509CF

37F896E056261BAAD9B45422BDC56C04B4623EB505D7FBD15A31006BEA542100681EF5FFA37AD0B6C150172E1AD435C2DDA6922A19BA22EDF78334568F88F24F4FDCFFC1827CBFBC74C907DC78A1CF7BC735CE999AD811F25F94D06336ECE574E2221BFFD68763C01F67AD89F3EBBF416CEEC3BCB0490B2C7804CB41835F1E4BA5B3E470743EAC3F4D896040E23F68776786CEC7F88508BA2EB5ECC58D418FE245E49BB13BB608668E9211D8E9265A06D6BC64D9993297E45FD40F0661B09D689B1E8E3D4DE75D1F52

5D7B3C22D71A86C08C4DE96DCF785D48A8DC7D582D387E826ABC067B0F1FDD12E61F9684FA7CFB31FFF10A352BC9DC6C6F9F48BD2BC89E33CE19BB44378869D2C3053DC278EC353DEDAFFD32EE852AD610AE82B97AFAC4F25B355E5379301B9231EB049C7B76CEE23EF0E26E16D42ADC17EB2EC4B2FBBFF1305CCF28760C035BBA8D9DF9F5AB6F68CC111DCDE6AB82571D5410FB9E28B7247641D872378B3FCE23F50FF704F11C751C84FC8E8C5563F671FE37FDD318DC75F9FD7C0BFAFE118BFFC5E6E3571EB900ED

2C541FD2B9C8189D8DD482904EC02A46A45B32C48ED0D850FF471365A35D4BE902E2C2F87BD16EED4398DDB3712280B7177B9E3F12E85AC5CC210AA9F27836F55F2AF38E6E613A6282A99CA4DBFA9D156039A2574D8FB7F00BFC2613A7EBCD2B93104EEB72813F35872E22816748D39F1ADE8AFCE8B32D48DB2610AB2D9657BD13C7BC3A5D588788A402DD159026101E68A3CA4951EC662DEC65ECD969341CAA7731344E84B66B4699AAC19D0060D5C43EA91487B1D8F084EC00C105B2D7ED0312E80834CDD9F0B2E1

09EE79E862DC31F946F7D2813E545F028B3446
F8BD5D20929530AC238CB6F13972030947812E41ACF3734F8ECC75FB8DCBD4B5F6F6C6BB657A21DD0CFE88623283C2D84897F823B604235D9E690AC92C32548D264D745A9A3AAF6D840CA1EA09163EFF0795E5B1F7FEAAC6F924B5310E57923AE3817394FD77A4B572E478A6E68DBE3389BC284E28E1BFAFDE28E2C8A193CF779B53AEA77381D795575398340271D9699CD87988352316227A9FB05745F2CB2667D0CDDA3043FEFD2B2E28362138E68D98AE5580D03CA31D6719423A46E53E3BD4EC6876084313D2AB

47617478A828CC44B1F88AF4992FB09B61FCF3E29B70684E1080F458050ADC2DEB84706EB530517B553F8EE4CDE779A8D2D1151A8F0CAD5D9864B391FD6FE6460D343B6F23D92E039F16CBE3FCD308FAC4A8A6EC6D1A9AF864B9AAC805F2403A49E6C1625728BB07AF3D79E4B89992389D772F1BD1163D764A699A6D69C2A3ED9AF548F8B6C55CB62EFC684948F57C3DFE3CAFB89D61A3DC4AB1CDB700749DF6C6847F89B9A6EB3085C51A307F60EA3A4FBF3FD562C5821D803487AE11A4F4B040D055523428AD0B25

5EBD33F4EB3926EED1BC8C615199BC8AF64DA1DD4DC23002E36AAB94D85D12B2824FED3DAAE7DFF19AC0BCDA83ADA6028A038765E08C82E7D9164AE844458D133E63F1D297DCA0579E8582CF1FDDED0E3872855965FFF08EECDB32AE4919629B6246B25D3F6218957D5CDE338B7582700EEDA66216C3B7A34CE11029CC8EDAB355750DBCA1BA181D547F91F5F2650E86C70A5B96F0B8D35BB09ED101411878744D02EAB00BF32C870DF559DF24656B670A549DC3684F06DA4D8BE0A20F5F917339A6398539C8DBBD06

D6A830826D6D052537D4771F402EBFCA6F0C8F1A5371B42AE3652CE2210EF7E7B82B1838957CC7989BFAB0C2BB7F448B76BA40FCF7EC20B46B5CDA1DD9A48BA4616A7F7D89770C2A3F0BA775B3CB8D05FCB775A1F5CE39BA2363CF9EBE32EEB677A86E4415621EB461908101E1EE04B2B12E28B6B4A0125D9235CAB00F8D136329324F2F3B56A9D89422F211110CD10DB2EF55037EB62C593453ED187D8EA8CD139472B95106693A8BDF11A8D72FD485EF2A38556B458A8FE3DA15C77B7617BE5FEA894D6D3537D19D

A48370ED13B30BEFD8C5C0F200E884F87A2BEA010E7A16E481CF6D0389C849E0A476C87680F96BF15ED87686E390CFE08DA5CC3D3870F42808D0F7BBB1487FD6579B42B7E995E2A8ADB8602D7AFD45C06045283130AF325E6E0CBA426A673743DE7E267AF32F493EF563C273CD086DEA08F66E30CCD84E616694514D86822D836DA8BB34F5381024C3D27614DD89E1CACB012857C905611BA8F39C63EF6EA1BF5EB13AF8EEEB4083AF689F181D09667D6EF76EE0CD98B24675842CF0FA46AD3390E98BEF53CC9141F7

BDA321C7E8DA5711B5F5681558252C21BDC4E5
7EDE23E2C356D391709CDBE2BBE4A924E75BA35B702A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

 %endType1

end

%%EndFont
%%IncludeFont: Courier
%%IncludeFont: Courier-Oblique
%%IncludeFont: Courier-Bold
fc
%%BeginFont: Lics
%!PS-AdobeFont-1.0: Lics 001.000
%%CreationDate: 3/18/95 at 5:31 PM
%%VMusage: 1024 32473  
% Generated by Fontographer 4.0.4
% Lics v1.3.4. Copyright: Luca Cardelli, 1993. Free for non-profit.
% ADL: 816 184 835
%%EndComments
FontDirectory/Lics known{/Lics findfont dup/UniqueID known{dup
/UniqueID get 4364290 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
20 dict begin
/FontInfo 16 dict dup begin
  /version (001.000) readonly def
  /FullName (Lics) readonly def
  /FamilyName (Lics) readonly def
  /Weight (Medium) readonly def
  /ItalicAngle 0 def
  /isFixedPitch false def
  /UnderlinePosition -54.2194 def
  /UnderlineThickness 8.15332 def
  /Notice (Lics v1.3.4. Copyright: Luca Cardelli, 1993. Free for non-profit.) readonly def
  /em 1000 def
  /ascent 816 def
  /descent 184 def
end readonly def
/FontName /Lics def
/Encoding 256 array
dup 0/NUL put
dup 1/Eth put
dup 2/eth put
dup 3/Lslash put
dup 4/lslash put
dup 5/Scaron put
dup 6/scaron put
dup 7/Yacute put
dup 8/yacute put
dup 9/HT put
dup 10/LF put
dup 11/Thorn put
dup 12/thorn put
dup 13/CR put
dup 14/Zcaron put
dup 15/zcaron put
dup 16/DLE put
dup 17/DC1 put
dup 18/DC2 put
dup 19/DC3 put
dup 20/DC4 put
dup 21/onehalf put
dup 22/onequarter put
dup 23/onesuperior put
dup 24/threequarters put
dup 25/threesuperior put
dup 26/twosuperior put
dup 27/brokenbar put
dup 28/minus put
dup 29/multiply put
dup 30/RS put
dup 31/US put
dup 32/space put
dup 33/exclam put
dup 34/quotedbl put
dup 35/numbersign put
dup 36/dollar put
dup 37/percent put
dup 38/ampersand put
dup 39/quotesingle put
dup 40/parenleft put
dup 41/parenright put
dup 42/asterisk put
dup 43/plus put
dup 44/comma put
dup 45/hyphen put
dup 46/period put
dup 47/slash put
dup 48/zero put
dup 49/one put
dup 50/two put
dup 51/three put
dup 52/four put
dup 53/five put
dup 54/six put
dup 55/seven put
dup 56/eight put
dup 57/nine put
dup 58/colon put
dup 59/semicolon put
dup 60/less put
dup 61/equal put
dup 62/greater put
dup 63/question put
dup 64/at put
dup 65/A put
dup 66/B put
dup 67/C put
dup 68/D put
dup 69/E put
dup 70/F put
dup 71/G put
dup 72/H put
dup 73/I put
dup 74/J put
dup 75/K put
dup 76/L put
dup 77/M put
dup 78/N put
dup 79/O put
dup 80/P put
dup 81/Q put
dup 82/R put
dup 83/S put
dup 84/T put
dup 85/U put
dup 86/V put
dup 87/W put
dup 88/X put
dup 89/Y put
dup 90/Z put
dup 91/bracketleft put
dup 92/backslash put
dup 93/bracketright put
dup 94/asciicircum put
dup 95/underscore put
dup 96/grave put
dup 97/a put
dup 98/b put
dup 99/c put
dup 100/d put
dup 101/e put
dup 102/f put
dup 103/g put
dup 104/h put
dup 105/i put
dup 106/j put
dup 107/k put
dup 108/l put
dup 109/m put
dup 110/n put
dup 111/o put
dup 112/p put
dup 113/q put
dup 114/r put
dup 115/s put
dup 116/t put
dup 117/u put
dup 118/v put
dup 119/w put
dup 120/x put
dup 121/y put
dup 122/z put
dup 123/braceleft put
dup 124/bar put
dup 125/braceright put
dup 126/asciitilde put
dup 127/DEL put
dup 128/Adieresis put
dup 129/Aring put
dup 130/Ccedilla put
dup 131/Eacute put
dup 132/Ntilde put
dup 133/Odieresis put
dup 134/Udieresis put
dup 135/aacute put
dup 136/agrave put
dup 137/acircumflex put
dup 138/adieresis put
dup 139/atilde put
dup 140/aring put
dup 141/ccedilla put
dup 142/eacute put
dup 143/egrave put
dup 144/ecircumflex put
dup 145/edieresis put
dup 146/iacute put
dup 147/igrave put
dup 148/icircumflex put
dup 149/idieresis put
dup 150/ntilde put
dup 151/oacute put
dup 152/ograve put
dup 153/ocircumflex put
dup 154/odieresis put
dup 155/otilde put
dup 156/uacute put
dup 157/ugrave put
dup 158/ucircumflex put
dup 159/udieresis put
dup 160/dagger put
dup 161/degree put
dup 162/cent put
dup 163/sterling put
dup 164/section put
dup 165/bullet put
dup 166/paragraph put
dup 167/germandbls put
dup 168/registered put
dup 169/copyright put
dup 170/trademark put
dup 171/acute put
dup 172/dieresis put
dup 173/notequal put
dup 174/AE put
dup 175/Oslash put
dup 176/infinity put
dup 177/plusminus put
dup 178/lessequal put
dup 179/greaterequal put
dup 180/yen put
dup 181/mu put
dup 182/partialdiff put
dup 183/summation put
dup 184/product put
dup 185/pi put
dup 186/integral put
dup 187/ordfeminine put
dup 188/ordmasculine put
dup 189/Omega put
dup 190/ae put
dup 191/oslash put
dup 192/questiondown put
dup 193/exclamdown put
dup 194/logicalnot put
dup 195/radical put
dup 196/florin put
dup 197/approxequal put
dup 198/Delta put
dup 199/guillemotleft put
dup 200/guillemotright put
dup 201/ellipsis put
dup 202/nbspace put
dup 203/Agrave put
dup 204/Atilde put
dup 205/Otilde put
dup 206/OE put
dup 207/oe put
dup 208/endash put
dup 209/emdash put
dup 210/quotedblleft put
dup 211/quotedblright put
dup 212/quoteleft put
dup 213/quoteright put
dup 214/divide put
dup 215/lozenge put
dup 216/ydieresis put
dup 217/Ydieresis put
dup 218/fraction put
dup 219/currency put
dup 220/guilsinglleft put
dup 221/guilsinglright put
dup 222/fi put
dup 223/fl put
dup 224/daggerdbl put
dup 225/periodcentered put
dup 226/quotesinglbase put
dup 227/quotedblbase put
dup 228/perthousand put
dup 229/Acircumflex put
dup 230/Ecircumflex put
dup 231/Aacute put
dup 232/Edieresis put
dup 233/Egrave put
dup 234/Iacute put
dup 235/Icircumflex put
dup 236/Idieresis put
dup 237/Igrave put
dup 238/Oacute put
dup 239/Ocircumflex put
dup 240/apple put
dup 241/Ograve put
dup 242/Uacute put
dup 243/Ucircumflex put
dup 244/Ugrave put
dup 245/dotlessi put
dup 246/circumflex put
dup 247/tilde put
dup 248/macron put
dup 249/breve put
dup 250/dotaccent put
dup 251/ring put
dup 252/cedilla put
dup 253/hungarumlaut put
dup 254/ogonek put
dup 255/caron put
 readonly
 def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/UniqueID 4364290 def
/FontBBox{-86 -220 1204 921}readonly def
currentdict end
currentfile eexec
D8061D93A824650EEFE2785F13CD28A8A226CFB0A1A99075777537F54D30DAC903425F9EBFBAC49D8FE81A6632A550EE84ECEDDE12762EAAC72101C3BC20CC09AA30E15D7BEA75C13D428F733B07739561BAA8BF30F5554D13075066EBCF49B234A72A78CC16EFABD43856C2208C6466A0AFC9C5F8CE746C402FBFC21AB87044421D2C6262DD33C6A2B27BDD70D5D63A72F81F45CEBF828238F65D4B324553682BCC836898AD57B121CC45BCA04E1B1E8FC969C190E67C74E6D8C1239F06B5A08651B71EE344710AC9
34A46212B0367BEC2930E116BD875E9C7A3C939A48CE53B987B2DA64DBD10349EC94812A837450E07FCBA5966CE12A47E7574A40F3D0D2EB1CE12CBDCB70C0D7ED8375FEA6862D12E5E07A646F0755D029767D35FC5B7B74107FCE0D998847B6CFE305CD67F2387600C232BC5CEDA184FDD46005DECC462CB0F335C74C2D1EEC6C185E9201769CE1A892DB173BF2E79E8E3E1F39C5C41E7B716AAEF5E70EAE9D29B46195D0EB8F56239CC17F985DEBC56748134FCAE09E3083B95C60127DB2B1D093C97FC310B5C6C1
AFB28A004FDE4CEA0D3C270C840C107A1E49ED750571D7A1AAC33DA3F036ECE3F842E4A126CB40ACB1815A2BCAF0BA57E518F2EEA1352E289D35BBD79213DA65BDD5B19883855C54CFBEFA3103871B8ABB25E6E5C057F93CA7A34EE6F4313E05B3F49BFC84DA48E5FFDE41B31A9BD179A457EB056A62E675A376EAE6862B605C1316426A0C2D83B1B1545FC12F799C75518E5FD525942040060FC353DC802E04082759AEBD0CCE4B7241F4209E76040EDCE47854B22DD775F7F44A012E40ECA91A63CD9FAFBA7C4DBB
A5A1F71235193A6B795962039F761F176132249B0F79AAA61C86D98EE849411352511AB81699CA315D689076A12EBA53EB77E36A46B2BF9440C6512F527FED718176B84607AF4D33131E874F5CE91879700EA7E8AF3DB6024E66B0109A22BE938C84A0B75209AA4A358692A287F506ABF71A659CAC0F90D3A722E1DBE8ED38734C6F09BD228E410D851E4F5C06E14DFAB81E667D922CE89F52E03458A43BD5E682F393E813B8B530EBC988C63E8A3F98100A6928E1AFEDFB89CC91C260CF352C9A09D84D382F584BEC
35DF51D743762E7C18CA203E7BCEE7CD999396CF19EC0452DB025C1CD2890B83DD26D8B49E328E839F0C4EF2F9A8A223705725E850B6C863A3CE5F5AF2A3E53D146A63B2E5118815CA47181C522BF44A5584FD668F97C1235F409490633DA5B4C60C98F27C8C2D98441C80D83B605BB6DE569495C6F0BFEA3D9EA2D52ED4DB93BC04ECF42BA0BED7BAB27AA1554CA406514647A84459497CF9E1D59A56AD421B5C8986923C6CDD5A80E67E0CB6BB673E378FAFCAA152F2DB0D9745747E08C147E4DD9D24DC1979522B
49D718DF8C0BF8C984743E064DC62F92DAAAC6D600910FE12D8DB46AE88CF9D89E70104698BD9F0F84470B2891E7E61B28E267A41E4214F7A71DE1EB1185F7FD7A630896FBA7DFA726110713921E6AD6E169DB3139EE744886950AA959415EBDA2D6AAF122F8D40F03CB25289F8A53BA09623369E17844DD49577EF3A26D82525777D3F1DA514F9ACA52FC2B2BCE95E6DCA332A3FF69DF81395EA22613A51E92F1FB6DA2C93D6167FA123607BFD1524E0E12A859934AEE0B51A32A8BE27C22515E470241F8A6A8B79B
60AEA82725AFADD541462D556E3098FEDD429A59237643D97396B089410F36D2BF35143ADC9439D236B780DF321888930BF609EEC48ECC2B4A4FF3F2C82C2E23CDA0236A468D66573B16F9989ACFA9311075D8AD230F326A6DF06965410F011268D3CD90274CA82F41FEBC445F61ECD344EFE32E20797868C432E68EBEF9BD0096A040D15BA764EB699F5982F42ABD375FF72654B3F394EF362A0179A54A271CE1DCF7DBB5AF38E632723EF7ACED2270C4C4C58FECF9ACBEC89EDE829BBB392132D8F2B33968A0DDB6
E63C2221139D4BE9C0CCF1BEBDCE474D7E35D736A5EBBE952182D4FD978C0A2C46EA49B63E12469A21B34C672BFC778DECE291B28CDDF70B1D5C21612AC0168CC54D14C887F8B18305B20C6EEA7FD4321B589110EE44E78F7195F25A1E9F5855C97F2449412EC603759165B85F6E9440BC74666F94285E487EAE7DA7A67B7743E46415DC03B7519E18D7D1F0B0FB24DFB2A1A70150E7FAABDFF4BB4FAE67B8A3D85BE1A2905ACE2A941A87198983B6EBDB908547D4119C9C5E29D5004D2E05BC17F1BA4EE01DB0990F
11E31AEE814BF0514F1B40BC1472A5AB7BE0846C6A30C8939AF9107ECF605BE6AD6AFB646E906B300C7870A3C7C6FBEDF86D0895E77DB1764BB3A4D827F82A75FCED59E5F5039CAA7FBC31034244110F293720BF5C6F5DC9B3C21AC9D03D7339850B452067A27B23A400875EA484965A6009549815A49B500FB41E539A5B868D18571F9BFDF47E62B29DF55968DDBA53DCDF287FFE28C592B5E1366A35CA986E5054570D20CE0B62D87315A7A455953953127F5EE7BDD8C834545A6D1E5FBB134637A31B57227C62C0
4B512601DCADB2AE17154735B94EE58A20166FF8D59A42B59C6BF3D65B27DA7090F85C1A4F45763B67778F3BB798F085C6E546B1AA2161038FCCAB477E458EF43BE2B95A600C40DD56279F48F37DFB8640B409B7D0C7D86DB3A88189954BF9A0CA0D700B1889BC6439FFCB6E2174C553159C94E807720B036EBB9A36330609D0C25C638694633B83E2B7952EE4C83A8D26724B380A107D28C96A0B6B845A07A19FCCBC569FE350BFCE3B6B6F9505D8D9B25605FFC71210090723BE25A0555F9A0A5025AF9E3D228E98
07209F0146E7280735F084402402D2413EAD5AB5AFE1E12F650BB12E02E069041055B45BE6A7342DB5F6665A15B0E7E0A2179D7C7050BBF21F227D473777DB973BB13055C59D840B4C8ABD1B4A829CE3B2EA30E99C48290A897F5D9E2731EFE4AC345C43AFD7A3F83B3AD415E71F531A21DB2B859DB43095FCEBEAAB974371748A1673D5681D7300E6079B57ED9A17927B9554BC21914E11681DCD8CB9E8153456DE3259819E3519C9E46BF7B62BC20F690280F3891AE396AA347C82C4C8CFD5CB1B318D9521C254BB85E6F4AD88DB82E16A41678BE3B0DDE4CF2BA439D69392DAB09BFB04A6BC1C48993296BF
3D7EB0D60B6F5856F6AE4CBD923B007895A3631CEDB4E1B69668B3C78858B0A355EE79D8A004C4D462A015C7D7537726CAB0F95B747678988275B35D44D6670795D940B5819113D95342D1CA50925F8CB89ECC58B93CFA0D6E372CAEFB323A104E28538E08EAF2ED995130701B6F7032CCD8CC21759100935FB4E634B617C23E3CD0C1D841A9AA11909880582B65468E9A9B0E9599E900FBFCC4B7E85D1E0F8BC9ED859E4D2A15750E2B878276A9F8485B96EEB8AB0CC9CF0BD06A91684BA1EEC3E80085769360CA99
B6691D0CBB9347A6EBF20D1A20EB9EA34CEBE90BA6AF227F75B43AF2B625D3A5C577C581E9567819970CCB7A30257B4436DBFF27E09270FFA0D0FADB6868FD03D2B5CF786CC82DB940BDD29542B7E6353B573A97E2924765A7987352B5D4202B2D2D26C4932FD1AF648112F4F76396B0EA12FE79A8D49C77F2F337140A21F1D8543A5E2B1B8EBEC801BBE0FC34032C7268137E80B088877F18B41D343F2D4DBFE09977DD4A683A7F6BBCBC11DD3B83D0C8194606FE486BEEA4310607F337C9E8BBE1E626B7E9B91916
E5B2CD3626D559BCD17F890124F9582F33B2E0D595BA8753D4260358A572FC8C76086B816DF9361443EEF5188BC4F8BCA0E433422D77BDD786CE1253DC29A99B1DCCF5E4D88C7B1BEDEA3C46D23E2DE2B7E303D0C8721977130CE1932D2BBDE86BC87D64CE95E940CB1C9A5493AF7E35DE3793A6BBEEF20B7B9F8F6F7FA7C4FAB3A1C49E1A45DD54D1926098D9157F873A7DFB5760D542DECA7C88E2481F5DAFFF91E8BD214D4E70B69E13498A319B72D0671D5C76ECE5B4215F9593B148A6A11F902BD360A21C13DA
1D129F4111111B989400AC20DE51BA0681FCC602A958F70DECECC1CBE9E2A7E6199D396C991274EEB5F8C908287D407ED6C0DB165AF0B07615AAFAF0FC4B7F4A0071207990DFFA29414047FFD857774D87D47AF747CC4C98DD98BEF47E1C3FFC01BBC868F7840CF8897493A49521CD1780418981DF0619FD5C0E0E83E48598BF437ADC1BA261FCFA5576DB57A9E0863302D9A9443197AABBA6FA569CEC978B8C1BEEC0FAEBEF90415A68AD1F709D2CAEFFC1D9257ADEB4D8402784664D83DB5E4268CA14711E019225
F0F03DEDF6B266A82EFE24A1C699F449B04C619E6D29B2AA1B1F6F4E7ACDC1102508D540637B9D2924869D00AA8990C9BF3A1E2F777B7F624F09BAAC06E746C7E4B6FF9DF7AB196BE9193ADAB5698E79E71FC2F578A376481F69C89D50720EAA48A90E82B2C824FDD633CD3A174ED85E7DBED61D9815F256843C3FB0D6A11C2FAE32BD42488AB2D1D8E5D9CFBE9EF9F3101BE13CE337F112C720EC59D959AB58D65AA99F771B423274AF40C9D5006F7CC485B2DA6B151D2B80D023BBE304E38029EA9569F6FCA95A1D
09EF57EB0B2970B09E78C2072E3FD9C0527ED749E42149C098500952AC3DE97F98DB39349561AD690AC258D8DCE42AAF298A078B8DFFCD111227CC327DC3F73D7A4948F56EAA9B33FB3F51B03DE8B8D520BDA3B8C30B4EEAC2FB1181099AC296B66AF7317360CC44D2DF52B549D036E784D88DDA79BCDE46F1D807C61749FB6261F657C4768D81E1B8088459B019B9B7A9754556ABE5AF9CE57B643039251BA38185601EF7E827FF1F194A8D13BDF83CFCC3921D9C33B526664DC3AD31903A62436CF9C34FDE3861BD
17E8E66BEFC06012A70B77631EC2EEDB748D12338939FF4894B8DF1F46C9B7590E4410B42CC746E81ABF9710ADC46AB978A6FECD4FD46E4C7C634E7E7EE937D0B10B1827150D654A6FF1F35339A27BE8C454DE5CBD93236F55AF6EB94F6A388008F33B94EDA58F7FE6EC092E91121B72A54AB52F45BE15B0CC478296029F7679C8E33396B00FAD3070D4DB3554A019D07DD35FD5131090BAFE16F9280ADDF73177F5B9EEA2753089F8B32C2C8627A70C879D8186BEF46127204B6E8E2B61A9E463AACBCF2EDFBDAABB
95A7684AEB22114099DC6AEEA6728DE0DB7ABA61B5054DBC2AFA1857A19759C9E8EF0D1C2F371A277C513985771487998D00283AEEA07E705359678B21DA280734CC6E1A1C37D3ABBB651671C805057F90FF8AE1391014F9CA05095D336271CD08CDD4E8B63B91386CA6F9B9129352E38B974192386BB3357BBB01B5E935A421D561B7CDDB287C8B2341BBAA99D7BB00466E8A4062B848A9ACA305CCD7C1360A2B130AC716A2F67F7F75F3AA96000A0E112C395EA74779945E20B3B7CD21F0FF9562C93708ACF47275
907E9C8AFD018D62675899DC13F82BE4188D8874AB70AF133130FA6EB254B7C03AD202264E715EE246C53A26AE0180680CC87F5C4C053AB73FF72EC143EC9A479AD2C0149C161BE8C31688B349B21AB47A1F0832C2E63AEA73587E98DA5B1CB994160CFADA845110C8AD22F0195B9332F88355DC26AC9760412DC66E127B48AD793BBD5DC6CA720823DC67D26D37D88F293DDE798E9BA64F7824C48C184FEE6099D8D8EF3DD6A54AC56713A04F603516E8DAD5CE4A1E8F7FB1005C87B9B0E931D94001ECF9FB0B8196
8DC6DA26985566BB6CAADF057A4CFE529A5E3B91F14AA5986B8059E6DEA2D1FFFEF72112A1576E0294A5DCE587D6F27549EBC52F34F052D4C1957E57B7878EC302C9CD9096A8E0DB01BAC4A7856C80CBA5DF34A6F51119BDCD8ABB28E7BD26119754DAEAA9B146F8831982D743E5CB48D605E7BE1BD20325747B15D59D0F6E030CC82F13123D834405D8AE8F5C5EA1B5C506073D909184F7BA410C39950233F52221866A3B7788F6E67D79EF41F80CF1C9AE9A29424DAF5E755483BD4F0EFF40A702E6D82369FCA66BFC864816EE6E9794688B0BCBB5DD19A48F5F80B4AAEB70A0F89FE3926F9C3A290C1D1C84
DA0D01B59AD1CE84ECF03A4D16E580F1C467F95C42081BF6E04B80A5C77ABE5E146BCCA23089E800B1265059613246E5F2E6CF21027E3D39017DDD9BB3EEB8E7278D36E2C7405703B8701564C8066A2667B13FB469379C528EC9A2ED4F78CD3918E00A250C99648DD2B8032EE9125A98FE6BFD7C954C4734865821F7EEFD8072158AE29CB770901638E28283B8EF78CFE78EA51DF907940D4F6BAA81C4E7C698D47619C3179BDD8FCE6248D3BDFDB5210E599F326039AB1BBC91679A0765A56364C317A7B62EF9B080
F390A414B154CF827406A07ECDC40623F9F81F207F8507E6845C3A3BA51F811FCCCB0FD98CD1A5919D663AC6541CB0D77A6957CB37A3E4713D70A8C61AF6DEC1ECAD547E24EB2AFF20E6CD9245EA2B883F9C9792CE756EB402D81DE704642BE6CC5BD0DF7DE3B9ADFCDBDB4C3BBB7C25D028BB0FF55E30DA5CE8AE4CE3DDC72B824126FD6DDDD98FBDFAD681F156FFE63CC774FD6968C255071D0F23CC440987288579211CD70D75A58772C105DD7396B1099C7E2108B1EA46D0335B3FC56C75F9B22710C4FBCFD633
A3C1F4A25CE88A416C21B08925916483177A7AFEE09AFABE6B569B539FE3ED0339697DFE8968836DBD7BDFFF0D8A8E85854ADAE4DBABAAD0027305BF5A9D0DD7C5A7730DB462C575AA2EF7D7223E1CBDA6C700D9BD56457DB45061D33E26F09F9A632C7439C4F266014BC2DDC0B0A82293A3EBA1DF7F0329E96C53DC08CEA9E4632885B84A28BA62F15F32099D180FBF08DE180F53BCA692373FE8ECD2879696D77E421E60578A8E9B33962B19E4EE713232602D5A54AEF632A4C2200CB4B5B1092470C338B85F65A5
CD80916FE27868FBE788177EFD7462A5652F867140D6D4F69A23BDC4BC1CC9BFA9EC11E18E9A83EA61CBC3875EAAB23597AF8881864337AF5F7DEAC503409D64F82950A26A7B205ED2EFB2F906F1D1EEB72AC7DB89B4E5A028EB2F4D0C98403D5DAACC2452A8871ACCA2F9B90A4074DBB52F57A600D5DC83FF9E762AC5627E1AA8EE44AE89CC7FC7AA0464BD0B6F247EB5262B030E422824CF0A68B54D95CFC544BDF9C5E9B8E4BD394C9C62B6AD643A111888A9A444EC0E7B776CB25B180B6FD8E07A5812E36E4F5D
4CF7F3985E472B0C74214DADB95373F28C148C9745424A07DC28F4358DE5CCFF8ACB544AF3FD6732295D24DB9DB30B16A6A55E39D52ED748D5D2A69FECC099F629ABED92C42F388984F0F8FE767F5B11DC26649E4A8C5AEF222A30BACCA62A126B6682CDB12F96476DC5DA41B2BEDB16A54E5BABBD1D60F1D939EB4803E7E559FCBE45FA05990DED5FB5A0B52870270D7473C5DC72BFC68ECD5F9882F925AD81D04825162BF0978E7B35396FE3CD4C326D4EE7A45120A97744374C7072909FB7AEED9C725F7A2ECB07
02EF6FA98D288B27C7967E3FB2D56B0A803515FCF4973F56011B3FF1DB922391C8C0EC1E85CE9A52CC7FA4D1A70400FF2BA78F0896A78179E1692C42BAE913907BFA62C2AC415BCAE1C88C1C1BCD50DF405BE808A0EF7DC8788F821819322ABB3D59DE762FB479C1901924FBB2BF20AE94B5BE430CEF9BD5BB647AE780325FBC39B37481789EB71017E229E877CA0140F15A91586162EC241354AE04E572B3658891B7E244DD210FCC65E019916927E575BA14992E73A4098290110E51832D24614891FF1C21CFEF1C
864A260992D218A667D1E5329CD1DA967D4AB6FD1135095DECA3CBC690BAE2DEC02FDB9391225559F698E92FECA91F2A200A75BDAAEDF30BFBC1C58507E2BB6D42125DBA3ABF03932A8C8FC23C4F31E8228C0DE0627743958CD6413C1660A47DECB39EF6C42ED8DA868897A16D596AD008CA05538860B18E79D76ACF84BA14A8F2CA297C0D516F993AFFAEBBF2B3CC712B1EEDB63D54E0AABB83B52AFB6C44FF47420FC7C9B736C5BB378E9AFE10BE33C990D94411AB68684FD09061A01AD46521DE6B5A7DA4988089
F6D7665F0816933F0D4DA489B8C9C706DF48437CEB40BB4C8960AE05474DFF6BD06BCDA785479328B1CE216EDB158CB932F69BB66B7BAF8D59798451C10F22FA36468ECA67619D423B0C4366CE9BB04BC20A9B66D5B6507D40D07E589F8C5793A8E456383B563957C74830CB881F2592631AAD037BF24FE3257CD36D18B1203D7C0393EB24EC054053139DAEC5DC78032544C52550445CDB4C8B7A168F2047223803FF4272C641F6A7644B53B9CB0D29EF140F1E5475683A3EDADB2593CFDCEB8C35244CFB12C7C470
A6EA0BE72B436EAD0027A97B43A15CB4060CA0025FB662B3FC42A68CC2B34954B78AD74DC75101657B005585FD8AEB3BC6FC02DF313A4C21458B91998642D7590CEA3F10C157872C94F237D2F327A16BF4DCB129B615DD8AD0CD9526917F417A5D8AB79B7039BBAEE9CE52AB87828FEB6BE6E06EF4E3A5C57E9E127D515CCCC929363DAC8F6411487FEBB985FDAE95C80BF603656CB4C085A5C4E9197A0E0896B33FEE925288274EB6009C3C569AE8F02DB01191E352CD18233C116535590C57912484D400A73FD365
A77F97EE4DFD6779C3495C1E4C9B678D60228E8A4302994F3DAE536C5625C70983FB4D056E35E33FD1716CE241F0F9F4FC0BBC9B4AF17FE8006DA2299173716A3A9D3C3514C43537D6B0493BA3EBCD9B57A3F9EF1A0035326BFA0B1A215695B4BA49756B574C38A8FDD055486D9CE9C3E59893433AF81BF6AA071D0BA1E032C15B3245BA3326803BFAFD479269E7E4389100A693B811655FC10915B963E03C90AD014035FB5C63451C169E690444B6E3C97E892F0D81AB83AE48DF1049ACB21AF565C08EC4B144F430A1D0AD5C1AE9F6C935E57227C463F6B5AAFEE1CA4C4DAFE2C266CF219AFA06A475E74FCC
28CCAB9A90F1E72C2DE26DFE5AAFCC5185583C9AEB9B1898092CEB06E5582ADFD9D42FEBD74B2D75B65112E3E37026F442218341998CB17436D14A1A2C02E22B6973846A38EAFBE0B50B1FFF3F40EDC961334A12E11C83EB33BF58BDF1299A60C650D3E590AC0DC851D905D6AFB5D8A7E74E365CC9D328EA294F4CC19E84E53BD0451E51F33ADA594334BEA9C55BA0DAA895D6C55D28562AE4BB76B0AF81D83F298B6B15350DB3D9A85D9F6BD1D3EB4E045D6661879B8B92DE61A6B6ED8661EBB78972C72681E3C053
B7EC8E913DBF798D53B2EEA5BB75988DF186AD7D7248ABC787D4C537724DC4AC048EB62F4F9BB81383E2FE989E28616296A2715CD67B519AED7B7B28908847E1D30AF48592D48342B38AC4F7A31C729F16F999460B8246438EE463AACBCF13D051353E48EA15A7B6A8A2991CCDAA79A3FDD3451BD0B1D4AF7196EB194FF6AE556C9B4AAB9181F765F002F0F568399EAB50B1BE9F5B8995281F930B76CC694905857A5700B6BC796AF520E99285194C37D29A1D91A0AF4B0FF0154B99BC695F83296D38B6ABB181DAF0
830BFD9108275700C80E8EA1EB35A03AB1E21AA6E3CB0BC807383BB808AEC24679AFD70FE1EA2D156D3061151C2BFB2CB3389B1D33F618E9281B8713D9276D4074F160C8032DE6A3E4F993DDE35CF9712C9E37D70EB627D12F138157455DA64FDB1D55D2FB38E10FA79C73F06200C89954E2892AF366E81568FB658318CFF84035B6C05EDEF255A895119D89CD6D51D91D5B6C282CD35B292FF4D3951A57F51F88C78C0ED0DBD2E0AF07445A61D0E22AE7972C73EC5F35D0C5155D91926559F3B063BCD3812FCF3268
12CD9BBA3BA5274878E3272150256E20D1EE6B302381075B0F55D2AC9D0B9747D2B567A4CD79736924F9900F11E7D61F65DD72AD79F6F62F701406238CB5775AE673897A01343E085372F24B23C1E68E5A2827FAF0D2C13A414A92DF0FDAEE27816F4F588D3FA2B4FC26D1B9103E0E9E2AE6DC17A78EB7E678F88066CE372C3FA0E977BBD664F90A31FB1806AF8A6F47B29F65B9874ECB6C530F9583FED8DED4AB631FFB41CB3B4940EC541FAFC58E6514A6D2B5DFCDDAC4388B18910959BEEE17F12BC0081F2CB764
0C493F33F16BE4E11CA9CB893B87177883ED59E90C14DFDBC7F10924F70A607D1E26B62150195CAB9CF063AA07AEF939EB6B4C33E2A8CA1B846B8182E7EA0DE1ED5D55A4127FC18E2FD5E659EB300FE522ED1A0140DD8BED7A9B831790B900C5F01A4F618DD83544949884A4339D833D0E683FA2EC561E8A06364D588F542EDB94BB95102E06DD2FFB674BC2DBED048A4062B08C8A9C2DEF91B0AF0E1FB9D952718A48B4621932103B8269A109AAF305E81288CE80C7CC5977C56A2DEB505CCBE8F7222E83B79039E4
C0156328F45036931DE9C02D0A33B4CE54FE2E9461596EDBEF4730546365479E28D27C6D127389A7BF39D64A394CB70388423F9FD85633101F4E26DCCE9339F3DD96A6BE15BFA88317017E29DD5BCF352BCD3B77A55E5CD28F8F494A965987F64BD27A1010100D84D48AE3D040CA19F999578B809295E755110558AF6B8BED5FB384B7D02578FA09FC86638C100EDACA98851516BA6FA18CE1FAF5986C43E73402058BBCEF63E58C91C72CE459ADD0F01B7BA1FC44B3B02CF5E3DFFF9E8BA774EB26B2AC4253840461
3A52653B6F24B9EC48DE4A9B6BD02046E93FBE2ECF5E6833EAC8CF52732D0501D28B9D82D783A8DA17E314FB9FF420BD21D0A4F0E9CCB7D8E95E7328451A4DCF5445FC27918333F173B74D09F0A1B8E729F09FC4296374F158D42C745363E4F38F4FACBE60A000BBAC3730AA9C2B2C3EDC94A501448CEB2588D4434FE82D9AC1C26BECA20E763E03FD1B1C91DA1D2D3560F214DB41F11DD5C45AF82AE399C6C1AB26D2753737E4588D9AF364B5B215886E91A528DDEC691AE772271572C6593C36E2881FC44B57E705
2D5EE9B2ECEDA952F0B9B6BFE7291B29C6505622E3896F01DE8F284057F7CBB3966D11CC42034C533EB95E04AB6736A1E681513AC2546F05FE6226CA91D80BEFB3F1E15BEF766DED221EB3F1616CDDA8C16E543AEF924B2D94028ECF116C7AEB28D0AD14B2EDC4244F51BCA6F545F17A53B5AA4A46BCFD7534FD00BB64EAE03CE208BF795483C12B942D28F34986A34B8B20F38F4AE5915AC30976544C111AE7CB53343027A0466EDB37724FC000FD0CD3A7BCBE5C5458B0D6988D508717BF5B55A40E76346B14378D
844010A42933E483E880335476383ACEE958E30669BD8002C23269C656ACBC8AFFD68819BAC9B0F84833F630317C83D1F672606CA6CFA6CBBE7AB5478D7DB094A0D9B6AF5C4CF315B8DB20C2D776F3CFB6814963C30575D64CE2BABF71A8FEA4D6364F90E2C94CCD4667EB93D2654145DD280A26ADD0B10AEB58B19C59247012BD75C0A01FD2F1B317EF6890C6D3E878E546497DB0CA2DE1F66D3CC4BB2514A6B768B32373C7F926435F36341942C841F55121E118C9134D2437142461DCD9D1FD67FC930A7D12E63B
D75F5A6C949B4196F3B0D2868C6B4125E1AF164882CC3891C5B209EB997FCA2FA7EAC25973F69573AECAB4B7E83A9A8DA5FF567E9725E1894C463BC046F511CFC6D7122708D78E8AFCF8C34F1889A6613FAAC1A86412E3B2C1B7BFC4E36F51A1BBA56EA365B94711F89577FA50EF0339E908C244D1652D3B54CAD43CD058E5FA8D6364EB32C5B777DE2EC0D749FA2CB7B04717C52F6BFE4B0FA3625EC5290242F7DC15A5FCEF1914189F310AB5CF3DD36F4B4567803DA3839488E4C82A58ADA6B82E91EE0438BC517154A1B8A40D50EA599CDD7621D84DE7AC745141397A27EEEDD8EF4DE12D3C4BCC9293B16F
455699F18BB1CCEE38F5EDFB1D13521FA694051A8ADCF0FF58E05D2EC671BD7FCAE9B0B7F6B86EAA7DD7BE5FD6C3DCAD676947BA83285DCC82227445C2269CBE15F292FDC9C5F885EDBE4053C4BFBA9573DB2E4E99AA968B56BAEEFC0F0DB62889FDB7877928DB339742F18E780D891D4451A7DDA3E0078CF9CA130ABDE67F83E730CE9BBF8E1E24E84057D335807B1572193877E070E2F3C4DA534A169249B26631B32DBCD948D7F91C184142BADA6D3A20411C2670C8100433A5544D328512806768567455787439
F598CEDF88DC3B4CFAE57472810120E2CCC22327150E597BBC53B75A9202E881E7AD5CF17CF671723A1269F10EAFC71998AB2251EDD646C80F7D6219F73F89AB655A19EC58082184C6975877398A2313D9468844CD76D29790E1CB90324A08BD8A3FBBF2E607399FAB91B961704EF2D53A4B33A754B71D25A67438DFD4B6622FA2B6CB556C341C46EB2FDF1A208F8CA4C98D72457EE6BD82EB7B038292EA333872621C94FD6101263ED7E53BCF8AAEFF60AB839769C2A2DA5339A3B4C3EB68D7CAF457F44BC09FA0A7
51EEBB159E7E31444E3B86FFCFF1B5A6BD774578665E20C44C271D1863983C14F8584781ADBD7683887B379D7841527C7459D830D483DB27BFB3399F6F377C290EB6E16AD5554B4655EF8CCAB648B93CEAAA54A196CF135EE6ABB579CF77A6967C2729C65DBF301A67A2AF61EA3BABD868C049C7C0697706869604E9EE747B1750DE7AB674EDE7BE5AFA193FF3CCE03E33EBB56C96A93A6B2D64B47FA89BE06EB21EC044731B6CB581E75136ECC793DA31EC7591467B82B9837200D71E76265035291A7632CFA10238
156B0A1B26FDA7FEC9CCF4B0504055BEA5BE236D0A53C23A91E37512162760CBD27CA920340FECEC0B2FAFBFBD63F57FBFA20B402E937AF88023D4F5D1D61EFE35139BA2B13D6FE02AF07ACE07F868C544D8787CAB70891ADF26DC0D7AC5B69DC9EB59F645458C620B22937E7D7B8A2537E8AF1A0E486AD81A7D56D6A0B912A272AB53408AE11AA51EA2C515970F99A01A664CE4912A3B1D5C34DB6EAB7A3D176A595942A4E9B93483A57815F38D6104A8BFDAA3A0976EEF38F0DB66E1C75C3EA12598DEF8C76037B3
2E8C4FC3331A697487C3F74CCC0D83E251F0FC8645B17F9D3B2CCC28678FD368E9D1801C6B3737B589B6FBFA134F2F74A6C182E6AFB60F54B588A7FB2F0A57670F973A1A6305E563A9A7B7145CFC7E09FC251379A35230455095AB218D5654D9802A3190213F6BBC127DCACBB2BFE73B7F19D5760CDFA74F9FA017B7BEEE8E4884AC6491E6CA0B09215FBCA2288AC94E872E6324EC2F2DB97775101DA3356591B139A11566A9F09B7E8563A542E5221DA96256A824E02328AF4C0972B2CC143B580A29823B24ECF415
92A4FB3A71AAF04016A655417560CF5F687F46C1541A7DED9E51DED7CA741FEBD6CDA580F8A66FA214C40CBA01FF0CF0648DD8D4BBD80A70848D545B1E3786F0819C0EC3B825790280158E75B71EA96A370635676184F95BC9CA7C706229359E90EC4E7900329F963920C6AD979D4B00181D73939D9803CD246CD5AAAC0853E2482DA1AFB376D1E3E319B95ED85E8B660DD923A4241947CB44A4D5ADA81D3C888FBFAAB46FA3E71E5CE4117211AB0E228E0BF285C03A5216361B2786CDB2682F87449FB164B4736C6C
88085B1822F246C8387A35DF5310800AC3BB57C4A999FFB3BB2839C1DCBE8EF74220614D771009BEB0637D76CFDB95D0D925CF78C3DD37D9D78F11E29995B09F96C5B09BEA44DF68E9F93E20D151463BBA2C27E38C27FD2C6F07B5658EEC2E79B906185A16F657517FCFBF32EBB65D394774C64065502DAD2837370DD34DA1416D134F5F807EBDDF726AAA59C5CE746EBD4A1975839CDC7AC1BE9E6B08C140C18E74AE0E27E6D8CE627FF6A0FE6CA02E0518F604CD5C3F77E04644FAF1408D354EBD6AB284054B2D21
F8CB3E7B3DE8AFED7B5A8126C7B4E4C6B0DA679D1242856AF7E9FE4B304E709C535531BB6D383498ECCDCA6520038E8877F893498D10F5DDC700DFA1BFDD76FBC9A915F9375C71FBBE1756964805E627571A1015CF784852FDFC555F4F41DE235D5BA6321D0A47BBF39CC15F564B997ED3CB50C5CCF9C9808264339FB8FB642D94D8E97C21A6ED2785310ED5314BA30DCB05561E694729EBC4772B4CDFCD19886C8AD2B6DFAD993A5848796C41BBF3D9D77CDFF7BA01AE0DD2CF35EC28CAFF0D7FEB2025A83D3B73A8
8927AFC9CB8274A7A24C3E22955F150F60FDA4874B5B4A2FD11082E4104048EC885E6D600D3D6A4DC04C7E6EFDCBFB3D27DD1BB6A2205E83941482A753841920230F42C992CD4494E77A3E0CCB802C85A46D00B862CE6E6D2E2A3D8EB331B4B540A44A5EA727B78C5432FBAF6D3455BAEFD799DC16C479455477B0BDDB28444C6BADAD84D05F5B8C52F8F0A2080805B05BF89A85FAF92DB1B06C5DCE554210780794679E43CF47DDFE1454C893003B1F5047C73535F13734F03EB1999E2E4248F4BE1F6164F5A92066
0DC748E10388452BFAFD1A6FA67C7C412FE9A8196F3180558F6F28FBD17FDC338308833E38ADA96704E985CE5FF5EDD471A5453DBBD8B64789C33CD449CAA2D80897E6DA4155D8883C85285D33B9053DF89AAB39E468483B81CCF71A3F47E31ED54ED57CEF476605F0751F9B2E4FBDD116B17B3467744C99A2D4545BF330B2CD6410DF58BAD06D7554D17B2353AD20F086F18260B034A4F4A8D6047E7BA9617BA79E54EE1085C71E7A6EB4614978A75BD4C8AA7E9663F1404D82322225564662762F51E72EC0AAB5BDA24ABD0A79B6D276A6E2DA6137E3219DB9BB628D988BBC7B0F8C4E706C4798A680DB5774
CE2A6B38D486039EA7DA696DE9B8559C4C207DE431CCAC62753826C5EA9673EC33E48856090D177CDB96611319DDFD71F8C808BD39EF9F3B342CFE28FEC2B0D4CB633CF287254DC04BB9B9988BAF7D3B2F198697257AB2BB6211401CA5486E02F432DE0C74E69282035C41A1D931D3F75973F62CCB64792DC7FB6C2480E6775358BB1322D38FD0106E98B7010A9036629E7316844D91D9DB99D63D46B072CC9EBB54456BCBC0798398405DDF105A637F650DD0F69C1A4E9FB5F62D0376B41D823E0274D172EC8EFE3A
305CA7FA762C0E39589300D4FEB116E512C4BB4B39D1375CA087750EC2C47AC46F3CAFD235FD8D039FAA247681F46694FCFBBFBB02C85F75805E6921F811F9126BB7F0E22C8F99024ECAAAF15ECA196DB048C1D55D4B1A9C1A7660A4A0DB98420B11CEEA646921E4D5356D8B43514B4432ABFE21E4FC49331233BB01823DB799B8A875D385047B52888293D00CD92C35B2CF94E50B1E898AB9A7EDEDEC373C60AD8819F4A6CAA9E58EE54C85E6EE982DF58D84750CA0D85CF077F4E8A674ECE80DEEAC11D7CDE9BE99
7F9A62F536BB42682D7FEA1BB01B3640DB7EE544DC50F3B187061F189C93A22F65A1D043CD885F3DDC6E1BB0DFAF6DBF11C96F511F07D0F6D73C30B0D665F8C10ABFC83409D1BA4827EF4E032C99C8E1BB788602254D094BAB516E7B2E0215FAADB178080D8DF9D7D85CCCEA8892951323BD851A74D35B7FF2411A136BBFCAD1E02017581D35E21A2F34DC8D89CD1B01317E473628114773C242AF855F09A42F7C9B89C0DEB7BBC89F61CE122D1D0054FD9E1D5454424F5BE4A0BA56549DC37D9707BC1E91053C5CF8
54B14C9DAE00E5978E323039EC436AB1A28DC19DA4E89AE6D541F8F7E23C1B6AEBC1B0DD7C0EE0E126BC9851F90054984C6681D7FBE9B884F69B2CD405F12C8D17ED704235076DE0145B64EB22AC6DA8C91D8D16B49E815933459151FD45D81002FC1038DAF37CAC4883A3BAFEE6A4FF6486C32CC133BB9B730F82ECBF4C6D90BB94BBBAC6726B466CF89748490913D79ED9EA50AE2AA2804B7DE557DD3C3A8DF621413D545BFA6840E729B4C4FE1A41607377FA25DF16479DD31949625C60535EB88C37046A52FDB3
EFCF131B42D71C722468DAB0C2C5C1E53B07CAA9C1E7430FD38D0879D070DC66B5161045215AE40C04D363AFC95E967143D25A32D9C8E7E320903E23366949196225FBFE478959A01ABFD1358BA3AF64709A4954F3F59DF8BAEDFAA3ACCA937E54C2FDE74FE7DD5212F3C25EA017472EA60361ADAD53609AC93806C102211766546FA72601D961A39B76235151E58821B9B08F2BD64541981CDB565E7A07614FBFCA282BAA37178D88FE56D577A49628C2163CD8229A546A9E930A11FED214DD40305EBB2DD6EE46B4
58B5D3F98F31CF4CB2A61CADD430EA6A7ED04F74689C02B535C47930C8042905A1166A20E51D660E460518E434C914DE2209B02D17FED73CF06C2DC9A6983CFD8C46FEC35B201EE148E06C8D2BD86C8075CB93C5CFEF2451AED595C5C39FE4F7ED2FB374B1ABEB0E4ADAB08C52DD6E9FFF9F1B49F0983CDC192C28065D9438360D842BEAEDDF3443220E5A467BB20FE3978A8046F08E051B3EFD528A0FB9BAE62879408A4F1DBAA4B887ED6D488073A6B442DE3D9802DCD3E10C98C6624EF65F93A4DD8CFAC16C9CD2
C0E9453A316EF00CBEB4952824C27E2A2814F52B472D60152C69E99139204800540556ECF6D91F560E1E449FA762C2449CF88AE839CDF18EB1F99CF59EC60202E9774CF89FF19259576572B2EAA55BBF319C7EDC2A2B9735BD31AEDFF6C41413555E4A45B6650A086359D07FD7A3A9BCA16A9CE326BA49646B1C88D8D9E944F25D1FBCC141F5DF69CA4E4B33D1DE2A1ECF04D409876DB20948436C27CC47AC811FFA18AD45ED02634F783E792DE6598CBFD41C26187162BD6AEFF4B6762AE6ACCB03C152892DC880DA
B85BB0BA6B16FEE80174E184AB3E2107809CAD7F97140F70830221C55775AE10472481C1F0AB356091F9FAB421176DBB4A1CCE69275F71F8014A5A92C036900B59816848E8D60AD23BC3C32101E51F9F3DF2E7196739BBB2275E2BBC3BFA5DF86B6C0BC110EF5C8051F5BF41A6B4E1C8BB6B37D3BFD183FB6BC24945360087BC426E00378F060FA6535239C99DF75F7F5BB63D76D4ABA22FBF94804A9DEE98C2B9B903848D99A80C7FF1E6EF0FC2A7E86A778DBF7E30779D5887409DCD7E1ED1CE09850C7FD0B1FD57
6D7159FDDC861A160BFBA1029D4C5FA3B3D20AF3CD1DBEAAB262538603049BCF129D6F408DC08D6B0E583793D7B8BF2FF0C84C78228B7324943080B6009DBFB3D7B5B8CAD0608D9C5C25A8889011B228B69FBD520F4F5B843127E4DDD970108EB64C7FEBE7757AA4D01BDC07A82466C9EF1A1CD583BA5E458CFD99CD848A720D5A494F6C673AF3E38B8B5E3BFB4265A90EAA6DB34566CAE94CC54CA88DEFD601E10A03AE12C3D249E64F8A48777A8F8944720CC073A2F7E566647AF429A057D02FA8F986D3AADE4195
29CF4BC09B6718715A0EC411FC33EE725960D0BE9970CEE6F0475EAF4C159F8734C0433DADA7DF39B0B55B89F822118AED63AA3418289D0F0CBAD2D6C8068770E40B411056508FE4D4B9FF900F8BB2F8760E6A10041AA0EAECDA752704BC7C2F3340925A96C55FAE2D8C4DD2C2D61C0B5765CC1ECA09D72326617A4597FC2E4A11038755ECA5FEEC914E98ED5B895DA69634DB2ED03FD23D21E63CB307E92B3FA550A6188ED3431085618D3A9821B26BCC25EA0FE716BDBDBAFCB652DDAD88AFDEF233035EABE1541AB6B40EA6079E5227F97F1D6C4CFE4CCEFF3C23A9F26D5AC2CB2212700C0BD9529D71502F
DB3E888D9AE0DB26E341E30051E90FFCDE2891DF6D8268C235626B6CE2C8309B566E5D8B338DCB57B76DE749B63A75E979D643874E192B763C429C90F2B69875EA3732FDCF94C4CF298835A801C470EB7A08EB963F6FD04DDF0D01046F9BF68D0E9B1E8637D4476DE9E82D0CB06B8CFB52868BC2068B6F1210A376C610A4CD5DB9C254F082AE2BDF8676D42A9AA8CD86D4F18D0FB3B5148C871819EF0CC0544A7531074B1FD1A9D06650B330C349B258FF97502648D2B3333750058CD276974ACED21D55D1E87564D0
FB09E970E363C6C419B466A7DDC3665CDEC0C25AD8B38FB39F88343F7D0D3A348E4E7839603CF895766218DF5C65C38246CA43E51B3097DBDA461D798FB988148A5681FEAC11748ED9DBED8D62E3DB68B12AB8AA27B9B76D122FF9D7A981B1A1E607CBEFC3C8647780BE39F54A31D73828E10D38291B06F10F3C6A986CE1B17D461B24BF1F3D1506C1FD77D1A3A2AB217BBF53488ACF77EEA94ED6CF3A7E3BD66F6A8AE4A0BDC71636A0C87FBEF12D8E255C955DDB9A4E5ECDBD2FD5494221A3741EC8A3E2C9663AAA
9761CA08E75C552C3D0F5F8B0536FD88FD0DD9FFB91F078E010A749848617F409C39C01CA1C62C83DF39C826E111CC80F3A1CDE87E377EA9E063137D10A9B7270AC56B6046F02D9DF646173025B59DEFA5D7F17EB329C59C7955F1CAD1477E66EC453C50A40592CC6EC031EC1A53FEFD3226F74DD848680A5E75F7F94A2621E1C01ADB91FA57CE005646946BE3B754510B2FEC7126B1C8AB7A8DEF2A1267368A2566A14497C00AB208A8B400BC7E592654E3D52947DE5AD9073A8ADC298BF6B7C0B4F0D204B97CC71D
9466B24455831F3785AE35A56B7D0AAA29ED2C9B2E0C0BF72FF0FC47DE8BAC0C3C68C87286B83C1DDB862E52C322395066694FBE742FCA971BC5F086885513263DF9CE5F76A7066D5957CC583EF4B85974A3756E06B403EA055B6DB42DAA6F49355747D220B07C81ED94DBE611205B355F48F9C325E167CDDBBFA4E57FB996A375B05FD9F5E39D417D031BB42D2D886D9D7864A3D4026672F7DA32BB9147B14B52829B3D031EF701B5A4393643322D776B0F89D7A53F364B6287448BAFF3A8F95C006FF5B15A438F80
5E59BB9DBAD6D17FB32005B50534C9159CE2F7D20520190BCC793A200F0D1403AC5C0D40C72263E2DFA586875875595363DE54E614A1D1E3FAB14E375DCBF6A26DFED8B957EBE32E11011AD20ABCFB430D4ACB56FE256F0A97F6E15CA3C79CEDEDD4FBEF2CDFB55C3F537751F185BEC558289A0C97240153DE7AE243994FF47964BC8CA0DFEF3E86E83DAC284323533927AF711C6B554A345ACBBDC0D9D23599DF03F42583A85777B27A40BB0C2C43729409766051085101C1F27D2579092A06C54A30292F5D9B4219
AE84CDBCB83A318A6D7917D5F51A1A16D27A6692A03022877E3E176220105BB01BC71CB86B2B46FEB9B9808475E55C6463412367A2B276F835E9E6F1959361934A9E0F494F6C4CFB172E2EB49B3337784EB1D8A849DC158CC22C567636FE8E314217DAE5D5C5F7E2E46D51B8B20311E34E30E8C1C1844B8726CA688DAA7AB2221DCF77C1441A4929DDF7B7FBD5216D398DBAFB72BD43C1AF30804864022625FB3CF394CA9E70E0777DF1F3BCE7407E54795CFA985DBA663C15B8B52105A9122C8498D523BE5B622DC2
72048AA0F5FF5217762825769B2D0A446D9890CBDA7E5757930152AB1674DF3742199D99D7C143A38704C8B4391937C244448ACB3F35F7D586E73079D16A7AD5A6F8EE26DD70DF5DFFE99F8D4371B7008CF56085BCD7A7FD1A4A6C422A1E2F62B3E200AC0BA00C3252D7E9D1585BDBED4C53533AAC92A30BD14613E144040F6B22DEB71F838586D790F7216F6AC17150E3F291DB32391B87FC2CFC7F440E8CE0E26D9E3CBF0D97F779628DCE889AB28EB800FA526D7F4507E2721C083162B78639EAC89A61BA201F58
A934E968E0DF174233BD76300EC080BB23B1DE9C75A51535EF255D7EC4F6AAC102F1713309CCCB96A661486B4EB100F7B5EBF4B1C80F3BADE4320655B857194B6BC7C8C0371182F26C68D7ED445B63802982B70C1E070F3941B814B8DC04658DD0B1830E51BBC264EB245FFAD8082874D19CCDEFDB376070BA979B61FC4C8FD8DC4A67FAC2A084F3581BCBC27D879B322587B333876824CFBC420041F2CD77CB3D66903E2F7299F82A6474F1E3763449C6272688484B6904EC6819549B062FDC220F32E84BF682FF99
068B1B160A773F00EE055E2604C73C9FF0A2B39E860E2B453335EDAD8F1B2077A43DD4CB4062A0125F05B1E37DEBCC0DB88A2A74BE5987743B2DEDC0E93076578B1FC2CD35886FA0C1EFA82BAABC1E0B218E95095B677A56D0CB55704596D168CEA05BB23321B788D3D7707E03CFEC7E6E9F40E0F8B9EF01129613DD4B271BC85F7AC67102A4599FE1CE408225E96521FC22CAF42EAD37B6AD01CD8B2B9DB78517C734E73858E824CC4C5CA67FFFE0E6AA1F2AC3C2986E641F1184D68CE18C6C32B20E45E2EDC4CC1E
0ADD7CC4D14CBA10B8E635429EF030F388562C60DECC60324E7D59BE10E326887FA51E1EF1B6265D92D456EF2AE94F954CF6C101EA9C3599C0A30CE72335E610B58F65DB0571F948233C7A90D9B6BD08025E46CC5372D03F38808D73B2F441626A04B777B3636C5B72DE0B9093D1CD30955E49677B98557663D53C01E2A5AC4222DEB2AF4C0DD9B919B89A8D7755BC01939E0475E51DED824AE971DCFB3C7235A53EFDFEBB8A816FB616D26A291F5FD3AD7C6ABDD08191881911400CE759D3857FE3A43C0F14E8FF3EE18782F77AF608A773FA26A342553367F8452B5351AFA1CF421C0B4B931FC6D49499AD2C
0E105E1CAFFC0429115DB7F95B3CA3FAF68A45C3BA6840D2BA3B1D9E26AF08019FE5D2A45A113B9CF7C0645310205ABDF5E952A4D84CDAA32F16CA7DC48A292933E71188A9190C5A677D57437827793B8528AE0F2456AA9E90D002B6D6A2251BBD9981ABCF8B58694CC81F21A194A9C0CC416228D3FF6D4C7E4F30B915536069E31BC2A4593177A64CFB1344156C06958900E28BC9289205094FF07F1234B9C00CBD2B9FD92CD7E544CD28EBE24F8EF907FD9F4DF1944AFCD0127C5A78D48AD560CE651DEB1FA58C5B
E3E2A8A6C96A55A2A27E9B7CD48BDC5E72D3647160C46F142443AA89EDE5F1D9D775A35E7C3A8597DCECB5EFB7A141E5BC86582579C5CA1C85B409EA6FCCC50F19AEAF1DD3D5AC69C18A5C83A1AAB1DBD2FB09D0C12A427B61C24150A275D3C2A03653B621C4F8D15201E94E8D5FDF29903DA5DC267851981B86279AD9F4F201C17C203D478E71ED35AFB26449A8932B68291B6A51B5504A99B52CCF32D66CB4A3DC8514C40EDC62E9AAB4070980B54F272F2179FD8615649C7B183C6E6AA1713820D614BB42049E0E
ED2805B100EE313D5E7795B47380AD653D4FBC50A75AE3D516AB7615A65E432CA0087F452CAA25282C614EC609349DFBA73F5F5FBEE503F0AC4ACAB79047F9A3AD9B4682D1A29CB272D95F5423F5ADC8F911AEDF18C381EA623EA6658B5D12EEE6D56F8DEB3337AF0A22C5FA463035615795B5410736CE4A135E6D98CDBA0CA5B55A84C0EDB0982C93359C5E9E28121090DEBAB0C907F370A578201DD7049F679889CE00C9952D73737586599E9ED2E998EF849DE95191E75D6B27FAFEFCE57B0389E526CDB9B24129
B8BF822AE7FF2EB52EB713A2E9C5B9D079C6B96A439D2D30DCA168811FEEF71181A15E08123E58901C09A98AF807D546B7E971B0ADEE6DAFADC23BA02A74FC9E41AF1B2C0B10F85A1F275E066A46D05D061D0088F5DDB32CA30362B357C8C519B790B2079371AF8FAB1C999A14E17A62069ED41DAD5BE625F9ADD81D7ED44ED44C7AA8129CC2E7468C62D78D94B95F33F3A1458824E9CEB2BBB081C8D00CF86674C60DF4B6A91EFEE0A5C6558455D790A666FCE498F4E7B3EA1B6635ACD75AFE1572E1FFD05356094B
0EDA630DC73A867D11DAA405E17A4263A8C9F3BD949D0D096D87E8FD4304E57C9A18BA4BD91350F9B85ED3D689FC2D6A023CE7A5D81EB0AF3C7FE5C688C0854682D181A9B887D799D24EB667B01B0ECB67E002E350AD2896EBC89413D853851E0DEB7FAA95F4B7899356F5A18D00F9E628F82D09D5856514B1F6B148AD40921A4AA0A59E2F44133AC023036F35933A94B73BF8FD2C7CECF8B67DC3D90D85B53E407C9C3A47B8A78FA8CB333D910ECCCD7E1FDD54452B3A3659E44269C60ED599DB3B50F51E3588F6BA
C6113574FC11FDFEA2326C16C5FB1663C12AED020DA19AB02ACD3FC7D59254A1044BEB015F77D79042EDD591DB965C6F471D4CDF7D33DC2034A6E5CECE6A5BAFF6F777945E65E90102545D24A9B236041459A8191EF49BB03A00FE7C37A966CDA592FAC5AF37A80F6F5592F7A0A667F0BBEF06193D78E3B45BAA15CFC8A57407F4D2EB73B9CEAAD4F63D84054F7EF3973A8382F084316153CB3BC7B79BB43D4681505DC6B766DCA09C1321821593E6D5AB500A4522398164294A4130CD6CEF3AB02DF0E07ECE2CC014
1FC3AB566752654F808C381A59A30FD918C5E78EEEEB2FA72BF4D59FF8BD382F536168164CAEE4F12462F7F407B4D232A79C26BB42AACFF7729F8CED258104276E64FD726D9D0FB37FA291D9D7C476CA489F81C2D18B047B1EB2AF11B46247CC4EB0C5D55AFD428E46AFB6DE3994301B75A4A92911542E45E66ACB2C894CBCF394C6FCCF3E3D9325B28E175FE21DCB389EDB9E05B73B37F58CBD9D65A2C2141EA423065FDF065269DA18958CA431E6F8B41F4DB38B7A2B597C33BCBD31B63B76B0EE2077E89DB6EF65
77F273F68236978C10F2BADCAA73DA35B125901DD2DA7F0D2C043A84C8A4659D47CD8B20A6D76DAC48CF6DA64F1C3929FC1A8D80C60624A33F656665AD62168CE70946DACB9AE28C4E9007978B524E7221175D30ED0090522D6C3D8430BA725DD62275DDE74D35010BDFD864D39F8D4E7F860F1D52801D231BDD5B7177BD8F7CBEED291711F5754A8E5E857D824F01C60BB12E6F1F39C9C2C6E168C757EFFAC36F20E564148B4CD3A2016919AC65511484B2F033A932F4597A4E582FCEBC8466A564FEF64E1E595EFA
E7BE023DEFEB70905667B87C4A68ECEDC2F6003C793ADA1D305B9DC6097AF0639F2DE9923CDE87960FD80E280D9C43DCE1D76DC80D4EECB1B7DED9117C95ADE2F9BAF2B9121708DA708F44AAAF56424F059B5BDCAB5D48801DEADC8A271C9F0952E26F169E8D33C997E666E8512A22596F27789EB32AD52B99AEB4FE6B92DC45881A1176F994C23803F846A5E4C2E9A2D7AEBA0CFEC021F6777C1A8B5C5B7F94AFA0244E9D79C2C77B7A6A0784188BF1CA648687BCB48E3F9E0BB2E52972A7D591624A4BC67AA31CCC
BCAE3EC591E0BF48EE534CEF63FDCC1E59578343F521218D843BA0EC10FA3D2D6FF61D28A174EBFC90D0D41E52D0064CB0B1DA0DC37DF6AF134C43D2C7FD6B4F0A2E14216CB10F3A9F65090E6F42B9586C3916952C7C8DD53F9B156052F9F8A7D2BEF940131CD3F7E668E0CD9D91DD649CFE3044325DC133818D4D27C5A0C193EBB0B2D31CCD9FA0C8F58DAF198C5C452E41327C8960449A4B0925E97E2E70E5167E139219FED436307B0E8104E2BAADCFBE995A1EFD60A90FCF3AFD9020BC442DC33F15235D55EF5A5690745020BAE2D40B951772610AD5F03CF8E0D66A75F85EAA9CFAA14AD071536E38203C
3ADEF1EB4ED81776CE0EA9A7F49909231B9DF769C364AB66179C18B36885B94215629AF962ED7464819A1262E70D80CDFE8C420BB4F09B5E81104E7D0396AC45913480AC72D0099C99EA75A2C3C85DE83EE855C8D129227E3D109A3322A46F407A6849B02D58EF1D4C1DE80C09FDAE269793D65745740A2F51DD778162E55B85306D261EC64C4CCCF13C6B7D5D638D2788843E105265614EACC9B2CB9F38ADBE83114D8E6D97B2A43BE6A9D19473836179A5B3888715CF59BAD6C1FE3AA2BBBD2D442BBCB3AEFF5ADA
223D97904C1A2F4E8051784756DBF8D4FAA318ABC43E5A7BC73D4392DEC8CBF0B859A26C11851782F44385BE635050BA2C930836E311294F3791D68A89915C421A973766BF3D136B6E054D4F9B7B68856FAB79428A2E41B504781B738603896B954411698999AC2BB4667772ED68D25C25BCCEED6740786642F5B7FB21C85F94939523DF4796BCC58DADD557E227E96A13B79553A9AC9693D9145B8238034AB674074A8D547E8A803500B77854C2967216A665058EF0AFCD392485925C82E13E63C2F813813B402B8B
36645A68B4BF41E79BF63E70FA85BAFD80CE4C68A03A2D314023267A5A94AF981378C7AAF0E6BC81A2594FA73E6FC4CDF4692D61F8210C94CD8BFB322D687469AEE90A020A0EE50593459AB4833A37B6229CC65013FCA4B1CB2FC6511CA88657A0F4F556195BEFC8F92830586AFB5086B4ABC80EB134511BD950DC39D3F8FA4C57329052DF2344C682DE1F7A39ECAE17A26A4C913924146AD6B0D651359AFB66EBF3999E328DD9043D86BD8D75C71F312CCCD8E127005E67288D88769F9C5476D47F7039E3D5D61937
B0A5BA18CCD5FED4662110C03CE2DB82CC883D711C9159502FD8A63A1302D52875BF86E863BF19612BAC8F4772FBE7F2E6532FCE326035FA468A4CDCA60E7FA4A4FDFA7444C7F66C8F88ED447B48600AAE1961A0008ED891696FF680C2A0E8042393058E66CF84F1D8D4C9CAA97FE2A6654A128B1FFAAF635CACF028034CD03D78C9A6BEF762EEE12722F9704EBD40A0CE9CB5C05BD487B06647B063FAB3E169F1B94600A430B653BDAF8BD380E2231302DBCA9BC833F2279C45D1A7AB9A9D816F389A69B88C351300
32D74784A61FDBEA797EF726B953684706E4CACAD95268CE8008353F6471A9F590126AFC94CDF1E71C48C00FBB4FD461F3535A400FEADDDC8B4892A713A63CB5EA345B1BAE0C5C6C97043A5EADC4AF97FC24BA737163D0CC77BDA29263CBE927DFE429790167DB486B1A4D9FBFE6DD773809A582088FC6B1E654E24F3EC21436F5BB72B77A35EF79E3D652918B4CB1E79697757FD923BE1E311BDE7F40BB4A21FF99FB1654EDF178D3BB7D82CD382BB0B893BCB466F52B7684B2AFF474861D247187D47AF9DE983A4E
E9FFD59718D04E2C635C49D5A65A1AC2AF26BA2A253F9730CE782817F9C640BA0FF10633745FCCD20809766CD7521ADBF723F81FA71601ACFFEBEEFDDBC6585A52E222D074652C06F3D4D1989664366357360ED8579574D53519F4AE08A5C050D088E652D5959F1595A89DED88E39FEE3B80A9E8B0BBB909A6589BE5681D87247F0BFACE386A1E24B08E24B9303ED5EAEA0B246194C8E6F6A33A923BD86DE9640ACE54660150896496977CDC31253B9DB9A4447AE1BCB825F237A66E2558534C363D806055D21A5C6A
F6D18CBED1DF443680BF63F59F7593513862D1FAC75D4A7FA582FA093C668408FDBE8CC685B8707CB5A30008A8B8B74A3F243181EE50C7E51B45BE226274042B8AA91953DB0942E45CEF4DA14C23ADC7B2FF1F522D8FCA996F5ABD3A7F605E710AE6861D60DD8437A44F8A678241BCEC27564A3F4D49C5650E688E4567B6830E42FD41AD8A7E210E494EC315E435C62FBEB036B074004B53010B2D7D65767FD5049FD284786B8FB22F4DFD369BF835EB3F25DEED2C019B9B77548965E4A0A74B85296A8530229E129F
0E8DA2F915DBAE92AFDFA60AE567EE8E3882888572D3C2035758F82A318827477F6D146C5FE0B82F52665DF9B5FA77ABB50C4F1BC22CD09B351EC0E911FD34E848A814EC545804E9B5748C3D9D2F96B6FDA76FEF243DA83EAE0CDB9CC172656CE16FABD0CBF15303D0EDB005E470B5D3D509AECC84B2F222B11F8D7F68D136C620BF0E4B66461C150356A256077CD4572ABC6DABF43FF278175E453EC7E4474FF8D2FA56C774DD9DF4EEF284233A0344BE5C4567CCF4742B021E923B776B771556C7A42A937DBF7F93
587C4FD718C5F371DFBF81797089846C3F5689B2C7A16765615995EE208C47F3E54720F73BC499BCA69CD5763DCAABD517A90F41F802494A7F2D8034A345F981DF7F9F796F99D92E6D3EEE56E5CD73B9E5D7B8A8B78475E4BA082D517806FD54DBBF7DE5C36F762D356F682BE18B107E661F21BD1F61BB895D9CDE97954FB8A586983B1AA4C07BB906D577026E8055F307E11425A42E29F4BCB904108FCEB49C05E20083B82FD7E0883241E885BF35EAE4DF12AD95905477F627329379F850CB5366F875973059BDBB
1FCCB516442DAC47470FE2ADF32E007F4E473F5EB2E741146668FA6DD8B100DB37A30ABF266455C99850111981E90B4E39E66A7D4C27C12F966712EA5421F2DCFF96F8D7CDE1A22ACC82FF3A2EED376F6174AFCAF13384D9065B36297E62273C3C6D20B40DA34A428618185B1337EC4E534936438D94929A08D73B3904E4D5B4807E84EF053E5E866DC6EF6B1C010D4A6652E5C93046B2959085D21D56B3AF8CE73573EA8A45C3BBD11C7312BFC46AD5FEAA0B49730C8F1C2DD243AB41AF48B5F8D10000AFE538A3BC41130C9A639D0FD166E94E0276C8A20AE1C1FD22EDA25004507F80097D190302B5913B25
BD7236A3B2FD08FB2D169501FB1C30F2D356283AF14F78CC01B5EDA873D01A4E0E072B73C15B5DAB6EC5417A9FDBA5AAA1CF0924E621D3F92A4CB2480DC896B595FCE46F507947F83BE4FA0D08B3A04E3B368C91D6C53C4CA2D9FBAF2DDAC62A3E0382D55B211D89DBFB2B7D0B1D7AEFD8A36624F6A730EB62F593C38C08AFEBAF658B6C044CE208C804D90B8363EA7B26CEDDF4F41A93C40577E67E30C013BF2781F546683B35B3A39AB34D0DE913C0C4075E607B6AC0BB567DE97D3A22E99E05E7C95E1730351D74
413D06B0776DD3E125B8001078DBCAD8CB9911940E1DD82B306C5E2CA64495938DA6C35D7A936877406A6940E762F81AF6FACAD54C426D3F37A6799C250FBB59BFF75689DA3E851A60A118911B0F70ECD21940E0E15B83EC0EFD4D4A212978DCC15A7E28DC97C7A987E2812AE9557E3A20D45FBA7BBC5E8F926DCD7EBE0729D78B2F1FABC7561F1E02625F9319305350211BC2416C6EFD9A1E08B258E1F01A5390481A9C5EAACCABDF9A018FE37FAA6B5F7E914E45CD75ADF8D181EB5D8110687BDA0EA07F6C61B221
212C2266768D41BE9B12354AFED279700A8285FEA5DB6B8D6F9A5F4F9CB6A7A82CFB223B326335006794EFFE6B629518E62F2762A18EE07ABF0A5668DC177E02396C9456337680F471923C6241C2603A32F754DA47E5091E8D070A2E99B1D947251BE57A6A3D57827601CA321B262A66756D53321D5DE786FA16E59C546459CEEAA50DCA3177AA16B75B199E494655EED19F2DC220FD378A99109F4F870793CA4F7E351DCD1E886C1156B03A151FCC8DF8BB1D82612041330FCD15A64C3E0749DCB091B667B38DD60C
ABA58C20449350DF3D3DD1E3475E6194D2F5EEE14D93BDEFBB799B9356CCDA0BC09113D9FCD1CC7488185797810828CC61A22361FD8941C77BBA5DD2A5162B857AD4C9D1130FD9DF81789B2FC880C3D4EF171EABB3DE6FB7C152BB2C2A5B6396EE9D9ECE94DB97A56AECFDA7EEF18532E0606CBB4EA622E793CFD9D5D76ACEB687B25C790B7F60BF98E79C13144425C1FF6BFF0A59D86ACA7C99AF7166E10619F2F49AA142FF84AB3CB35F7B1BC31A458EFB06D68F54FF513AD84F9314366463A5E163D99D739D1FED
1BAD34E0922A3C723EB2CF3BAD48F7CA92F7552EAEC6C223E104EA8224BA313FC30B24D1702A7C45BC2615E224C76BC9BBF3465BD50304F5C62E9FC9589128032DC67DBDBB794D0A3DB51803F6482A30A64D632FB99AAB2875CD380E33890E55F0837B4A1A1645AA0786E2E55E3AE18FD3097B6E54A68202D0B77ABFEB852B7BD890A12AB397A2B8F2D9C331C1FE571938CC16F97ECED56AF5639C538102823A23FBA41D2487839085CB7F15CC609A501F212C05BD664E09256D564ED83D79E385EFEA4D44FD4B5993
A52A20D5E527A21FF5DB60572BD8BF072AF2BDCE436577CD95BCCBAB0B1C4901ED4584317458CE7EEDB0A2CF7E91E03D8F6D307965D298FF875683FA1D73E7BF27432C2CD1D736710F9040CBD9366AA57B2DA06FF9ED47F5EC9E19C6F8AF3DCF542EEEBA3643ABB58CF621431DCC9B6D103CA26FF81E911F0DE5084D8050BF7D3488844EDD0843D5F78424FB7067C71C26B7FA68ACCCE1520CCDF690CCE04037FA5ECCA19AD8599441319DBEB44AC37887A7071B169A2C0C0D376B5FB8274A04EE3BF9D01F70876178
FDF84A03D25232EF49E976ACD142821674DD60CA98B37A7EB198DC70468F8D439AAC9B625892CDE41ADF4786B44E386028282A5B0FA3F62244FF45C0E99374DC2C368E8F6673C37C8DAED271B86B2102945AB892DE482C8EB7C8BCA89D4F6DEADE5A573AD3EA01EE3E415083E00773EACC5E41139CEE35B90F03B13038A6BCABFB2950CD7AC6A1FD97737B9323BC9CC7FEEF8938525BBAA4A94DAB0BB09FA114380D66834D5F579B0F195530ED5BA74EC6D8B4D198B16565AFDE62B63EE7FBFB0DF12546555B74695B
0B7C9999BB32334D6FF5D30A6F3498F9B019959D2628B5E2BE6FBC5244E8BD1922DB6831806F137DAA523D27520B14ACEE373D15D831472249C99CCF50A82EBEEB210C53502283FF85921D2B9657E2997670A29440CE9C29C7F444FC12560B07A3B8694873B244B0BFA2877041868EA9CDC1DEA5F0D1D258D5FBA5B9252A846D21139F43EAF84E254274D0135E20CF5A9C7349FA99241D924F64446C6F6D8AA11F48A4A80B01B4FED7345D0DAEA4DDF06A0AEED12F82AEF7D5BCE06F86FB2067E268AF4EEE59E8A399
420185B918B82930D50AC589CFAE8DFC0E96AD2159B49C1CB2BC7BBED6CD492886FDB358014E796CF9913A1E538FDCCC205074F6E8D143FDB6F18D0BDDE8A25AC76B681A25BEEF2373A7EEF100D464DD876D6822832A5E271C2958424495139D70457EEA86B3B7FE1241562FC2AC799A2EB514D7F2803CD799AF636C87CD1741005EDFD2D191C4EAA4F39C25EF18908AD63ACEF5EB4B7A05A0DBD51259387479ECA9342C6B0BBECD761F85B833BBD633B75571AAE50D5ACC2978A0FA438F6870114693ED64CAF3069F
23490D3D4462D71B568698C45192362C7D9F80A40EAC473981C14BF49C697177D4556D71BF96E1649F062ECDB46A4A4640839711E80890654BF80041603DAA3B50AD486EA5E5F6310F6B1AF87726AC58A2FD445E33741C4F61242EAA9B23551310D2C3DEBDEA33434BC56E84F607228B4366850908D62774C986763E8673B111B7B16C36D3A97910BAA55909585849524EB062A76439A260B4575FCBBC912EA778F71B116865D390B96928B44E6C2FFF506B0D69B9D946C9A20947BC70A86FEE1064AD43E59F98BA200AC98D784D6B19DD3983AA40D1EFD73C5FC37B5BEB3E447CBB4454A8FDE3A51A9004082F
5D3755CE6E124C9FA9013EBE352FD85B67B25587D073748FACE60DB6E8DF84D68FA1546F6F2FC2883773637FD1192FF3B3C3115E65352F43A34BCD84E8A0E007D7A0E2E603C4C9835E75F4179FBA001393D9F365FC2D37CD3F9425B512EA89F1E6AEC01BDEBDB2A9ECFEBE8DFE7618C5FFEACC6F01E4BBB699A30A72CB473FE3B6C3411130FBA66D7B726F3280C0AF99AC43DB65F1D226F14192784488A9071CA54CB9C2D2D5FC8B1AE09006D94C98112CF6EE672FA829C09F3F047307C240C1D0055D492FA79C6062
6D15736C32D89FB4D70218A58F5A9881E8943745E999655F80D523C4FF86721812A0E7D2217F99F11915F6AFB2DB8143ED79CDD1C1EBD1B8B277F972B1901DE7CFF8F53ADB8FB4EB513CF7D316D7B13F2EC259389FD28BD3D5C483984E89750A37E33A09D25D4A38B72797080CA76CD2415BA3E053C39028C33208E9E687C81BA08F4D3313324357246C7B2298DCE0C7C74F316A38C07D3D4AAE97EDF0D4E4ED1A21B051C2E9BD63974AFB5CE04D7A46089CA66AC2F8EFA8ED860A87C6B58501C5A35690F91484B614
256C78EA7ADB79DAFA1ADAE26DC662CDA2BB9D87F36773643564CCDD57B1DBB9EA78EB08891831A2C06B6D6969AEBE08A8C3978D8D712FC85A88AC2A9E34DBA7796EFF29E5AEF526B18514E97326AC9B76574CCBB5FCA07FDE59DADF80A58811468ECEA9DA54ACDF9611CF60A0431AD1370F2B9328AEC0BD98D332036BF3F5EB0AA48843A24D5BFD416C2AD99D5F76870F875AB8929025F52ECB9A37695A255E47ED04A366C1B57189C64C4F65FE790651CF45A8D3841FBB999FF232D912137B5BF432FC66920A2B4E
3F9825A129520606D8895BA53C6DAA5294C54DE389463D4C92DB5913C614A37A7188C092CCA8BA5DA79607A2BE61422E2085BE351968E4F1C9A8633F6CCB84A66EEB5C29D715D53CFAAD822F7F9075EC5F051827A8E656AF16ED87031DD8A59AA3206C4F8B3DA804452146798F65A64AA6AE6D92AEB86646DB783D6F864ADF1D2229484A95840906E3AD448D037B15A4A96A4605BBF9EB610A716C40373AC25E8914F25295CFAA4DB915D6694B8D3D31DB03FF272BFD4C4A5FE4B1ACF9B8670D0C8D9882033B6962AA
E979D847F5E7B960189F23EF012C43EC8716D60C54A2BB4B5698ED3B4B02F1B0965A7ACC77510DD7580827BA2973869BEFE994743C5BB34361BF3F5D548BFA7318B1FC7630536E6199C88A784BA93D2A90D0A30C269CC4CADE4472C4EDA59E663E9F2968EEC3CFB5FB96BC73B2706D6FB6891D506BD321D9EAC4B54181539821195388794F62033644093D232AB55B7C1F5B6A219A05AEDDDB3105DB82458507B1CB0A302C48507AC596435893E3E64F77D5294548DE0D6987FC06525EC0633F5313573AFCD7B2EA5B
6619B8554CC80D5BB499AE7CEB44E70C5482B8A887C031045D6EF0A459D6B89377B78FD2AB6F05F1B352FB46E50917C2594935A12B366EBF9DAC99CEB1BE69A8ECA29DE0B1FE063B47DCFFE4608DA5FA62028B13DD9886E9683ECD6D2F0CD4F48340445167DB96776D94041CDD53B63C49D4EC9B40F3BB8F4B4109F82958EBF59BE85E2E5C658C111AB2ECECFA12FE494A00F8934FC3E0778C7961EE9E99CA7BA3B9C311A29065A583D85F44C8305FB14546E39715EE8F87A5E8BE4EAA83DF66A3A41DD86CF19BCBD4
48EED69A617356D8245DA0BD5E84AC3714161A809AE2A12259F69732CE4D253F71EDDF14E4BB6A8B9CA987250D318C5A233DFE5605F3671DEBE79B3650380197A240D1A846DA1BDA1E298701303FDC670F6A2BADA7E976C6E839EF31BD8F70A555A0BE2536010CFAA2B1F3229011712C951AC9DE63F7D65212FA4D82940117B4BE427C582434D3216B8C374E2151133C6F9139EE16871DC8752D6E2F89E2DFC19F2BDD4560503B9E92D78268AE4BDF6E122547B2B53D76658A4900EAC13EA318FC19473216D643DFCE
60C8F27021DB6CB9FC2C7DF47FB02A6AB324D24314C76803AE2FB9EB294310FF1881F685FB4CEE9640B01B236E4E6ED8A03D4365C60E740378601998E1995345B1999B207FEE58D041D497A703AB68E2FE52B6933AB94FA839F4936A6C35621473F21891A801DE9B028251655F46D12D0FEB4AC6B0831537585A8951AF2A6899B592C0BC289AED695BA03D4C203C4AE162B931C7AB124AE4B281ED80431FC923C9A9BD40FF6D4462A968AC01531DF98AFADEF01E0E75C4B4634A126E91BC8B690D0B7D31F32275BBFA
EA46015FAE3B2DA9933B42F5514E8B9133060660AC19FCDADAD24647B6482BBF27A18EF24FC6829BD1695293CD5BA73CD439FAE552A2A0EBCC7F8B9205A28B215275A96434199F6192EAF2E751C852AEB4DED5B83E8980C15E6CE3380BC5DF62123B8C6E7C619CAC2575F1DDEAC964528E374E981BB8982AB6EECA2CB326AC303EEB0153973FFAC5926FA72D4D482B04334E0F4F4A4BCDDFA4ACABEE105EB5A2FAE3B449BF8624BC2959C6FB3091A70E64619498B2C479EF751050B39AFCD4340364E7D14562DF6918
280D567B3CBC18DE65F690F83276FD3F0A706502F2B9EEA25ACE976133D81209D524EA8ACAD7E4F7381EB272A3986FA9D142BA764BF61797EDE8EE92728C4EBD6A070D2A2FDB8F98BA62DF7576982EC7A81888E4D198AE6AA5CB4DBC523F32C7D227117DE9CC91ECAF30C02EE0CD03123DA483933F26395E8490C0568183185FBB2D2DEFF336934E6F94C828FB49E160B57EBCFFA5B7CDE95E53303F3269B01BC91C865A7767F2B2DCF46C8A6D7EC139D6FF4A4C75E61AF48E1478DE5EE5B98EA8521993780BEE4FC5013A1E2902BA03FACAB137A2DCAC09CC639BD2F603E84501A76C03561D7D8469A3EA07A6
64D77D9EEEE137A5B167C1C5479EFD814A4076475A52A53E98E05C9A134407931EE8EC996B5B71B06D5E0DD33DD2697EAF09FE217F3717894476E5A8738CFB2A8DA2D2F5FE79FD28A221C9AE8435081C9176759D9B7333D07FFE6ACC56330BF66B8533A50870F26DD83DF4D9BEC4F21DF6407CFDFFF523FBF7E30AD5B2DF6C35A25D9276B2372EFE4A2C81F8671A4A2D5AF1233734F670290E8F6CA22BDF860A07E29393A13E4899BE84C07BFF63CE21F2E93D0FD8593D147B6645A02FA38CE81208F40DF367B679DB
021F4883D2C0CDB4CAF3FB034C4032CD91A4A40C537A6AFAED86335153A4BAAF96458A2ABEDF7833501BEB465229AF033FA1EC2C816AC5BD4F75722C9F360028C8A2F352F693100E95F9D003F404B52D122C1F4FD2C7906A70B0E76D821DC7BA5E0E399B5E7E0D9F24741F6EAAE1D136A7F45B90C9ABAE6B34909EBC41AD247E3E7AF801DA616A596EE07DDBC17CA474383B04E2296B78B1779B38A885284F1ECB468C166E04A771498B0A1A610550C6D740F53CBF642C8679768E34AB9728E0B6C1B340EF1F76ECC1
39892C4D25F0FFF227428C72E7AB3DC83652A0D0ED415C2B95919A367770BF80E58317B9DAEFBF694C57ED06440D0C4F47017BA76063278AC9FB966CF256C23C2C46DEB940660737CFA55D29EDBD50EF262F84D0BBD7F81FDF9FA4415C5BE8C232B961A16C145B6C76F74B6F84A2349F5149F29A54083920AD9E813788469795C15573DD2CBB598E6326AF704B470CE263BF719CA0D977B486AD1FC8933CE6FB518738B66E46F8C71D6961FCA4148D9DF90AABF95445D637E2D429EB7DC71AF3F0937EA64BD15AF028
67355521E27E57967EBDA19F198B1B5D50ACBBE35F04AA48B57211DBD47F035E6E64364B7E4C8D0C6936E23A032A082792B3EFE056D4D1C8DBF4FDA81843AE6BD75890D95EB8C24E0E274ED9BA411E6B724172D63E403335C3527707ED55416C8B074584108E4B48DC7AACA7B02B30AA0884B46B5D7ABEFCE2A380A172134A8F945F5005B886C1358BA38572B4A4A59FC4A036BE227321143F42C93F578D6B1B8F33574BE66D56E98D92583113FA2818715AB10B8888C9894BC4DE9EE552D9C976034BB0C4524B313C
55B2C2EC248FE163C982E9ED778C18FF0E085402A8060817BB582C4DC03E3F0D62314A000F62FF6A2E25913AC5010DA4D87F52CC6BFAE894CEBD18841F3602AC8CE134C82C8262478E652774C06C6C7092D72AF06B70C5C89D2E8C18EDFAA617BE052B9A5102B0320B929D70558398A68D2B2EC44482D0DAFAD094E9BD65872D9176EC411A86B7FB36BAE48C007C57800B6F73A431F208C09BD33A04E392C5C01D7593944156A27EE934F9BF9F588AE86491F6781E1DFE3A1434C9CAB0E80EB3D145278CB8B38F22EB
C303CDEE9FE4A0B636F86E7297F8FFDC0CA56B15D837751F685B638C9106A524C468AA9688C412CC23EA283A42C7D7ADCE054106DE516FC135076F1130EE5657029D755A77AFFF23A4313E4175E76FDD8729E77309B1D1A4263CCFDB1FDE95BF3062F4EDAFA24A28852CEF97C4B6ECCC1A35B2595313BB7C527BEF0765C957EC1F7712BA5463BD2A2FD283CE89DAB1FB6C2985986D2D23DB2140B897417F5F6EBA60395F9A40FF26439BDCCD786B6577E209D23C13CA36B5C1365BBFEAB5A5C5E1DE044651EBC583F1
F2099B849AFABB43E81832E0D33DDBD269AC10E2D18D7F65BC94EBC0C74B8523660E2C172DF6299F1AF036C10A99EC07F737C0C5DA109F66004A681F029D7AA8D09AF715936AC5DA6EB7F3FDDADDD65FF3DCFA910A614363BEAF5CF5D1EC90B668BEEBDD9C4802DD0856892358312089E3F347FC763B8BC44F2A075D7AF15C2CFD9CAF37776DD606DA74C4178E2FE5160B2C0713EDD1A9E6970444A1250BC7BBE3BFE25C08CF301C1E58BB98F391F1D6D841CAF5384C593BBF07F5C63D7D6A18E26E40AA98663DA520
34FAC33FBF406DFEEAC70FA12FCCC031C1EF618B665ACBFE3B58090E931612AA51E3406D73904C661D2C15067BE5B2C92B98192BF7ABF600C098F6D03CF2D180FB566AC304FA72591F94FD2A193F9D9747E2283990DBD944C907D7DD49BE55549B660216866101771621F66F4637F69DBD5754D2C64E7090A846A606576A19D6056F69F0D37537A6902736EB0507684DAAC73E5F962E2F0A4A299B3463E538A539B8452377F89ACF7E69465431E17D6B268AD25B4ED69A780E32100ED31BDA442F78136B25E3E29D74
7AE43965008C4E59327DAD3EBBA4AB1EF4817313885E358D710EB2E5F2E27D2E0A8F8726A38E6F1C049E140BB502504B7CFA1941C420182A046D30F2E71379371B88BEE7351E56DEDA60E0F195BE8D8D6FFCA5A97A8C783DA003CC477042A451F9C1832630100E4009A5AF0907DAB37FE832CEA75996F20C0DAED25ADB901C1C72E075907895BCBAA3A380F1E206509188EBB90110D4A9260C851610DA422A2D5B93B4DA5F4F1BAE4DC3B114ADC0932AE6341142ABAA44FC697B900CB5C521DDC2E699979C27AE5FDF
E98C5793D4A9C691B5BA8E8E9ECCFBF2E0AA8CF1CCE79C0593FE127A1EF99E4AD251E89985F591BA07E0E3337623A3E84F3DEFD71CB81CCEDAF65087FB22FAF0C9423054FF84F66F7E0C7A434240CD732551F19501CC0678FE929D920F3C1111129A4B4621E734029BAE5190990463416E2B0B7422C0281B0F80DF257376C3A40234117E927390409B01317E614E1A2F63431F6C29DE4BB16EE50E091803D8130F0A742547F78A12B15424E37A0150159FFC78021B77493AAE4F9468B844C9AC656481570B46B558AB78B83A7343C8839048148736D193C8B6CC472BA12B475237192289D26DAAC6658AE287B7
852FAE3D6795639A321108E98350D35874EE47027E9B5187C0B8333157E90E1C172A158FF0F2FAFFE445A62061DB02ADA34602C724E9DC1F17379E6612E09E62A91142A674D5DD7DFAEDE8BECA4B08471FB8D4D2614BACCFA206FD74279DFDFB588E24115684B203FB26AFC61D25A84694DB3A642D3E95E8D847C06ABE680E3FB5CBAE2FF52A6009C9EA7CF4C484E1DCC6B7CC58B934A42E7FAE50FA4784DAA4E3681C797C8A1062050C82339E73ADAAD02A695ACF1F9D0E5A132762DB2DB16D7119991CD80C6B76E9
0E1A4AA02C3C9EFDCA4B5BBE690ABE2AA5C466C10D828BB1D71AFEF53C68CDDC9A273BFD03E989175C71ED64BD45F421DB0A500E1A0A0AAF29A73419EBC6BB882C6A3DD5BF0CCBD3A74411E3A17FB1AD6EBFBD56A01EF25C7070CAD410BE2E7DBEE7D036C2380E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark{restore}if
%%EndFont
/f0_1/Times-Roman
:mre
/f0_15 f0_1 15 scf
/f0_14 f0_1 14 scf
/f0_13 f0_1 13 scf
/f0_12 f0_1 12 scf
/f0_10 f0_1 10 scf
/f0_9 f0_1 9 scf
/f0_6 f0_1 6 scf
/f1_1/Symbol
:bsr
240/apple pd
:esr
/f1_15 f1_1 15 scf
/f2_1/Times-Bold
:mre
/f2_27 f2_1 27 scf
/f2_21 f2_1 21 scf
/f2_18 f2_1 18 scf
/f2_15 f2_1 15 scf
/f3_1 f1_1
def
/f3_15 f3_1 15 scf
/f4_1/Times-Italic
:mre
/f4_21 f4_1 21 scf
/f4_15 f4_1 15 scf
/f4_12 f4_1 12 scf
/f5_1 f1_1
:mi
/f5_15 f5_1 15 scf
/f6_1/Times-BoldItalic
:mre
/f6_15 f6_1 15 scf
/f7_1 f0_1
:v def
/f8_1/Palatino-BoldItalic
:mre
/f8_1 f8_1 1 scf
/f9_1/Courier
:mre
/f9_15 f9_1 15 scf
/f9_14 f9_1 14 scf
/f9_12 f9_1 12 scf
/f9_10 f9_1 10 scf
/f11_1/Courier-Oblique
:mre
/f11_15 f11_1 15 scf
/f11_14 f11_1 14 scf
/f12_1/Courier-Bold
:mre
/f12_14 f12_1 14 scf
/f12_12 f12_1 12 scf
/f12_9 f12_1 9 scf
/f13_1/Lics
findfont :ff def
/f13_15 f13_1 15 scf
/f13_12 f13_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(luca; page: 1 of 64)setjob
%%EndPageSetup
gS 0 0 824 1090 rC
99 1025 :M
f0_6 sf
(May 30, 1995   )S
137 1025 :M
(11:11 PM)S
685 1025 :M
f0_13 sf
(Page )S
714 1025 :M
(1)S
1 G
321 164 1 1 rF
720 1025 :M
-46 -46 :T
psb
/, 128 string def
{currentfile , readstring {(,,,,,,,,,,,,,,,,) search
{pop pop pop {currentfile read {46 eq {exit} if} {exit} ifelse} loop exit}
{pop} ifelse} {pop exit} ifelse} bind loop
pse
46 46 :T
322 165 175 66 rC
321 164 1 1 rF
175 66 1 22 175 66 322 165 T T 1 :f
1 1 1 :i 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000038000000000000000000000000000
00000000000030078000000000000000000000000000000000000000F803C000000000000000000000000000000000000000F8038000000000000000000000000000000000070007F00000000000000000000000000000000000007F0000F00000000000000000000000000000000000008F8000F0000001B00000000000000000000000003C000F0000F000001FF0000000000000000000000003FF800F0000E000003EF000000000000000000000001FCFE00F0001E0038060F000000000000000000000001C03F0
0F0000F00F80E0F000000000000000000000007801F01F0000F03F80C1F00000000000000000000000F001F01E0F00E0CF01C1E00000000000000000000001E000F81E3FC1E00F0381E00000000000000000000003E000FC0F27C1E00F0381E00000000000000000000007C0007C0F03C1E00F0783E00000000000000000000003E0007C0F43C1E01F07C0F00000000000000000000007C0007C1E83C1C00F0382E00000000000000000000007C0007C1F03C1E00F0785E00000000000000000000007C0007C1E03C1
E00F078DE0000000000000000000000FC000F81E0781E01E0799E0000000000000000000000F8000F81F03C1E01E67F1C0000000000000000000000F8000781E03C1C01E07C3C0000000000000000000000FC000781E0783CC1F8783E00000000000000000000007C000F01E0703F81F0101E00000000000000000000007C000F01E0E03F00E0001E00000000000000000000007C001E01E1C01C0000003C00000000000000000000007C003E01F3801C0000003C00000000000000000000003E007C00FE000000000
03C00000000000000000000003E00F0003E00000000003C00000000000000000000001FC0F0000000000000003C000000000000000000000007FF80000000000000003E0000000000000000000000037F0000000000000000380000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000%ADOeod
:j
175 66 8 175 175 66 322 165 T T 1 :f
(\377\372\364\357\351\343\341\334\326\320\313\305\303\275\270\262\255\247\245\237\232\224\216\211\207\201{vpkhc]XRL\360\353\345\337\332\324\322\314\307\301\273\266\264\256\250\243\235\230\226\220\212\205\
ywrlfa[YSNHC=\341\333\326\320\312\305\303\275\267\262\254\246\244\237\231\223\216\210\206\201{upjhb]WQLJD>93.\321\314\306\301\273\265\263\256\250\242\235\227\225\217\212\204~ywqlf`[YSMHB<:5/\)$\036\302\
\274\267\261\254\246\244\236\231\223\215\210\206\200zuoigb\\WQKID>83-+% \032\024\017\263\255\247\242\234\227\224\217\211\204~xvqke`ZXRMGB<:4/\)#\036\034\026\020\013\005\000\377\371\362\354\345\337\330\322\
\313\304\276\267\261\252\244\235\226\220\211\203|voib[UNHA;4-' \032\023\015\006\000)(\377\377\377\377\377\314\377\377\231\377\377f\377\3773\377\377\000\377\314\377\377\314\314\377\314\231\377\314f\377\314\
3\377\314\000\377\231\377\377\231\314\377\231\231\377\231f\377\2313\377\231\000\377f\377\377f\314\377f\231\377ff\377f3\377f\000\3773\377\3773\314\3773\231\3773f\37733\3773\000\377\000\377\377\000\314\377\
\000\231\377\000f\377\0003\377\000\000\314\377\377\314\377\314\314\377\231\314\377f\314\3773\314\377\000\314\314\377\314\314\314\314\314\231\314\314f\314\3143\314\314\000\314\231\377\314\231\314\314\231\
\231\314\231f\314\2313\314\231\000\314f\377\314f\314\314f\231\314ff\314f3\314f\000\3143\377\3143\314\3143\231\3143f\31433\3143\000\314\000\377\314\000\314\314\000\231\314\000f\314\0003\314\000\000\231\377\
\377\231\377\314\231\377\231\231\377f\231\3773\231\377\000\231\314\377\231\314\314\231\314\231\231\314f\231\3143\231\314\000\231\231\377\231\231\314\231\231\231\231\231f\231\2313\231\231\000\231f\377\231\
f\314\231f\231\231ff\231f3\231f\000\2313\377\2313\314\2313\231\2313f\23133\2313\000\231\000\377\231\000\314\231\000\231\231\000f\231\0003\231\000\000f\377\377f\377\314f\377\231f\377ff\3773f\377\000f\314\
\377f\314\314f\314\231f\314ff\3143f\314\000f\231\377f\231\314f\231\231f\231ff\2313f\231\000ff\377ff\314ff\231fffff3ff\000f3\377f3\314f3\231f3ff33f3\000f\000\377f\000\314f\000\231f\000ff\0003f\000\0003\377\
\3773\377\3143\377\2313\377f3\37733\377\0003\314\3773\314\3143\314\2313\314f3\31433\314\0003\231\3773\231\3143\231\2313\231f3\23133\231\0003f\3773f\3143f\2313ff3f33f\00033\37733\31433\23133f33333\0003\000\
\3773\000\3143\000\2313\000f3\00033\000\000\000\377\377\000\377\314\000\377\231\000\377f\000\3773\000\377\000\000\314\377\000\314\314\000\314\231\000\314f\000\3143\000\314\000\000\231\377\000\231\314\000\
\231\231\000\231f\000\2313\000\231\000\000f\377\000f\314\000f\231\000ff\000f3\000f\000\0003\377\0003\314\0003\231\0003f\00033\0003\000\000\000\377\000\000\314\000\000\231\000\000f\000\0003\000\000\000\377\
\377\377\371\371\371\362\362\362\354\354\354\345\345\345\337\337\337\330\330\330\322\322\322\313\313\313\304\304\304\276\276\276\267\267\267\261\261\261\252\252\252\244\244\244\235\235\235\226\226\226\220\
\220\220\211\211\211\203\203\203|||vvvoooiiibbb[[[UUUNNNHHHAAA;;;444---'''   \032\032\032\023\023\023\015\015\015\006\006\006\000\000\000):keod
:j
0 0 0 0 rC
321 164 1 1 rF
720 1025 :M
-46 -46 :T
psb
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.
pse
gR
1 G
gS 322 165 175 66 rC
321 164 1 1 rF
720 1025 :M
-46 -46 :T
psb
%%BeginDocument: Adobe Illustrator(TM) 3.2.2
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2.2
%%For: (Luca Cardelli) (DEC SRC)
%%CreationDate: (5/11/93) (7:21 PM)
%%BoundingBox: 233 78 408 144
%%DocumentProcessColors: Black
%%DocumentFonts: Palatino-BoldItalic
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
pse
46 46 :T
322 165 :M
0 G
f8_1 sf
( )S
322 165 :M
-46 -46 :T
psb
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%/showpage{}def
/copypage{}def
[233 144 408 78]
[newpath clippath pathbbox]
2 dict begin
/d exch def
/s exch def
d 0 get d 1 get translate
d 2 get d 0 get sub s 2 get s 0 get sub div
d 3 get d 1 get sub s 3 get s 1 get sub div
scale
s 0 get neg s 1 get neg translate
end
%%EndProlog
%%BeginSetup
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Palatino-BoldItalic Palatino-BoldItalic
[/_Palatino-BoldItalic/Palatino-BoldItalic 0 0 1 TZ
%AI3_EndEncoding TrueType
%%EndSetup
0 A
0 To
0.9913 0.1312 -0.1312 0.9913 276.3991 93.25 0 Tp
TP
0 Tr
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
/_Palatino-BoldItalic 36.0027 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(Obliq) Tx 
(\r) TX 
TO
%%PageTrailer
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EndDocument
pse
gR
gS 0 0 824 1090 rC
214 257 :M
0 G
f2_27 sf
(A language with distributed scope)S
351 334 :M
f4_21 sf
(Luca Cardelli)S
236 363 :M
f0_15 sf
(Digital Equipment Corporation, Systems Research Center)S
99 436 :M
f2_21 sf
(Abstract)S
126 465 :M
f0_15 sf
.62 .062(Obliq is a lexically-scoped untyped interpreted language that supports distributed object-oriented)J
99 483 :M
.569 .057(computation. An Obliq computation may involve multiple threads of control within an address space,)J
99 501 :M
.221 .022(multiple address spaces on a machine, heterogeneous machines over a local network, and multiple net)J
716 501 :M
(-)S
99 519 :M
.541 .054(works over the Internet. Obliq objects have state and are local to a site. Obliq computations can roam)J
99 537 :M
(over the network, while maintaining network connections.)S
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(luca; page: 2 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(2)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 188 :M
f2_21 sf
(Contents)S
145 233 :M
f0_15 sf
(1.)S
167 233 :M
(Introduction)S
244 233 :M
(.................................................................................................................................)S
241 233 :M
( )S
731 233 :M
(4)S
163 249 :M
(1.1)S
194 249 :M
(Language Overview)S
319 249 :M
(.............................................................................................................)S
316 249 :M
( )S
731 249 :M
(4)S
163 265 :M
(1.2)S
194 265 :M
(Distributed Semantics)S
331 265 :M
(..........................................................................................................)S
327 265 :M
( )S
731 265 :M
(5)S
145 281 :M
(2.)S
167 281 :M
(Local Objects)S
252 281 :M
(...............................................................................................................................)S
251 281 :M
( )S
731 281 :M
(6)S
163 297 :M
(2.1)S
194 297 :M
(Objects and their Fields)S
338 297 :M
(........................................................................................................)S
337 297 :M
( )S
731 297 :M
(6)S
163 313 :M
(2.2)S
194 313 :M
(Object Operations)S
308 313 :M
(................................................................................................................)S
304 313 :M
( )S
731 313 :M
(7)S
163 329 :M
(2.3)S
194 329 :M
(Simple Examples)S
301 329 :M
(..................................................................................................................)S
299 329 :M
( )S
731 329 :M
(9)S
145 345 :M
(3.)S
167 345 :M
(Remote Objects)S
267 345 :M
(...........................................................................................................................)S
263 345 :M
( )S
731 345 :M
(9)S
163 361 :M
(3.1)S
194 361 :M
(State)S
226 361 :M
(....................................................................................................................................)S
224 361 :M
( )S
724 361 :M
(10)S
163 377 :M
(3.2)S
194 377 :M
(Transmission)S
278 377 :M
(......................................................................................................................)S
275 377 :M
( )S
724 377 :M
(10)S
163 393 :M
(3.3)S
194 393 :M
(Distributed Computation)S
346 393 :M
(....................................................................................................)S
344 393 :M
( )S
724 393 :M
(11)S
163 409 :M
(3.4)S
194 409 :M
(Self-inflicted Operations)S
346 409 :M
(....................................................................................................)S
343 409 :M
( )S
724 409 :M
(12)S
163 425 :M
(3.5)S
194 425 :M
(Protected Objects)S
301 425 :M
(................................................................................................................)S
300 425 :M
( )S
724 425 :M
(12)S
163 441 :M
(3.6)S
194 441 :M
(Serialized Objects)S
308 441 :M
(..............................................................................................................)S
304 441 :M
( )S
724 441 :M
(13)S
163 457 :M
(3.7)S
194 457 :M
(Name Servers)S
282 457 :M
(.....................................................................................................................)S
279 457 :M
( )S
724 457 :M
(14)S
163 473 :M
(3.8)S
194 473 :M
(Execution Engines)S
308 473 :M
(..............................................................................................................)S
307 473 :M
( )S
724 473 :M
(16)S
145 489 :M
(4.)S
167 489 :M
(Local Techniques)S
278 489 :M
(......................................................................................................................)S
274 489 :M
( )S
724 489 :M
(16)S
163 505 :M
(4.1)S
194 505 :M
(Recursion and Iteration)S
338 505 :M
(......................................................................................................)S
335 505 :M
( )S
724 505 :M
(16)S
163 521 :M
(4.2)S
194 521 :M
(The Object-Oriented Numerals)S
383 521 :M
(..........................................................................................)S
381 521 :M
( )S
724 521 :M
(17)S
163 537 :M
(4.3)S
194 537 :M
(The Prime Numbers Sieve)S
357 537 :M
(.................................................................................................)S
353 537 :M
( )S
724 537 :M
(18)S
163 553 :M
(4.4)S
194 553 :M
(A Calculator)S
274 553 :M
(.......................................................................................................................)S
271 553 :M
( )S
724 553 :M
(18)S
163 569 :M
(4.5)S
194 569 :M
(Surrogates)S
259 569 :M
(...........................................................................................................................)S
258 569 :M
( )S
724 569 :M
(20)S
145 585 :M
(5.)S
167 585 :M
(Distributed Techniques)S
308 585 :M
(..............................................................................................................)S
307 585 :M
( )S
724 585 :M
(20)S
163 601 :M
(5.1)S
194 601 :M
(A Serialized Queue)S
312 601 :M
(.............................................................................................................)S
311 601 :M
( )S
724 601 :M
(20)S
163 617 :M
(5.2)S
194 617 :M
(Compute Servers)S
301 617 :M
(................................................................................................................)S
298 617 :M
( )S
724 617 :M
(21)S
163 633 :M
(5.3)S
194 633 :M
(A Database Server)S
308 633 :M
(..............................................................................................................)S
306 633 :M
( )S
724 633 :M
(22)S
163 649 :M
(5.4)S
194 649 :M
(Remote Agents)S
289 649 :M
(...................................................................................................................)S
287 649 :M
( )S
724 649 :M
(23)S
163 665 :M
(5.5)S
194 665 :M
(Application Partitioning)S
342 665 :M
(.....................................................................................................)S
339 665 :M
( )S
724 665 :M
(25)S
163 681 :M
(5.6)S
194 681 :M
(Agent Migration)S
297 681 :M
(.................................................................................................................)S
294 681 :M
( )S
724 681 :M
(25)S
163 697 :M
(5.7)S
194 697 :M
(Object Migration)S
301 697 :M
(................................................................................................................)S
298 697 :M
( )S
724 697 :M
(25)S
163 713 :M
(5.8)S
194 713 :M
(Application Servers)S
316 713 :M
(............................................................................................................)S
314 713 :M
( )S
724 713 :M
(27)S
145 729 :M
(6.)S
167 729 :M
(Syntax Overview)S
274 729 :M
(.......................................................................................................................)S
272 729 :M
( )S
724 729 :M
(27)S
145 745 :M
(7.)S
167 745 :M
(Conclusions)S
244 745 :M
(...............................................................................................................................)S
241 745 :M
( )S
724 745 :M
(28)S
145 761 :M
(Acknowledgments)S
259 761 :M
(...........................................................................................................................)S
257 761 :M
( )S
724 761 :M
(29)S
145 777 :M
(A.)S
167 777 :M
(Language Reference)S
293 777 :M
(..................................................................................................................)S
291 777 :M
( )S
724 777 :M
(30)S
163 793 :M
(A.1)S
194 793 :M
(Syntactic Structures)S
316 793 :M
(............................................................................................................)S
314 793 :M
( )S
724 793 :M
(30)S
181 809 :M
(A.1.1)S
230 809 :M
(Identifiers)S
293 809 :M
(..................................................................................................................)S
292 809 :M
( )S
724 809 :M
(30)S
181 825 :M
(A.1.2)S
230 825 :M
(Definitions)S
301 825 :M
(................................................................................................................)S
297 825 :M
( )S
724 825 :M
(30)S
181 841 :M
(A.1.3)S
230 841 :M
(Terms)S
271 841 :M
(........................................................................................................................)S
268 841 :M
( )S
724 841 :M
(30)S
181 857 :M
(A.1.4)S
230 857 :M
(Term Sequences)S
331 857 :M
(........................................................................................................)S
330 857 :M
( )S
724 857 :M
(31)S
181 873 :M
(A.1.5)S
230 873 :M
(Built-In Operators)S
342 873 :M
(.....................................................................................................)S
340 873 :M
( )S
724 873 :M
(31)S
181 889 :M
(A.1.6)S
230 889 :M
(Operator Precedence)S
357 889 :M
(.................................................................................................)S
355 889 :M
( )S
724 889 :M
(31)S
163 905 :M
(A.2)S
194 905 :M
(Data Structures)S
289 905 :M
(...................................................................................................................)S
287 905 :M
( )S
724 905 :M
(31)S
181 921 :M
(A.2.1)S
230 921 :M
(Value Identity)S
319 921 :M
(...........................................................................................................)S
316 921 :M
( )S
724 921 :M
(31)S
181 937 :M
(A.2.2)S
230 937 :M
(Constants)S
293 937 :M
(..................................................................................................................)S
289 937 :M
( )S
724 937 :M
(32)S
181 953 :M
(A.2.3)S
230 953 :M
(Operators)S
293 953 :M
(..................................................................................................................)S
289 953 :M
( )S
724 953 :M
(32)S
181 969 :M
(A.2.4)S
230 969 :M
(Arrays)S
274 969 :M
(.......................................................................................................................)S
271 969 :M
( )S
724 969 :M
(33)S
181 985 :M
(A.2.5)S
230 985 :M
(Options)S
282 985 :M
(.....................................................................................................................)S
278 985 :M
( )S
724 985 :M
(33)S
181 1001 :M
(A.2.6)S
230 1001 :M
(Objects)S
278 1001 :M
(......................................................................................................................)S
276 1001 :M
( )S
724 1001 :M
(33)S
181 1017 :M
(A.2.7)S
230 1017 :M
(Protection and Serialization)S
398 1017 :M
(......................................................................................)S
397 1017 :M
( )S
724 1017 :M
(35)S
181 1033 :M
(A.2.8)S
230 1033 :M
(Object and Engine Servers)S
391 1033 :M
(........................................................................................)S
390 1033 :M
( )S
724 1033 :M
(35)S
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(luca; page: 3 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
731 1071 :M
f0_13 sf
(Page )S
760 1071 :M
(3)S
181 158 :M
f0_15 sf
(A.2.9)S
230 158 :M
(Processor and File System Enablers)S
447 158 :M
(.........................................................................)S
445 158 :M
( )S
724 158 :M
(36)S
163 174 :M
(A.3)S
194 174 :M
(Control Structures)S
308 174 :M
(..............................................................................................................)S
304 174 :M
( )S
724 174 :M
(36)S
181 190 :M
(A.3.1)S
230 190 :M
(Definitions)S
301 190 :M
(................................................................................................................)S
297 190 :M
( )S
724 190 :M
(37)S
181 206 :M
(A.3.2)S
230 206 :M
(Assignment)S
304 206 :M
(...............................................................................................................)S
302 206 :M
( )S
724 206 :M
(37)S
181 222 :M
(A.3.3)S
230 222 :M
(Sequencing)S
301 222 :M
(................................................................................................................)S
300 222 :M
( )S
724 222 :M
(37)S
181 238 :M
(A.3.4)S
230 238 :M
(Procedures and Methods)S
379 238 :M
(...........................................................................................)S
378 238 :M
( )S
724 238 :M
(37)S
181 254 :M
(A.3.5)S
230 254 :M
(Conditionals)S
308 254 :M
(..............................................................................................................)S
307 254 :M
( )S
724 254 :M
(38)S
181 270 :M
(A.3.6)S
230 270 :M
(Case)S
263 270 :M
(..........................................................................................................................)S
259 270 :M
( )S
724 270 :M
(38)S
181 286 :M
(A.3.7)S
230 286 :M
(Iteration)S
282 286 :M
(.....................................................................................................................)S
281 286 :M
( )S
724 286 :M
(38)S
181 302 :M
(A.3.8)S
230 302 :M
(Concurrency)S
308 302 :M
(..............................................................................................................)S
307 302 :M
( )S
724 302 :M
(39)S
181 318 :M
(A.3.9)S
230 318 :M
(Exceptions)S
301 318 :M
(................................................................................................................)S
297 318 :M
( )S
724 318 :M
(40)S
181 334 :M
(A.3.10)S
230 334 :M
(Errors)S
271 334 :M
(........................................................................................................................)S
267 334 :M
( )S
724 334 :M
(40)S
163 350 :M
(A.4)S
194 350 :M
(Methodology)S
278 350 :M
(......................................................................................................................)S
275 350 :M
( )S
724 350 :M
(40)S
181 366 :M
(A.4.1)S
230 366 :M
(Type Comments)S
331 366 :M
(........................................................................................................)S
330 366 :M
( )S
724 366 :M
(40)S
163 382 :M
(A.5)S
194 382 :M
(Lexicon)S
244 382 :M
(...............................................................................................................................)S
243 382 :M
( )S
724 382 :M
(42)S
163 398 :M
(A.6)S
194 398 :M
(Syntax)S
237 398 :M
(.................................................................................................................................)S
236 398 :M
( )S
724 398 :M
(43)S
145 414 :M
(B.)S
167 414 :M
(System Reference)S
278 414 :M
(......................................................................................................................)S
276 414 :M
( )S
724 414 :M
(47)S
163 430 :M
(B.1)S
194 430 :M
(The Executables)S
297 430 :M
(.................................................................................................................)S
294 430 :M
( )S
724 430 :M
(47)S
163 446 :M
(B.2)S
194 446 :M
(The Top-Level)S
286 446 :M
(....................................................................................................................)S
284 446 :M
( )S
724 446 :M
(47)S
163 462 :M
(B.3)S
194 462 :M
(Program Files)S
282 462 :M
(.....................................................................................................................)S
279 462 :M
( )S
724 462 :M
(48)S
163 478 :M
(B.4)S
194 478 :M
(Modules)S
248 478 :M
(..............................................................................................................................)S
247 478 :M
( )S
724 478 :M
(48)S
163 494 :M
(B.5)S
194 494 :M
(The Network Objects Daemon)S
379 494 :M
(...........................................................................................)S
378 494 :M
( )S
724 494 :M
(49)S
163 510 :M
(B.6)S
194 510 :M
(Built-in Libraries)S
301 510 :M
(................................................................................................................)S
299 510 :M
( )S
724 510 :M
(50)S
181 526 :M
(B.6.1)S
230 526 :M
(Sys)S
256 526 :M
(............................................................................................................................)S
252 526 :M
( )S
724 526 :M
(50)S
181 542 :M
(B.6.2)S
230 542 :M
(Bool)S
263 542 :M
(..........................................................................................................................)S
259 542 :M
( )S
724 542 :M
(50)S
181 558 :M
(B.6.3)S
230 558 :M
(Int)S
248 558 :M
(..............................................................................................................................)S
247 558 :M
( )S
724 558 :M
(51)S
181 574 :M
(B.6.4)S
230 574 :M
(Real)S
259 574 :M
(...........................................................................................................................)S
257 574 :M
( )S
724 574 :M
(51)S
181 590 :M
(B.6.5)S
230 590 :M
(Math)S
263 590 :M
(..........................................................................................................................)S
262 590 :M
( )S
724 590 :M
(51)S
181 606 :M
(B.6.6)S
230 606 :M
(Ascii)S
263 606 :M
(..........................................................................................................................)S
262 606 :M
( )S
724 606 :M
(52)S
181 622 :M
(B.6.7)S
230 622 :M
(Text)S
259 622 :M
(...........................................................................................................................)S
257 622 :M
( )S
724 622 :M
(52)S
181 638 :M
(B.6.8)S
230 638 :M
(Array)S
267 638 :M
(.........................................................................................................................)S
265 638 :M
( )S
724 638 :M
(53)S
181 654 :M
(B.6.9)S
230 654 :M
(Net)S
256 654 :M
(............................................................................................................................)S
252 654 :M
( )S
724 654 :M
(53)S
181 670 :M
(B.6.10)S
230 670 :M
(Thread)S
274 670 :M
(.......................................................................................................................)S
272 670 :M
( )S
724 670 :M
(53)S
181 686 :M
(B.6.11)S
230 686 :M
(Rd)S
252 686 :M
(.............................................................................................................................)S
248 686 :M
( )S
724 686 :M
(54)S
181 702 :M
(B.6.12)S
230 702 :M
(Wr)S
252 702 :M
(.............................................................................................................................)S
249 702 :M
( )S
724 702 :M
(54)S
181 718 :M
(B.6.13)S
230 718 :M
(Pickle)S
271 718 :M
(........................................................................................................................)S
267 718 :M
( )S
724 718 :M
(55)S
181 734 :M
(B.6.14)S
230 734 :M
(Lex)S
256 734 :M
(............................................................................................................................)S
253 734 :M
( )S
724 734 :M
(55)S
181 750 :M
(B.6.15)S
230 750 :M
(Fmt)S
256 750 :M
(............................................................................................................................)S
254 750 :M
( )S
724 750 :M
(55)S
181 766 :M
(B.6.16)S
230 766 :M
(Process)S
278 766 :M
(......................................................................................................................)S
276 766 :M
( )S
724 766 :M
(56)S
181 782 :M
(B.6.17)S
230 782 :M
(Color)S
267 782 :M
(.........................................................................................................................)S
264 782 :M
( )S
724 782 :M
(56)S
181 798 :M
(B.6.18)S
230 798 :M
(Form)S
267 798 :M
(.........................................................................................................................)S
263 798 :M
( )S
724 798 :M
(56)S
145 814 :M
(C.)S
167 814 :M
(Programming Reference)S
316 814 :M
(............................................................................................................)S
314 814 :M
( )S
724 814 :M
(58)S
163 830 :M
(C.1)S
194 830 :M
(The Package Hierarchy)S
338 830 :M
(......................................................................................................)S
335 830 :M
( )S
724 830 :M
(58)S
163 846 :M
(C.2)S
194 846 :M
(The Interfaces)S
282 846 :M
(.....................................................................................................................)S
280 846 :M
( )S
724 846 :M
(59)S
163 862 :M
(C.3)S
194 862 :M
(The Libraries)S
278 862 :M
(......................................................................................................................)S
275 862 :M
( )S
724 862 :M
(59)S
163 878 :M
(C.4)S
194 878 :M
(Embedding Obliq in an Application)S
413 878 :M
(..................................................................................)S
409 878 :M
( )S
724 878 :M
(59)S
163 894 :M
(C.5)S
194 894 :M
(Extending Obliq with sys_calls)S
383 894 :M
(..........................................................................................)S
382 894 :M
( )S
724 894 :M
(59)S
163 910 :M
(C.6)S
194 910 :M
(Extending Obliq with new Packages)S
413 910 :M
(..................................................................................)S
412 910 :M
( )S
724 910 :M
(60)S
163 926 :M
(C.7)S
194 926 :M
(Building a Customized Obliq Interpreter)S
439 926 :M
(...........................................................................)S
437 926 :M
( )S
724 926 :M
(60)S
145 942 :M
(References)S
214 942 :M
(.......................................................................................................................................)S
212 942 :M
( )S
724 942 :M
(61)S
145 958 :M
(Index)S
181 958 :M
(................................................................................................................................................)S
179 958 :M
( )S
724 958 :M
(63)S
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(luca; page: 4 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(4)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 188 :M
f2_21 sf
(1.)S
172 188 :M
(Introduction)S
172 217 :M
f0_15 sf
.62 .062(Obliq is a lexically-scoped untyped interpreted language that supports distributed object-oriented)J
145 235 :M
.569 .057(computation. An Obliq computation may involve multiple threads of control within an address space,)J
145 253 :M
.221 .022(multiple address spaces on a machine, heterogeneous machines over a local network, and multiple net)J
762 253 :M
(-)S
145 271 :M
.541 .054(works over the Internet. Obliq objects have state and are local to a site. Obliq computations can roam)J
145 289 :M
(over the network, while maintaining network connections.)S
145 333 :M
f2_18 sf
(1.1)S
185 333 :M
(Language Overview)S
172 361 :M
f0_15 sf
.673 .067(The guiding principle that separates Obliq from other distributed procedural languages is the ad)J
761 361 :M
(-)S
145 379 :M
.685 .068(herence to lexical scoping in a distributed higher-order context. This principle is conceptually simple)J
145 397 :M
1.033 .103(and has a number of interesting consequences: it supports a natural and consistent semantics of dis)J
762 397 :M
(-)S
145 415 :M
(tributed computation, and it enables elegant techniques for distributed programming.)S
172 433 :M
1.363 .136(In lexically scoped languages, the binding location of every identifier is determined by simple)J
145 451 :M
.773 .077(analysis of the program text surrounding the identifier. Therefore, one can be sure of the meaning of)J
145 469 :M
.354 .035(program identifiers, and can much more easily reason about the behavior of programs. In a distributed)J
145 487 :M
.185 .018(language like Obliq, lexical scoping assumes a further role. It ensures that computations have a precise)J
145 505 :M
.464 .046(meaning even when they migrate over the network: a meaning that is determined by the binding loca)J
762 505 :M
(-)S
145 523 :M
(tion )S
f4_15 sf
(and)S
195 523 :M
f0_15 sf
( network site of identifiers, and not by execution sites.)S
172 541 :M
.52 .052(Network-wide scoping becomes an issue in the presence of higher-order distributed computation,)J
145 559 :M
.737 .074(for example when remote sites acting as compute servers accept procedures for execution. The ques)J
762 559 :M
(-)S
145 577 :M
1.135 .114(tion here is: what happens to the )J
355 577 :M
.863 .086(free identifiers of network-transmitted procedures? Obliq takes the)J
145 595 :M
.678 .068(view that such identifiers are bound to their original locations, as prescribed by lexical scoping, even)J
145 613 :M
(when these locations belong to different network sites.)S
172 631 :M
.002 0(The principal way of structuring distributed computations in Obliq is through the notion of )J
f4_15 sf
(objects)S
763 631 :M
f0_15 sf
(.)S
145 649 :M
.377 .038(Network services normally accept a variety of messages; it is then natural to see each service as a )J
f4_15 sf
.14(net-)A
145 667 :M
.049 .005(work object)J
f0_15 sf
.032 .003( \(or, more neutrally, as a network interface\). Obliq supports objects in this spirit, relying for)J
145 685 :M
(its implementation on Modula-3\325s network objects [Birrell, )S
504 685 :M
f4_15 sf
(et al.)S
534 685 :M
f0_15 sf
( 1993b])S
172 703 :M
.608 .061(The Obliq object primitives are designed to be simple and powerful, with a coherent relationship)J
145 721 :M
.519 .052(between their local and distributed semantics. Obliq objects are collections of named fields, with four)J
145 739 :M
.126 .013(basic operations: selection/invocation, updating/overriding, cloning, and redirection. There are no class)J
145 757 :M
1.191 .119(hierarchies, nor complex method-lookup procedures. Every object is potentially and transparently a)J
145 775 :M
.409 .041(network object. An object may become accessible over the network either by the mediation of a name)J
145 793 :M
(server, or simply by being used as the argument or result of a remote method.)S
172 811 :M
.052 .005(In any framework where objects are distributed across sites, it is critical to decide what to do about)J
145 829 :M
.778 .078(mobility and duplication of )J
318 829 :M
f4_15 sf
.205(state)A
f0_15 sf
.783 .078(. Normally, whenever a piece of data is transmitted from one site to)J
145 847 :M
.617 .062(another, it is implicitly copied. However, duplication of objects with state easily results in havoc, un)J
762 847 :M
(-)S
145 865 :M
(less the state is handled consistently across sites.)S
172 883 :M
.779 .078(To avoid problems with state duplication, objects in Obliq are local to a site and are never auto)J
762 883 :M
(-)S
145 901 :M
.521 .052(matically copied over the network. In contrast, )J
f4_15 sf
.919 .092(network references)J
552 901 :M
f0_15 sf
.687 .069( to objects can be transmitted from)J
145 919 :M
.44 .044(site to site without restrictions. An alternative approach would allow objects and their state to )J
720 919 :M
f4_15 sf
(migrate)S
145 937 :M
f0_15 sf
.147 .015(from site to site, making sure that the integrity of their internal state is maintained during the act of mi)J
762 937 :M
(-)S
145 955 :M
.708 .071(gration. We have chosen not to support migration directly, since it requires coordination across sites,)J
145 973 :M
1.096 .11(and policy decisions about the optimal time of migration. However, atomic object migration can be)J
145 991 :M
(coded from our primitives, specifically from cloning and redirection.)S
172 1009 :M
.194 .019(In addition to the distribution of data, the distribution of computations must also be designed care)J
762 1009 :M
(-)S
145 1027 :M
(fully. It is clearly desirable to be able to transmit )S
f4_15 sf
(agents)S
f0_15 sf
( for remote execution. However, one should not)S
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(luca; page: 5 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
731 1071 :M
f0_13 sf
(Page )S
760 1071 :M
(5)S
145 160 :M
f0_15 sf
.879 .088(be satisfied with transmitting just the program text of such agents. Program text cannot carry with it)J
145 178 :M
.157 .016(live connections to its originating site, nor to any data or service at any other site. Hence the process of)J
145 196 :M
1.054 .105(transmitting program text over the network implies a complete network disconnect from the current)J
145 214 :M
.178 .018(distributed computation. In addition, unpredictable dynamic scoping results from transmitting and then)J
145 232 :M
(running program text containing free identifiers.)S
172 250 :M
.387 .039(Obliq computations, in the form of procedures or methods, can be freely transmitted over the net)J
762 250 :M
(-)S
145 268 :M
.414 .041(work. Actual computations \()J
319 268 :M
f4_15 sf
(closures)S
369 268 :M
f0_15 sf
.466 .047(, not source text\) are transmitted; lexically scoped )J
678 268 :M
.314 .031(free identifiers)J
145 286 :M
.126 .013(retain their bindings to the originating sites. Through these free identifiers, migrating computations can)J
145 304 :M
.096 .01(maintain connections to objects and locations residing at various sites. Disconnected agents can be rep)J
762 304 :M
(-)S
145 322 :M
.45 .045(resented as procedures with no free identifiers; these agents do not need to rely on prolonged network)J
145 340 :M
(connectivity.)S
172 358 :M
.831 .083(In order to concentrate on distributed computation issues and to reduce complexity, Obliq is de)J
762 358 :M
(-)S
145 376 :M
.161 .016(signed as an )J
223 376 :M
f4_15 sf
.034(untyped)A
f0_15 sf
.124 .012( language. This decision leads to simpler and smaller language processors that can)J
145 394 :M
.004 0(be easily embedded in applications. Moreover, untyped programs are somewhat easier to distribute, be)J
761 394 :M
(-)S
145 412 :M
(cause we avoid problems of compatibility of types at multiple sites.)S
172 430 :M
.764 .076(The Obliq run-time is )J
f4_15 sf
1.311 .131(strongly typed)J
399 430 :M
f0_15 sf
.906 .091(: erroneous computations produce clean errors that are cor)J
761 430 :M
(-)S
145 448 :M
.183 .018(rectly propagated across sites. The run-time data space is )J
f4_15 sf
.058(heterogeneous)A
582 448 :M
f0_15 sf
.234 .023(, meaning that there are differ-)J
145 466 :M
.871 .087(ent kinds of run-time values and no provisions to discriminate between them; heterogeneity discour)J
762 466 :M
(-)S
145 484 :M
.237 .024(ages writing programs that would be difficult to typecheck in typed languages. Because of heterogene)J
762 484 :M
(-)S
145 502 :M
.211 .021(ity and lexical scoping, Obliq is in principle suitable for static typing. More importantly, Obliq is com)J
762 502 :M
(-)S
145 520 :M
(patible with the disciplined approach to programming that is inspired by statically typed languages.)S
172 538 :M
.999 .1(Lexical scoping has many interesting implications in a distributed context. One is that, together)J
145 556 :M
1.577 .158(with strong run-time typing and interpreted execution, it can provide network security guarantees.)J
145 574 :M
.209 .021(Consider the situation of a server executing incoming foreign agents. Because of lexical scoping, these)J
145 592 :M
.27 .027(agents have access only to the data and resources that they can reference via free variables or that they)J
145 610 :M
.385 .038(explicitly receive in the form of procedure parameters. In particular, foreign agents cannot access data)J
145 628 :M
.441 .044(or resources at the server site that are not explicitly given to them. For example, operations on files in)J
145 646 :M
.334 .033(Obliq require file system handles that are available as global lexically bound identifiers at each site. A)J
145 664 :M
.34 .034(foreign agent can operate on the file system handle of its originating site, simply by referring to it as a)J
145 682 :M
.242 .024(free identifier. But the file system handle at the server site is outside its lexical scope, and hence unob)J
762 682 :M
(-)S
145 700 :M
.243 .024(tainable except with the cooperation of the server. Degrees of file protection can be represented by file)J
145 718 :M
(system handles with special access rights.)S
145 762 :M
f2_18 sf
(1.2)S
185 762 :M
(Distributed Semantics)S
172 790 :M
f0_15 sf
(The Obliq distributed semantics is based on the notions of )S
f4_15 sf
(sites)S
551 790 :M
f0_15 sf
(, )S
559 790 :M
f4_15 sf
(locations)S
614 790 :M
f0_15 sf
(, )S
f4_15 sf
(values)S
f0_15 sf
(, and )S
692 790 :M
f4_15 sf
(threads)S
f0_15 sf
(.)S
172 808 :M
f4_15 sf
.287(Sites)A
f0_15 sf
1.116 .112( \(that is, address spaces\) contain locations, and )J
500 808 :M
1.086 .109(locations contain values. Each location be)J
762 808 :M
(-)S
145 826 :M
.264 .026(longs to a unique site. We often talk about a )J
417 826 :M
f4_15 sf
.203 .02(local site)J
472 826 :M
f0_15 sf
.206 .021(, in relative terms, and about )J
f4_15 sf
.351 .035(remote sites)J
f0_15 sf
.286 .029(, mean)J
762 826 :M
(-)S
145 844 :M
.704 .07(ing any site other than the local site. Sites are not explicit in the syntax but are implicit in operations)J
145 862 :M
(that produce new locations.)S
172 880 :M
f4_15 sf
.256(Threads)A
f0_15 sf
.966 .097( are virtual sequential instruction processors. Multiple threads may be executed concur)J
762 880 :M
(-)S
145 898 :M
.46 .046(rently, both at the same site or at different sites. A given thread may stop executing at a site, and con)J
762 898 :M
(-)S
145 916 :M
.145 .015(tinue executing at another site. That is, threads may jump from site to site while retaining their concep)J
762 916 :M
(-)S
145 934 :M
1.058 .106(tual identity. The )J
257 934 :M
f4_15 sf
1.64 .164(current site)J
f0_15 sf
1.039 .104( is where execution of a given thread of control takes place at a given)J
145 952 :M
(moment.)S
172 970 :M
.327 .033(In the Obliq syntax, )J
297 970 :M
f4_15 sf
.172 .017(constant identifiers)J
413 970 :M
f0_15 sf
.207 .021( denote values, while )J
f4_15 sf
.284 .028(variable identifiers )J
f0_15 sf
.384 .038(denote locations.)J
145 988 :M
(A location containing a value may be updated by assignment to the variable denoting the location.)S
172 1006 :M
(Obliq )S
210 1006 :M
(values include )S
300 1006 :M
f4_15 sf
(basic values)S
374 1006 :M
f0_15 sf
( \(such as strings or integers\), )S
f4_15 sf
(objects)S
f0_15 sf
(, )S
600 1006 :M
f4_15 sf
(arrays)S
f0_15 sf
(, )S
647 1006 :M
f4_15 sf
(closures)S
697 1006 :M
f0_15 sf
( \(the results)S
145 1024 :M
(of evaluating methods or procedures\), and other values that we need not discuss at this point.)S
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(luca; page: 6 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(6)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
172 160 :M
f0_15 sf
.094 .009(A value may contain )J
f4_15 sf
.195 .019(embedded locations)J
421 160 :M
f0_15 sf
.135 .013(. An array value has embedded locations for its elements,)J
145 178 :M
.651 .065(which can be updated. An object value has embedded locations for its fields and methods, which can)J
145 196 :M
.307 .031(be updated and overridden. A closure value may have embedded locations because of free variables in)J
145 214 :M
1.039 .104(its program text that refer to locations in the surrounding lexical scope. Basic values do not contain)J
145 232 :M
(embedded locations. When a location is created during a computation, it is allocated at the current site.)S
172 250 :M
.191 .019(Values may be )J
f4_15 sf
.062(transmitted)A
335 250 :M
f0_15 sf
.298 .03( over the network. A value containing no embedded locations is copied)J
145 268 :M
.322 .032(on transmission. Embedded locations are automatically replaced by network references, so that the ac)J
762 268 :M
(-)S
145 286 :M
.47 .047(tual locations do not move from the site where they are originally allocated.)J
f0_10 sf
.046 .005( )J
f0_15 sf
.492 .049(An Obliq value may con)J
762 286 :M
(-)S
145 304 :M
.888 .089(tain network references to locations at different sites. In particular, a closure value may contain pro)J
762 304 :M
(-)S
145 322 :M
(gram text that, when executed, accesses data \(bound to its free identifiers\) over the network.)S
172 340 :M
.413 .041(Every Obliq object consists of a collection of locations spanning a single site; hence the object it)J
762 340 :M
(-)S
145 358 :M
.051 .005(self is bound to a unique site)J
f0_10 sf
0 -4 rm
(1)S
0 4 rm
f0_15 sf
.06 .006(. This immobility of objects is not a strong limitation, because objects can)J
145 376 :M
.094 .009(be )J
f4_15 sf
.055(cloned)A
203 376 :M
f0_15 sf
.237 .024( to different sites, and because procedures can be transmitted that allocate objects at different)J
145 394 :M
.653 .065(sites. Hence, a collection of interacting objects can be dynamically allocated throughout the network,)J
145 412 :M
.839 .084(but not moved afterwards. If migration is necessary, cloning can be used to provide the needed state)J
145 430 :M
(duplication, and redirection can be used to redirect operations to the clones.)S
172 448 :M
1.427 .143(We have stressed so far how Obliq computations can evolve into webs of network references.)J
145 466 :M
1.082 .108(However, this is not necessarily the case. For example, a procedure with no free identifiers forms a)J
145 484 :M
1.311 .131(completely self-contained computing )J
381 484 :M
f4_15 sf
.536(agent)A
f0_15 sf
1.691 .169(. The execution of these agents may be carried out au)J
762 484 :M
(-)S
145 502 :M
.822 .082(tonomously by remote compute servers \(the agents may dynamically reconnect to report results\). In)J
762 502 :M
(-)S
145 520 :M
.444 .044(termediate situations are also possible, as with semi-autonomous agents that maintain low-traffic teth)J
762 520 :M
(-)S
145 538 :M
(ers to their originating site.)S
172 556 :M
.365 .037(In conclusion, the distributed semantics of Obliq is defined so that data and computations are net)J
762 556 :M
(-)S
145 574 :M
.166 .017(work-transparent: their meaning does not depend on allocation sites or execution sites \(of course, com)J
762 574 :M
(-)S
145 592 :M
1.23 .123(putations may receive different arguments at different sites\). At the same time, Obliq programs are)J
145 610 :M
.865 .086(network-aware: distribution is achieved by explicit acts that give full control on communication pat)J
762 610 :M
(-)S
145 628 :M
(terns.)S
172 646 :M
.779 .078(Lexical scoping makes it easy to distribute computations over multiple sites, since computations)J
145 664 :M
.632 .063(behave correctly even when they are carried out at the wrong place \(by some measure\). Flexibility in)J
145 682 :M
.781 .078(distribution can, however, result in undesirable network traffic. Obliq relieves some of the burden of)J
145 700 :M
.438 .044(distributing data and computations, but care and planning are still required to achieve satisfactory dis)J
762 700 :M
(-)S
145 718 :M
(tributed performance.)S
145 764 :M
f2_21 sf
(2.)S
172 764 :M
(Local Objects)S
172 793 :M
f0_15 sf
1.37 .137(In this section we discuss the Obliq object primitives in the context of a single execution site.)J
145 811 :M
(These primitives are then reinterpreted in the next section and given distributed meaning.)S
145 855 :M
f2_18 sf
(2.1)S
185 855 :M
(Objects and their Fields)S
172 883 :M
f0_15 sf
.463 .046(An Obliq object is a collection of fields containing methods, aliases, or other values. A field con)J
762 883 :M
(-)S
145 901 :M
.947 .095(taining a method is called a )J
f4_15 sf
1.698 .17(method field)J
f0_15 sf
.914 .091(. A field containing an alias is called an )J
653 901 :M
f4_15 sf
1.183 .118(alias field)J
f0_15 sf
.738 .074(. A field)J
145 919 :M
.547 .055(containing any other kind of values, including procedure values, is called a )J
609 919 :M
f4_15 sf
.46 .046(\(proper\) value field)J
728 919 :M
f0_15 sf
.594 .059(. Each)J
145 937 :M
(field is identified by a )S
f4_15 sf
(field name)S
343 937 :M
f0_15 sf
(. Syntactically, an object has the form:)S
199 967 :M
f9_15 sf
({x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... ,x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(})S
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
145 1003.24 -.24 .24 288.24 1003 .24 145 1003 @a
145 1017 :M
f0_10 sf
(1)S
f0_15 sf
0 4 rm
( )S
0 -4 rm
154 1021 :M
f0_12 sf
(In the implementation, network references are generated to objects and arrays, not to each of their embedded locations.)S
145 1033 :M
(However, it is consistent and significantly simpler to carry out our discussions in terms of network references to locations.)S
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(luca; page: 7 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
731 1071 :M
f0_13 sf
(Page )S
760 1071 :M
(7)S
145 160 :M
f0_15 sf
.745 .075(where n)J
cF
f1_15 sf
.075<B3>A
sf
.745 .075(0, and )J
245 160 :M
f13_15 sf
.084<D2>A
f9_15 sf
.252(x)A
f9_10 sf
0 3 rm
.168(i)A
0 -3 rm
f13_15 sf
.084<D3>A
f0_15 sf
.643 .064( are distinct field names. \(There is no lexical distinction between field names and)J
145 178 :M
.358 .036(program identifiers.\) The terms )J
340 178 :M
f13_15 sf
<D2>S
f9_15 sf
.123(a)A
f9_10 sf
0 3 rm
.082(i)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.141 .014( are )J
f4_15 sf
.091(siblings)A
435 178 :M
f0_15 sf
.365 .036( of each other, and the object is their )J
f4_15 sf
.664 .066(host object)J
f0_15 sf
.533 .053(. Each)J
145 196 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( can be any term, including a method, or an alias.)S
172 214 :M
(A value field is, for example:)S
199 244 :M
f9_15 sf
(x => 3)S
172 272 :M
f0_15 sf
(A method field has the form:)S
199 302 :M
f9_15 sf
(x => meth\(y,y)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... ,y)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(\) b end)S
145 330 :M
f0_15 sf
.254 .025(Here, the first parameter, )J
301 330 :M
f13_15 sf
<D2>S
f9_15 sf
.104(y)A
f13_15 sf
<D3>S
f0_15 sf
.227 .023(, denotes )J
374 330 :M
f4_15 sf
.056(self)A
f0_15 sf
.244 .024(: the method\325s host object. The other parameters, for n>0, are)J
145 348 :M
.371 .037(supplied during method invocation. The body of the method is the term )J
f13_15 sf
<D2>S
f9_15 sf
.147(b)A
f13_15 sf
<D3>S
f0_15 sf
.406 .041(, which computes the result)J
145 366 :M
(of an invocation of )S
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 384 :M
(An alias field contains an alias:)S
199 414 :M
f9_15 sf
(x => alias y of b end)S
145 442 :M
f0_15 sf
.474 .047(Operations on the )J
258 442 :M
f13_15 sf
.079<D2>A
f9_15 sf
.235(x)A
f13_15 sf
.079<D3>A
f0_15 sf
.473 .047( field of this object are redirected to the )J
520 442 :M
f13_15 sf
.076<D2>A
f9_15 sf
.226(y)A
f13_15 sf
.076<D3>A
f0_15 sf
.403 .04( field of the object )J
f13_15 sf
.076<D2>A
f9_15 sf
.226(b)A
f13_15 sf
.076<D3>A
f0_15 sf
.517 .052(. The precise ef)J
762 442 :M
(-)S
145 460 :M
(fect is explained case by case in the next section.)S
172 478 :M
1.574 .157(Methods and )J
259 478 :M
1.365 .136(procedures are supported as distinct concepts. Procedures start with the keyword)J
145 496 :M
f13_15 sf
.076<D2>A
f9_15 sf
.226(proc)A
f13_15 sf
.076<D3>A
f0_15 sf
.396 .04( instead of )J
f13_15 sf
.076<D2>A
f9_15 sf
.226(meth)A
f13_15 sf
.076<D3>A
f0_15 sf
.597 .06( and have otherwise the same syntax. The main differences between the two)J
145 514 :M
.32 .032(are as follows. Methods can be manipulated as values but can be activated only when contained in ob)J
762 514 :M
(-)S
145 532 :M
.047 .005(jects, since self needs to be bound to the host object. In contrast, procedures can be activated by normal)J
145 550 :M
.884 .088(procedure call. Further, a procedure can be inserted in an object field and later recovered, while any)J
145 568 :M
(attempt to extract a method from an object results in its activation.)S
172 586 :M
.231 .023(Obliq methods are stored directly in objects, not indirectly in object classes or prototypes. Method)J
145 604 :M
.031 .003(lookup is a one-step process that searches a method by name within a single object. There is no class or)J
145 622 :M
.393 .039(delegation hierarchy to be searched iteratively, and there is no notion of )J
f4_15 sf
.118(super)A
f0_15 sf
.12 .012(. )J
629 622 :M
.309 .031(Inheritance is obtained)J
145 640 :M
1.726 .173(by cloning methods from other objects. Method lookup is implemented by a nearly constant-time)J
145 658 :M
.896 .09(caching technique, with independent caches for each operation instance, that does not penalize large)J
145 676 :M
(objects, .)S
172 694 :M
.021 .002(There are no provisions in Obliq for )J
393 694 :M
f4_15 sf
(private)S
f0_15 sf
.018 .002( fields or methods, but these can be easily simulated by)J
145 712 :M
.554 .055(lexical scoping. For example, )J
330 712 :M
f13_15 sf
.081<D2>A
f9_15 sf
.757 .076(\(var x=3; { ... }\))J
f13_15 sf
.081<D3>A
f0_15 sf
.563 .056( is an expression setting up a local variable)J
145 730 :M
f13_15 sf
<D2>S
f9_15 sf
.149(x)A
f13_15 sf
<D3>S
f0_15 sf
.316 .032( and returning an object that has )J
360 730 :M
f13_15 sf
<D2>S
f9_15 sf
.146(x)A
f13_15 sf
<D3>S
f0_15 sf
.274 .027( in its scope. Since the scope of )J
f13_15 sf
<D2>S
f9_15 sf
.146(x)A
f13_15 sf
<D3>S
f0_15 sf
.362 .036( is limited by the parentheses,)J
145 748 :M
.635 .063(no other part of the program can access )J
f13_15 sf
.095<D2>A
f9_15 sf
.286(x)A
f13_15 sf
.095<D3>A
f0_15 sf
.599 .06(. In addition, aliases can be used to create )J
669 748 :M
f4_15 sf
.132(views)A
f0_15 sf
.414 .041( of objects)J
145 766 :M
(that omit certain fields or methods.)S
145 810 :M
f2_18 sf
(2.2)S
185 810 :M
(Object Operations)S
172 838 :M
f0_15 sf
.303 .03(Apart from object creation, there are four basic operations on objects: selection/invocation, updat)J
762 838 :M
(-)S
145 856 :M
.071 .007(ing/overriding, cloning, and redirection. Field aliasing affects the semantics of all of them, as described)J
145 874 :M
(below case by case.)S
145 902 :M
f6_15 sf
(Selection \(and Invocation\))S
172 930 :M
f0_15 sf
(This operation has two variants for value selection and method invocation:)S
199 960 :M
f9_15 sf
(a.x)S
199 982 :M
(a.x\(b)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... ,b)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
<29>S
145 1010 :M
f0_15 sf
.183 .018(The first form selects a value from the field )J
412 1010 :M
f13_15 sf
<D2>S
f9_15 sf
.077(x)A
f13_15 sf
<D3>S
f0_15 sf
.071 .007( of )J
f13_15 sf
<D2>S
f9_15 sf
.077(a)A
f13_15 sf
<D3>S
f0_15 sf
.187 .019( and returns it. The second form invokes a method)J
145 1028 :M
.085 .009(from the field )J
232 1028 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
.027 .003( of )J
f13_15 sf
<D2>S
f9_15 sf
(a)S
f13_15 sf
<D3>S
f0_15 sf
.08 .008(, supplying parameters, and returning the result produced by the method; the ob)J
761 1028 :M
(-)S
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(luca; page: 8 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(8)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 160 :M
f0_15 sf
.126 .013(ject )J
171 160 :M
f13_15 sf
<D2>S
f9_15 sf
.052(a)A
f13_15 sf
<D3>S
f0_15 sf
.116 .012( is bound to the self parameter of the method. For convenience, the first form can be used for in-)J
145 178 :M
(vocation of methods with no parameters.)S
172 196 :M
2.039 .204(If the field )J
248 196 :M
f13_15 sf
.379<D2>A
f9_15 sf
1.137(x)A
f13_15 sf
.379<D3>A
f0_15 sf
1.052 .105( of )J
f13_15 sf
.379<D2>A
f9_15 sf
1.137(a)A
f13_15 sf
.379<D3>A
f0_15 sf
2.005 .201(, above, is an alias for )J
f13_15 sf
.379<D2>A
f9_15 sf
1.137(x)A
f9_10 sf
0 3 rm
.758(1)A
0 -3 rm
f13_15 sf
.379<D3>A
f0_15 sf
1.098 .11( of )J
502 196 :M
f13_15 sf
.295<D2>A
f9_15 sf
.884(a)A
f9_10 sf
0 3 rm
.589(1)A
0 -3 rm
f13_15 sf
.295<D3>A
f0_15 sf
1.401 .14(, then )J
566 196 :M
f13_15 sf
.181<D2>A
f9_15 sf
.544(a.x)A
f13_15 sf
.181<D3>A
f0_15 sf
1.127 .113( behaves like )J
f13_15 sf
.181<D2>A
f9_15 sf
.544(a)A
f9_10 sf
0 3 rm
.362(1)A
0 -3 rm
f9_15 sf
.544(.x)A
f9_10 sf
0 3 rm
.362(1)A
0 -3 rm
f13_15 sf
.181<D3>A
f0_15 sf
1.258 .126(, and)J
145 214 :M
f13_15 sf
<D2>S
f9_15 sf
.038(a.x\(b)A
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
.108 .011(, ... ,b)J
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
<29>S
f13_15 sf
<D3>S
f0_15 sf
.078 .008( behaves like )J
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
.038(.x)A
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
.038(\(b)A
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
.108 .011(, ... ,b)J
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
<29>S
f13_15 sf
<D3>S
f0_15 sf
.057 .006(. If the field )J
f13_15 sf
<D2>S
f9_15 sf
(x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.035 .003( of )J
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.071 .007( is itself an alias,)J
145 232 :M
(the process continues recursively.)S
145 260 :M
f6_15 sf
(Updating \(and Overriding\))S
172 288 :M
f0_15 sf
(This operation deals with both field update and method override:)S
199 318 :M
f9_15 sf
(a.x:=b)S
145 346 :M
f0_15 sf
.137 .014(Here the field )J
232 346 :M
f13_15 sf
<D2>S
f9_15 sf
.072(x)A
f13_15 sf
<D3>S
f0_15 sf
.067 .007( of )J
f13_15 sf
<D2>S
f9_15 sf
.072(a)A
f13_15 sf
<D3>S
f0_15 sf
.143 .014( is updated with a new value )J
458 346 :M
f13_15 sf
<D2>S
f9_15 sf
.101(b)A
f13_15 sf
<D3>S
f0_15 sf
.099 .01(. If )J
495 346 :M
f13_15 sf
<D2>S
f9_15 sf
.06(x)A
f13_15 sf
<D3>S
f0_15 sf
.129 .013( contains a method and )J
f13_15 sf
<D2>S
f9_15 sf
.06(b)A
f13_15 sf
<D3>S
f0_15 sf
.118 .012( is a method, we)J
145 364 :M
.33 .033(have method override. If )J
f13_15 sf
<D2>S
f9_15 sf
.127(x)A
f13_15 sf
<D3>S
f0_15 sf
.164 .016( and )J
f13_15 sf
<D2>S
f9_15 sf
.127(b)A
f13_15 sf
<D3>S
f0_15 sf
.318 .032( are ordinary values, we have field update. The other two possibili)J
762 364 :M
(-)S
145 382 :M
(ties are also allowed: a field can be turned into a method \(of zero arguments\), and vice versa.)S
172 400 :M
.526 .053(However, if the field )J
f13_15 sf
.076<D2>A
f9_15 sf
.228(x)A
f13_15 sf
.076<D3>A
f0_15 sf
.211 .021( of )J
f13_15 sf
.076<D2>A
f9_15 sf
.228(a)A
f13_15 sf
.076<D3>A
f0_15 sf
.337 .034( is an alias for )J
445 400 :M
f13_15 sf
.054<D2>A
f9_15 sf
.161(x)A
f9_10 sf
0 3 rm
.107(1)A
0 -3 rm
f13_15 sf
.054<D3>A
f0_15 sf
.149 .015( of )J
f13_15 sf
.054<D2>A
f9_15 sf
.161(a)A
f9_10 sf
0 3 rm
.107(1)A
0 -3 rm
f13_15 sf
.054<D3>A
f0_15 sf
.245 .025(, then )J
f13_15 sf
.054<D2>A
f9_15 sf
.161(a.x:=b)A
f13_15 sf
.054<D3>A
f0_15 sf
.341 .034( behaves like )J
690 400 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(.x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(:=b)S
f13_15 sf
<D3>S
f0_15 sf
(,)S
145 418 :M
(and so on recursively.)S
145 446 :M
f6_15 sf
(Cloning)S
172 474 :M
f0_15 sf
(The third operation is object cloning, generalized to multiple objects:)S
199 504 :M
f9_15 sf
(clone\(a\))S
199 526 :M
(clone\(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... ,a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
<29>S
145 554 :M
f0_15 sf
.959 .096(In the case of a single argument, a new object is created with the same field names as the argument)J
145 572 :M
.231 .023(object; the respective locations are initialized to the values, methods, or aliases of the argument object.)J
145 590 :M
.89 .089(Note that this operation cannot be simulated by hand, because any attempt to extract the methods or)J
145 608 :M
(aliases of an object activates them.)S
172 626 :M
.835 .083(In the case of multiple arguments, a single object is produced that contains the values, methods,)J
145 644 :M
.171 .017(and aliases of all the argument objects \(an error is given if there are field name conflicts\). Useful situa)J
762 644 :M
(-)S
145 662 :M
4.026 .403(tions are )J
212 662 :M
f13_15 sf
.219<D2>A
f9_15 sf
.656(clone\(a,{...}\))A
f13_15 sf
.219<D3>A
f0_15 sf
1.228 .123(, where we )J
f4_15 sf
.486(inherit)A
470 662 :M
f0_15 sf
4.323 .432( the fields of )J
573 662 :M
f13_15 sf
.533<D2>A
f9_15 sf
1.596(a)A
f13_15 sf
.533<D3>A
f0_15 sf
3.584 .358(, and add new fields, and)J
145 680 :M
f13_15 sf
<D2>S
f9_15 sf
(clone\(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(,a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
<29>S
f13_15 sf
<D3>S
f0_15 sf
(, where we )S
f4_15 sf
(multiply inherit)S
415 680 :M
f0_15 sf
( from )S
452 680 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( and )S
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 698 :M
.958 .096(It is common for the parameters of )J
394 698 :M
f13_15 sf
.085<D2>A
f9_15 sf
.255(clone)A
f13_15 sf
.085<D3>A
f0_15 sf
.283 .028( to be )J
f4_15 sf
.199(prototypes)A
550 698 :M
f0_15 sf
.423 .042( \(or )J
f4_15 sf
.3(classes)A
620 698 :M
f0_15 sf
.82 .082(\): by convention, proto)J
762 698 :M
(-)S
145 716 :M
.326 .033(types are objects that are meant only as repositories for methods and initial values. Via cloning, proto)J
762 716 :M
(-)S
145 734 :M
(types act as object generators; cloning a prototype corresponds to )S
541 734 :M
f4_15 sf
(newing)S
f0_15 sf
( an object.)S
172 752 :M
.146 .015(A )J
187 752 :M
f4_15 sf
.116 .012(partial prototype)J
f0_15 sf
.031 .003( \(or )J
f4_15 sf
.026(mixin)A
348 752 :M
f0_15 sf
.044 .004(, or )J
f4_15 sf
.162 .016(abstract class)J
f0_15 sf
.103 .01(\) is a prototype whose methods refer through self to)J
145 770 :M
(fields not in the prototype. Obviously, a partial prototype should never be used as an object or an object)S
145 788 :M
(generator. However, one can clone partial prototypes together to obtain complete working objects.)S
172 806 :M
(Cloning can also be applied to objects used in computations. In particular, self can be cloned.)S
145 834 :M
f6_15 sf
(Redirection)S
172 862 :M
f0_15 sf
.103 .01(Our final operation is redirection, which is the replacement of fields with )J
616 862 :M
.103 .01(aliases. In section 2.1 we)J
145 880 :M
(have seen how to initialize alias fields:)S
199 910 :M
f9_15 sf
({ x => alias y of b end, ... })S
145 938 :M
f0_15 sf
.243 .024(Moreover, it is possible to assign aliases to fields of existing objects with the following redirection op)J
762 938 :M
(-)S
145 956 :M
(eration \(the syntax is similar to update, but this is really a separate operation\):)S
199 986 :M
f9_15 sf
(a.x := alias y of b end)S
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(luca; page: 9 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
731 1071 :M
f0_13 sf
(Page )S
760 1071 :M
(9)S
145 160 :M
f0_15 sf
.721 .072(Any further operation on )J
f13_15 sf
.092<D2>A
f9_15 sf
.275(x)A
f13_15 sf
.092<D3>A
f0_15 sf
.266 .027( of )J
339 160 :M
f13_15 sf
.118<D2>A
f9_15 sf
.353(a)A
f13_15 sf
.118<D3>A
f0_15 sf
.654 .065( is redirected to )J
f13_15 sf
.118<D2>A
f9_15 sf
.353(y)A
f13_15 sf
.118<D3>A
f0_15 sf
.341 .034( of )J
491 160 :M
f13_15 sf
.054<D2>A
f9_15 sf
.16(b)A
f13_15 sf
.054<D3>A
f0_15 sf
.495 .049(. However, redirection replaces fields with)J
145 178 :M
.005 0(aliases regardless of whether those fields are already aliased; updating )J
570 178 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
( of )S
f13_15 sf
<D2>S
f9_15 sf
(a)S
f13_15 sf
<D3>S
f0_15 sf
( again with another alias)S
145 196 :M
(causes )S
188 196 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
( of )S
223 196 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f13_15 sf
<D3>S
f0_15 sf
( \(not )S
270 196 :M
f13_15 sf
<D2>S
f9_15 sf
(y)S
f13_15 sf
<D3>S
f0_15 sf
( of )S
305 196 :M
f13_15 sf
<D2>S
f9_15 sf
(b)S
f13_15 sf
<D3>S
f0_15 sf
(\) to be updated.)S
172 214 :M
(A special redirection construct can be used to redirect whole objects at once:)S
199 244 :M
f9_15 sf
(redirect a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( to a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( end)S
145 272 :M
f0_15 sf
1.267 .127(The effect is to replace every field )J
f13_15 sf
.194<D2>A
f9_15 sf
.583(x)A
f9_10 sf
0 3 rm
.388(i)A
0 -3 rm
f13_15 sf
.194<D3>A
f0_15 sf
.563 .056( of )J
412 272 :M
f13_15 sf
.14<D2>A
f9_15 sf
.419(a)A
f9_10 sf
0 3 rm
.279(1)A
0 -3 rm
f13_15 sf
.14<D3>A
f0_15 sf
1.005 .101( \(including alias fields\) with )J
615 272 :M
f13_15 sf
.154<D2>A
f9_15 sf
.462(alias)A
f0_15 sf
.175 .018( )J
f9_15 sf
.462(x)A
f9_10 sf
0 3 rm
.308(i)A
0 -3 rm
f0_15 sf
.193 .019( )J
689 272 :M
f9_15 sf
.802(of)A
f0_15 sf
.304 .03( )J
f9_15 sf
.802(a)A
f9_10 sf
0 3 rm
.535(2)A
0 -3 rm
f0_15 sf
.334 .033( )J
733 272 :M
f9_15 sf
(end)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 290 :M
(Cloning can be used to assemble compound redirected objects.)S
172 308 :M
.501 .05(Aliases and redirection must be used very carefully and, in most circumstances, are best avoided.)J
145 326 :M
.784 .078(However, redirection is already implicit in the notion of )J
496 326 :M
f4_15 sf
1.259 .126(local surrogate)J
f0_15 sf
.668 .067( of a remote object: we have)J
145 344 :M
2.545 .255(simply lifted this mechanism to the language level. By doing this, we are able to put network)J
145 362 :M
(redirection under flexible program control, as shown later in the case of object migration.)S
145 406 :M
f2_18 sf
(2.3)S
185 406 :M
(Simple Examples)S
172 434 :M
f0_15 sf
.513 .051(Let us examine some simple examples, just to became familiar with the Obliq syntax and seman)J
762 434 :M
(-)S
145 452 :M
(tics. More advanced examples are presented in sections 4 and 5.)S
172 470 :M
1.133 .113(The following object has a single method that invokes itself through self \(the )J
661 470 :M
f13_15 sf
.107<D2>A
f9_15 sf
.321(s)A
f13_15 sf
.107<D3>A
f0_15 sf
.94 .094( parameter\). A)J
145 488 :M
f13_15 sf
<D2>S
f9_15 sf
(let)S
f13_15 sf
<D3>S
f0_15 sf
( declaration binds the object to the identifier )S
f13_15 sf
<D2>S
f9_15 sf
(o)S
f13_15 sf
<D3>S
f0_15 sf
(:)S
199 518 :M
f9_15 sf
(let o =)S
199 540 :M
(  { x => meth\(s\) s.x\(\) end };)S
145 568 :M
f0_15 sf
.323 .032(An invocation of )J
252 568 :M
f13_15 sf
<D2>S
f9_15 sf
.097(o.x\(\))A
f13_15 sf
<D3>S
f0_15 sf
.266 .027( results in a divergent computation. Divergence is obtained here without any)J
145 586 :M
(explicit use of recursion: the self-application implicit in method invocation is sufficient.)S
172 604 :M
.402 .04(The object below has three components. \(1\) A value field )J
527 604 :M
f13_15 sf
<D2>S
f9_15 sf
.144(x)A
f13_15 sf
<D3>S
f0_15 sf
.268 .027(. \(2\) A method )J
f13_15 sf
<D2>S
f9_15 sf
.144(inc)A
f13_15 sf
<D3>S
f0_15 sf
.438 .044( that increments)J
145 622 :M
f13_15 sf
.061<D2>A
f9_15 sf
.183(x)A
f13_15 sf
.061<D3>A
f0_15 sf
.403 .04( through self, and returns self. \(3\) A method )J
434 622 :M
f13_15 sf
<D2>S
f9_15 sf
.14(next)A
f13_15 sf
<D3>S
f0_15 sf
.285 .028( that invokes )J
f13_15 sf
<D2>S
f9_15 sf
.14(inc)A
f13_15 sf
<D3>S
f0_15 sf
.34 .034( through self, and returns the)J
145 640 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
( component of the result.)S
199 670 :M
f9_15 sf
(let o =)S
199 692 :M
(  { x => 3,)S
199 714 :M
(    inc => meth\(s,y\) s.x := s.x+y; s end,)S
199 736 :M
(    next => meth\(s\) s.inc\(1\).x end };)S
145 764 :M
f0_15 sf
(Here are some of the operations that can be performed on )S
494 764 :M
f13_15 sf
<D2>S
f9_15 sf
(o)S
f13_15 sf
<D3>S
f0_15 sf
(:)S
199 794 :M
f9_15 sf
(o.x)S
307 794 :M
f0_15 sf
(Selecting the )S
389 794 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
( component, producing 3.)S
199 816 :M
f9_15 sf
(o.x := 0)S
307 816 :M
f0_15 sf
(Setting the )S
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
( component to zero.)S
199 838 :M
f9_15 sf
(o.inc\(1\) )S
307 838 :M
f0_15 sf
(Invoking a method, with parameters.)S
199 860 :M
f9_15 sf
(o.next\(\))S
307 860 :M
f0_15 sf
(Invoking a method with no parameters \()S
548 860 :M
f9_15 sf
(o.next)S
f0_15 sf
( is also valid\).)S
199 882 :M
f9_15 sf
(o.next := meth\(s\) clone\(s\).inc\(1\).x end)S
307 904 :M
f0_15 sf
(Overriding )S
377 904 :M
f13_15 sf
<D2>S
f9_15 sf
(next)S
f13_15 sf
<D3>S
f0_15 sf
( so that it no longer modifies its host object.)S
145 960 :M
f2_21 sf
(3.)S
172 960 :M
(Remote Objects)S
172 989 :M
f0_15 sf
1.118 .112(In this section we revisit the Obliq primitives in the context of objects that are distributed over)J
145 1007 :M
(multiple sites. We discuss )S
305 1007 :M
(distributed state in general, including arrays and variables.)S
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(luca; page: 10 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(10)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 159 :M
f2_18 sf
(3.1)S
185 159 :M
(State)S
172 187 :M
f0_15 sf
.599 .06(State is local in the sense that every location is forever bound to a site. At the same time, state is)J
145 205 :M
.52 .052(distributed, in the sense that there are many communicating sites. Every location at every site can po)J
762 205 :M
(-)S
145 223 :M
.923 .092(tentially be accessed and modified over the network. Moreover, values may contain embedded loca)J
762 223 :M
(-)S
145 241 :M
.646 .065(tions belonging to current site or, via network aliases, to remote sites. Access and update of a remote)J
145 259 :M
.558 .056(location involves network communication, but is otherwise handled transparently in the same manner)J
145 277 :M
(as access and update of a local location.)S
172 295 :M
(There are three kinds of entities in Obliq that directly contain locations, and hence have state:)S
199 325 :M
(objects:)S
280 325 :M
f9_15 sf
({x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... ,x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(})S
307 347 :M
f0_15 sf
(every field of an object has state)S
334 369 :M
(access: )S
415 369 :M
f9_15 sf
(a.x)S
f0_15 sf
(,)S
469 369 :M
( )S
523 369 :M
f9_15 sf
(a.x\(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... ,a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
<29>S
334 391 :M
f0_15 sf
(update: )S
415 391 :M
f9_15 sf
(a.x := b)S
f0_15 sf
(,)S
496 391 :M
( )S
523 391 :M
f9_15 sf
(redirect a to b end)S
199 422 :M
f0_15 sf
(arrays:)S
280 422 :M
f9_15 sf
([a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... , a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(])S
307 444 :M
f0_15 sf
(every element of an array has state)S
334 466 :M
(access: )S
415 466 :M
f9_15 sf
(a[n])S
334 488 :M
f0_15 sf
(update: )S
415 488 :M
f9_15 sf
(a[n] := b)S
199 519 :M
f0_15 sf
(variables:)S
280 519 :M
f9_15 sf
(var x = a)S
307 541 :M
f0_15 sf
(variables have state \(identifiers declared by )S
f13_15 sf
<D2>S
f9_15 sf
(let)S
f13_15 sf
<D3>S
f0_15 sf
( do not\))S
334 563 :M
(access: )S
415 563 :M
f9_15 sf
(x)S
334 585 :M
f0_15 sf
(update: )S
415 585 :M
f9_15 sf
(x := b)S
172 613 :M
f0_15 sf
.32 .032(When objects, arrays, and variables are created during a computation, their locations are allocated)J
145 631 :M
(at the current site.)S
145 675 :M
f2_18 sf
(3.2)S
185 675 :M
(Transmission)S
172 703 :M
f0_15 sf
.121 .012(As discussed in the introduction, the state \(i.e. set of locations\) associated with objects, arrays, and)J
145 721 :M
.908 .091(variables is never duplicated or transmitted over the network. Network references to locations, how)J
762 721 :M
(-)S
145 739 :M
.329 .033(ever, are free to travel. Every attempted transmission of a location over the network is, in effect, inter)J
762 739 :M
(-)S
145 757 :M
.404 .04(cepted and replaced by the transmission of a network reference to that location. Remote operations on)J
145 775 :M
(these network references are reflected back to the original locations, as described in section 3.3.)S
172 793 :M
.932 .093(Stateless values, unlike locations, are copied when transmitted over the network. Structures that)J
145 811 :M
(are copied include basic data types and the internal representations of program text.)S
172 829 :M
.617 .062(In the general case of transmission we may have a mixed situation, with a few layers of stateless)J
145 847 :M
1.277 .128(data structures that end up referring to location. These data structures with embedded locations are)J
145 865 :M
(copied up to the point where they refer to locations; then network references are generated.)S
172 883 :M
.488 .049(A critical issue is the transmission of )J
403 883 :M
f4_15 sf
(closures)S
453 883 :M
f0_15 sf
.462 .046(, which are the values resulting from the evaluation)J
145 901 :M
.02 .002(of procedures and methods. A closure consists of two parts: \(1\) the internal representation of the source)J
145 919 :M
.263 .026(text of a method or procedure, and \(2\) a table associating free identifiers in the source text to their val)J
762 919 :M
(-)S
145 937 :M
(ues in the lexical scope of evaluation.)S
172 955 :M
.489 .049(The free-identifiers table within a closure may refer to variables and to values with embedded lo)J
762 955 :M
(-)S
145 973 :M
.111 .011(cations. The general rule for transmitting structures with embedded locations applies to closures; hence)J
145 991 :M
(closures are copied up to the locations embedded in their free-identifier tables.)S
172 1009 :M
.981 .098(For example, consider the following Obliq code, declaring a variable )J
606 1009 :M
f13_15 sf
.151<D2>A
f9_15 sf
.454(x)A
f13_15 sf
.151<D3>A
f0_15 sf
.929 .093( initialized to )J
709 1009 :M
f13_15 sf
.181<D2>A
f9_15 sf
.543(0)A
f13_15 sf
.181<D3>A
f0_15 sf
.918 .092(, and a)J
145 1027 :M
(procedure )S
209 1027 :M
f13_15 sf
<D2>S
f9_15 sf
(p)S
f13_15 sf
<D3>S
f0_15 sf
( whose body refers to )S
357 1027 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
( \(that is, has )S
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
( as a free identifier\):)S
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(luca; page: 11 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(11)S
199 172 :M
f9_15 sf
(var x = 0;)S
199 194 :M
(let p = proc\(\) x := x+1 end;)S
172 222 :M
f0_15 sf
.098 .01(Suppose that, after the execution of the first line, the variable )J
544 222 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
.096 .01( is bound to the location loc)J
727 225 :M
f0_10 sf
(0)S
f0_15 sf
0 -3 rm
.088 .009(, rela-)J
0 3 rm
145 240 :M
.433 .043(tive to the current site s)J
289 243 :M
f0_10 sf
.099(0)A
f0_15 sf
0 -3 rm
.409 .041(. Then, after the execution of the second line, the identifier )J
0 3 rm
657 240 :M
f13_15 sf
.072<D2>A
f9_15 sf
.217(p)A
f13_15 sf
.072<D3>A
f0_15 sf
.405 .041( is bound to the)J
145 258 :M
(closure:)S
199 288 :M
<D2>S
206 288 :M
f9_15 sf
(proc\(\) x := x+1 end)S
f0_15 sf
<D3>S
f9_15 sf
(  )S
f4_15 sf
(where)S
438 288 :M
f9_15 sf
(  x)S
f0_15 sf
( )S
469 288 :M
f13_15 sf
(7)S
f0_15 sf
( loc)S
f0_10 sf
0 3 rm
(0)S
0 -3 rm
145 316 :M
f0_15 sf
.709 .071(where \322)J
f9_15 sf
.231(proc)A
f0_15 sf
.144(...)A
242 316 :M
f9_15 sf
.477(end)A
f0_15 sf
1.314 .131(\323 represents the internal representation of program code, and the free identifier)J
145 334 :M
(table is shown following )S
297 334 :M
f4_15 sf
(where)S
f0_15 sf
(.)S
172 352 :M
.059 .006(Upon transmission to a site s)J
f0_10 sf
0 3 rm
(1)S
0 -3 rm
f0_15 sf
.056 .006(, the location loc)J
f0_10 sf
0 3 rm
(0)S
0 -3 rm
f0_15 sf
.057 .006( is replaced by a network reference <s)J
684 355 :M
f0_10 sf
(0)S
f0_15 sf
0 -3 rm
(,loc)S
0 3 rm
f0_10 sf
(0)S
f0_15 sf
0 -3 rm
.038 .004(> to that)J
0 3 rm
145 370 :M
(location; therefore site s)S
290 373 :M
f0_10 sf
(1)S
f0_15 sf
0 -3 rm
( receives the data structure)S
0 3 rm
455 366 :M
f0_10 sf
(2)S
f0_15 sf
0 4 rm
(:)S
0 -4 rm
199 400 :M
<D2>S
206 400 :M
f9_15 sf
(proc\(\) x := x+1 end)S
f0_15 sf
<D3>S
f9_15 sf
( )S
f4_15 sf
(where)S
429 400 :M
f0_15 sf
( )S
433 400 :M
f9_15 sf
(x)S
f0_15 sf
( )S
446 400 :M
f13_15 sf
(7)S
f0_15 sf
( <s)S
f0_10 sf
0 3 rm
(0)S
0 -3 rm
f0_15 sf
(,loc)S
f0_10 sf
0 3 rm
(0)S
0 -3 rm
f0_15 sf
(>)S
172 428 :M
.318 .032(In general terms, a closure is a pair consisting of a piece of source text and a pointer to an evalua)J
762 428 :M
(-)S
145 446 :M
.643 .064(tion stack. Transmission of a closure, in this view, implies transmission of an entire evaluation stack.)J
145 464 :M
.158 .016(The implementation of closures described above \(which is well-known for higher-order languages\) has)J
145 482 :M
.966 .097(the effect of reducing network traffic, by transmitting only the values from the evaluation stack that)J
145 500 :M
(may be needed by the closure. This optimization is enabled by lexical scoping)S
145 544 :M
f2_18 sf
(3.3)S
185 544 :M
(Distributed Computation)S
172 572 :M
f0_15 sf
.595 .059(We now reinterpret the semantics of operations on objects in the case of remote objects. In pass)J
761 572 :M
(-)S
145 590 :M
(ing, we comment on the semantics of remote arrays and variables.)S
145 618 :M
f6_15 sf
(Selection \(and Invocation\))S
172 646 :M
f0_15 sf
.251 .025(When a value field of a remote object is selected, its value is transmitted over the network \(as dis)J
762 646 :M
(-)S
145 664 :M
(cussed in section 3.2\) to the site of the selection.)S
172 682 :M
(The extraction of a remote array element and the access of a remote variable work similarly.)S
172 700 :M
.598 .06(When a method of a remote object is invoked, the arguments are transmitted over the network to)J
145 718 :M
.337 .034(the remote site, the result is computed remotely, and the final value \(or error, or exception\) is returned)J
145 736 :M
(to the site of the invocation.)S
172 754 :M
.543 .054(It is interesting to compare the invocation of a remote method with the invocation of a procedure)J
145 772 :M
.813 .081(stored in the value field of a remote object. In the first case, the computation is remote, as described)J
145 790 :M
.281 .028(above. In the second case, the procedure is first transmitted from the remote object to the local site, by)J
145 808 :M
(the semantics of field selection, and then executed locally.)S
145 836 :M
f6_15 sf
(Updating \(and Overriding\))S
172 864 :M
f0_15 sf
.231 .023(When a field of a remote object is updated, or when a method is overridden, a value is transmitted)J
145 882 :M
.626 .063(over the network and installed into the remote object. Field update may involve the transmission of a)J
145 900 :M
(procedure closure, and method override involves the transmission of a method closure.)S
172 918 :M
(The update of a remote array element and the assignment of a remote variable work similarly.)S
145 946 :M
f6_15 sf
(Cloning)S
172 974 :M
f0_15 sf
.006 .001(When a collection of remote or local objects is cloned, the clone is created at the local site. Its con)J
761 974 :M
(-)S
145 992 :M
(tents \(including method closures\) may have to be fetched over the network.)S
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
145 1014.24 -.24 .24 288.24 1014 .24 145 1014 @a
145 1028 :M
f0_10 sf
(2)S
f0_15 sf
0 4 rm
( )S
0 -4 rm
154 1032 :M
f0_12 sf
(In the implementation, loc)S
f0_10 sf
0 3 rm
(0)S
0 -3 rm
f0_12 sf
( is a Modula-3 network object with access and update methods.)S
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(luca; page: 12 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(12)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
172 160 :M
f0_15 sf
(The extraction of remote subarrays and the concatenation of remote arrays work similarly.)S
145 188 :M
f6_15 sf
(Redirection)S
172 216 :M
f0_15 sf
.683 .068(In the case where the object being redirected is remote, the remote fields are replaced by the ap)J
761 216 :M
(-)S
145 234 :M
(propriate aliases. In the case where the other object is remote, aliases are generated to it.)S
145 262 :M
f6_15 sf
(Aliases)S
172 290 :M
f0_15 sf
1.225 .122(A local object field aliased to a remote object behaves as the field of the remote object, as de)J
762 290 :M
(-)S
145 308 :M
(scribed in this section case by case.)S
145 352 :M
f2_18 sf
(3.4)S
185 352 :M
(Self-inflicted Operations)S
172 380 :M
f0_15 sf
.266 .027(The four basic object operations can be performed either as external operations on an object, or as)J
145 398 :M
-.006(internal operations through self. This distinction is useful in the contexts of object protection and serial)A
762 398 :M
(-)S
145 416 :M
(ization, discussed in the next two sections.)S
172 434 :M
.566 .057(When a method operates on an object other than the method\325s host object, we say that the opera)J
762 434 :M
(-)S
145 452 :M
.29 .029(tion is )J
f4_15 sf
.122(external)A
f0_15 sf
.402 .04( to the object. By contrast, when a method operates directly on its own self we say that)J
145 470 :M
(the operation is )S
f4_15 sf
(self-inflicted)S
316 470 :M
f0_15 sf
(:)S
199 500 :M
(If )S
213 500 :M
f13_15 sf
<D2>S
f4_15 sf
(op)S
f13_15 sf
<D3>S
f0_15 sf
( is either a select, update, clone, or redirect operation,)S
226 522 :M
(then )S
256 522 :M
f13_15 sf
<D2>S
f4_15 sf
(op)S
f0_15 sf
<28>S
279 522 :M
f9_15 sf
(o)S
f0_15 sf
<29>S
293 522 :M
f13_15 sf
<D3>S
f0_15 sf
( is )S
f4_15 sf
(self-inflicted)S
226 544 :M
f0_15 sf
(iff )S
244 544 :M
f13_15 sf
<D2>S
f9_15 sf
(o)S
f13_15 sf
<D3>S
f0_15 sf
( is the same object as the self of the )S
476 544 :M
f4_15 sf
(current method)S
f0_15 sf
( \(if any\).)S
199 566 :M
(Moreover, )S
266 566 :M
f13_15 sf
<D2>S
f4_15 sf
(op)S
f0_15 sf
<28>S
289 566 :M
f9_15 sf
(o)S
f0_15 sf
<29>S
303 566 :M
f13_15 sf
<D3>S
f0_15 sf
( is )S
f4_15 sf
(external)S
f0_15 sf
( iff it is not self-inflicted.)S
145 594 :M
.251 .025(Here, by the )J
224 594 :M
f4_15 sf
.376 .038(current method)J
f0_15 sf
.205 .02( we mean the last method that was invoked in the current thread of control)J
145 612 :M
.861 .086(and that has not yet returned. Procedure calls do not change or mask the current method, even when)J
145 630 :M
(they have not yet returned.)S
172 648 :M
.731 .073(Whether an operation is self-inflicted can be determined by a simple run-time test. Consider, for)J
145 666 :M
(example the object:)S
199 696 :M
f9_15 sf
({ p => meth\(s\) s.q.x end,  q => ... })S
145 724 :M
f0_15 sf
.462 .046(Here the operation )J
263 724 :M
f13_15 sf
.072<D2>A
f9_15 sf
.216(s.q)A
f13_15 sf
.072<D3>A
f0_15 sf
.495 .049( is self-inflicted, since )J
f13_15 sf
.072<D2>A
f9_15 sf
.216(s)A
f13_15 sf
.072<D3>A
f0_15 sf
.337 .034( is self. But the )J
548 724 :M
f13_15 sf
.053<D2>A
f9_15 sf
.159(.x)A
f13_15 sf
.053<D3>A
f0_15 sf
.32 .032( operation in )J
f13_15 sf
.053<D2>A
f9_15 sf
.159(s.q.x)A
f13_15 sf
.053<D3>A
f0_15 sf
.329 .033( is self-in)J
762 724 :M
(-)S
145 742 :M
(flicted depending on whether )S
f13_15 sf
<D2>S
f9_15 sf
(s.q)S
f13_15 sf
<D3>S
f0_15 sf
( returns self; in general this can be determined only at run-time.)S
172 760 :M
.615 .061(If we replace )J
257 760 :M
f13_15 sf
.068<D2>A
f9_15 sf
.205(s.q)A
f13_15 sf
.068<D3>A
f0_15 sf
.418 .042( with a procedure call )J
f13_15 sf
.068<D2>A
f9_15 sf
.205(p\(s\))A
f13_15 sf
.068<D3>A
f0_15 sf
.531 .053( which simply performs )J
f13_15 sf
.068<D2>A
f9_15 sf
.205(s.q)A
f13_15 sf
.068<D3>A
f0_15 sf
.325 .033(, then )J
692 760 :M
f13_15 sf
.073<D2>A
f9_15 sf
.218(s.q)A
f13_15 sf
.073<D3>A
f0_15 sf
.346 .035( is still)J
145 778 :M
.163 .016(self-inflicted, and )J
f13_15 sf
<D2>S
f9_15 sf
.064(p\(s\).x)A
313 778 :M
f13_15 sf
<D3>S
f0_15 sf
.291 .029( may still be. The notion of \322self\323 for self-inflicted operations is preserved)J
145 796 :M
(through procedure calls, but not through external method invocations or thread creation.)S
145 840 :M
f2_18 sf
(3.5)S
185 840 :M
(Protected Objects)S
172 868 :M
f0_15 sf
.394 .039(It is useful to protect objects against certain external operations, to safeguard their internal invari)J
762 868 :M
(-)S
145 886 :M
.832 .083(ants. Protection is particularly important, for example, to prevent clients from overriding methods of)J
145 904 :M
.991 .099(network services, or from cloning servers. Still, protected objects should be allowed to modify their)J
145 922 :M
(own state and to clone themselves.)S
172 940 :M
.463 .046(This is where the notion of self-inflicted operations first becomes useful. A )J
636 940 :M
f4_15 sf
.111(protected)A
f0_15 sf
.303 .03( object is an)J
145 958 :M
.395 .039(object that rejects external update, cloning, and redirection operations, but that admits such operations)J
145 976 :M
(when they are self-inflicted. Objects can be declared protected, as shown below:)S
199 1006 :M
f9_15 sf
({ protected, x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... , x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( })S
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(luca; page: 13 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(13)S
145 160 :M
f0_15 sf
.275 .028(Therefore, for example, methods of a protected object can update sibling fields through self, but exter)J
762 160 :M
(-)S
145 178 :M
(nal operations cannot modify such fields.)S
172 196 :M
.678 .068(Note that a protection mechanism based on individual \322private\323 fields would not address protec)J
761 196 :M
(-)S
145 214 :M
(tion against cloning and redirection.)S
145 258 :M
f2_18 sf
(3.6)S
185 258 :M
(Serialized Objects)S
172 286 :M
f0_15 sf
.305 .03(An Obliq server object can be accessed concurrently by multiple remote client threads. Moreover,)J
145 304 :M
.783 .078(local concurrent threads may be created explicitly. To prevent race conditions, it must be possible to)J
145 322 :M
(serialize access to objects and other entities with state.)S
172 340 :M
.051 .005(We say that an object is )J
f4_15 sf
.019(serialized)A
378 340 :M
f0_15 sf
.066 .007( when \(1\) in presence of multiple threads, at most one method of)J
145 358 :M
1.093 .109(the object can be executing at any given time, but still \(2\) a method may call a sibling through self)J
145 376 :M
.931 .093(without deadlock. Note that requirement \(2\) does not contradict invariant \(1\), because an invocation)J
145 394 :M
(through self suspends a method before activating a sibling.)S
172 412 :M
.439 .044(The obvious approach to implementing serialized objects, adopted by many concurrent languages)J
145 430 :M
.699 .07(is to associate )J
f4_15 sf
.255(mutexes)A
f0_15 sf
.763 .076( with objects \(for example, see )J
480 430 :M
.73 .073([Bal, Kaashoek, Tanenbaum 1992]\). Such mu-)J
145 448 :M
.368 .037(texes are locked when a method of an object is invoked, and unlocked when the method returns, guar)J
762 448 :M
(-)S
145 466 :M
.106 .011(anteeing condition \(1\). This way, however, we have a deadlock whenever a method calls a sibling, vio)J
762 466 :M
(-)S
145 484 :M
.481 .048(lating condition \(2\). We find this behavior unacceptable because it causes innocent programs to dead)J
762 484 :M
(-)S
145 502 :M
.349 .035(lock without good reason. In particular, an object that works well sequentially may suddenly deadlock)J
145 520 :M
.607 .061(when a mutex is added. \([Brewer, Waldspurger 1992])J
475 520 :M
.649 .065( gives an overview of previous solutions to this)J
145 538 :M
(problem.\))S
172 556 :M
.912 .091(A way to satisfy condition \(2\) is to use reentrant mutexes, that is, mutexes that do not deadlock)J
145 574 :M
.188 .019(when re-locked by the \322same\323 thread \(for example, see )J
482 574 :M
.147 .015([Fort\216 1994])J
558 574 :M
.198 .02(\). On one hand, this solution is too)J
145 592 :M
.18 .018(liberal, because it allows a method to call an arbitrary method of a different object, which then can call)J
145 610 :M
.21 .021(back a method of the present object without deadlocking. This goes well beyond our simple desire that)J
145 628 :M
.651 .065(a method should be allowed to call its siblings: it may make objects vulnerable to unexpected activa)J
762 628 :M
(-)S
145 646 :M
.881 .088(tions of their own methods, when other methods have not yet finished reestablishing the object\325s in)J
762 646 :M
(-)S
145 664 :M
1.391 .139(variants. On the other hand, this solution may also be too restrictive because the notion of \322same\323)J
145 682 :M
.754 .075(thread is normally restricted to an address space. If we want to consider control threads as extending)J
145 700 :M
(across sites, then an implementation of reentrant locks might not behave appropriately.)S
172 718 :M
.373 .037(We solve this dilemma by adopting an intermediate locking strategy, which we call )J
f4_15 sf
.52 .052(self serializa)J
761 718 :M
(-)S
145 736 :M
(tion)S
f0_15 sf
(, based on the notion of self-inflicted operations described in section 3.4.)S
172 754 :M
.242 .024(Serialized objects have an implicit associated mutex, called the object mutex. An object mutex se)J
762 754 :M
(-)S
145 772 :M
.584 .058(rializes the execution of selection, update, cloning, and redirection operations on its host object. Here)J
145 790 :M
(are the simple rules of acquisition of these object mutexes:)S
199 820 :M
f13_15 sf
<A2>S
212 820 :M
f0_15 sf
(External operations always acquire the mutex of an object, and release it on completion.)S
199 842 :M
f13_15 sf
<A2>S
212 842 :M
f0_15 sf
(Self-inflicted operations never acquire the mutex of their object.)S
145 870 :M
.352 .035(Note that a self-inflicted operation can happen only after the activation of an external operation on the)J
145 888 :M
.839 .084(object that is executed by the same thread. The external operation has therefore already acquired the)J
145 906 :M
(mutex.)S
172 924 :M
(The serialization attribute of an object is specified as follows:)S
199 954 :M
f9_15 sf
({ serialized, x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... ,x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( })S
145 982 :M
f0_15 sf
.08 .008(With self-serialization, a method can modify the state of its host object and can invoke siblings without)J
145 1000 :M
.596 .06(deadlocking. A deadlock still occurs if, for example, a method invokes a method of a different object)J
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(luca; page: 14 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(14)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 160 :M
f0_15 sf
.948 .095(that then attempts an operation on the original serialized object. A deadlock occurs also if a method)J
145 178 :M
(forks an invocation of a sibling and waits on the result.)S
172 196 :M
.55 .055(Our form of object serialization solves common mutual exclusion problems, for example for net)J
761 196 :M
(-)S
145 214 :M
.95 .095(work servers maintaining some simple internal state. More complex situations require both sophisti)J
762 214 :M
(-)S
145 232 :M
.766 .077(cated uses of explicit mutexes, and conditional synchronization \(where threads wait on )J
f4_15 sf
.21(conditions)A
750 232 :M
f0_15 sf
1.228 .123( in)J
145 250 :M
.876 .088(addition to mutexes\). Because of these more complex situations, Obliq supports the full spectrum of)J
145 268 :M
.779 .078(Modula-3 threads primitives )J
324 268 :M
.837 .084([Birrell 1991; Horning, )J
472 268 :M
f4_15 sf
.681 .068(et al.)J
f0_15 sf
.916 .092( 1993] some through an external interface,)J
145 286 :M
(and some directly in the syntax.)S
172 304 :M
-.008(Conditional synchronization can be used also with the implicit object mutexes. A new condition )A
f13_15 sf
<D2>S
f11_15 sf
(c)S
f13_15 sf
<D3>S
145 322 :M
f0_15 sf
1.103 .11(can be created by )J
260 322 :M
f13_15 sf
.092<D2>A
f9_15 sf
.276(condition\(\))A
f13_15 sf
.092<D3>A
f0_15 sf
.556 .056( and signaled by )J
473 322 :M
f13_15 sf
.085<D2>A
f9_15 sf
.253(signal\()A
f11_15 sf
.253(c)A
f9_15 sf
.253<29>A
f13_15 sf
.085<D3>A
f0_15 sf
.452 .045(. A special )J
f13_15 sf
.085<D2>A
f9_15 sf
.253(watch)A
f13_15 sf
.085<D3>A
f0_15 sf
.667 .067( statement al)J
762 322 :M
(-)S
145 340 :M
(lows waiting on a condition in conjunction with the implicit mutex of an object. This statement must be)S
145 358 :M
1.407 .141(used inside the methods of a serialized object; hence, it is always evaluated with the object mutex)J
145 376 :M
(locked:)S
199 406 :M
f9_15 sf
(watch )S
f11_15 sf
(c)S
f9_15 sf
( until )S
f11_15 sf
(guard)S
f9_15 sf
( end)S
145 434 :M
f0_15 sf
1.163 .116(The )J
174 434 :M
f13_15 sf
.095<D2>A
f9_15 sf
.285(watch)A
f13_15 sf
.095<D3>A
f0_15 sf
.702 .07( statement evaluates the condition, and, if )J
f13_15 sf
.095<D2>A
f11_15 sf
.285(guard)A
f13_15 sf
.095<D3>A
f0_15 sf
.8 .08( evaluates to true, terminates leaving)J
145 452 :M
.537 .054(the mutex locked. If the guard is false, the object mutex is unlocked \(so that other methods of the ob)J
762 452 :M
(-)S
145 470 :M
.323 .032(ject can execute\) and the thread waits for the condition to be signaled. When the condition is signaled,)J
145 488 :M
.257 .026(the object mutex is locked and the boolean guard is evaluated again, repeating the process. See section)J
145 506 :M
(5.1 for an example.)S
172 524 :M
.731 .073(Objects with implicit mutexes can be cloned: a fresh implicit mutex is created for the clone. Re)J
762 524 :M
(-)S
145 542 :M
1.727 .173(mote objects with implicit mutexes can also be cloned: a fresh implicit mutex is generated at the)J
145 560 :M
.645 .065(cloning site. Note, however, that an error is reported on any attempt to transmit an explicit mutex \(or)J
145 578 :M
(thread, or condition\) between different sites, since these values are strongly site-dependent.)S
172 596 :M
1.552 .155(Consider the case of threads blocked on a condition within an object that is cloned. For local)J
145 614 :M
.721 .072(cloning, a fresh implicit mutex is created for the clone, with no threads blocked on it. The condition,)J
145 632 :M
.533 .053(however, is shared between the two objects. For remote cloning, since the watch statement refers to a)J
145 650 :M
.477 .048(condition and conditions cannot be transmitted, then the method closure that contains the watch state)J
762 650 :M
(-)S
145 668 :M
(ment cannot be transmitted, and hence the remote cloning fails.)S
172 686 :M
1.145 .114(Consider now the case of threads blocked on a condition within a method that is overridden or)J
145 704 :M
1.397 .14(redirected. When the thread resumes, the original method runs to completion with a modified self.)J
145 722 :M
1.241 .124(Thus, a blocked thread must deal with the fact that the self may change in non-trivial ways: this is)J
145 740 :M
(specially in)S
214 740 :M
(sidious if the object is serialized but not protected.)S
172 758 :M
.216 .022(Unlike objects, there is no automatic serialization for variables or arrays. If necessary, their access)J
145 776 :M
.593 .059(can be controlled through serialized objects or explicit mutexes. Even for objects, serialization is nei)J
762 776 :M
(-)S
145 794 :M
.474 .047(ther compulsory nor a default, since its use is not always desirable. In some cases it may be sufficient)J
145 812 :M
(to serialize server objects \(the concurrent entry points to a site\) and leave all other objects unserialized.)S
145 856 :M
f2_18 sf
(3.7)S
185 856 :M
(Name Servers)S
172 884 :M
f0_15 sf
.827 .083(Obliq values can flow freely from site to site along communication channels. But such channels)J
145 902 :M
.078 .008(must first be established by interaction with a name server. A name server for Obliq programs is an ex)J
761 902 :M
(-)S
145 920 :M
.598 .06(ternal process that is uniquely identified by its IP address; it simply maintains a table associating text)J
145 938 :M
(strings with network references [Birrell, )S
389 938 :M
f4_15 sf
(et al.)S
419 938 :M
f0_15 sf
( 1994].)S
172 956 :M
.764 .076(The connection protocol between two Obliq sites is as follows. The first site registers a local, or)J
145 974 :M
.582 .058(remote, object under a certain name with a known name server. The second site asks the name server)J
145 992 :M
.81 .081(for \(the network reference to\) the object registered under that name. At this point the second site ac)J
762 992 :M
(-)S
145 1010 :M
.52 .052(quires a direct network reference to the object living in the first site. The name server is no longer in)J
762 1010 :M
(-)S
145 1028 :M
.067 .007(volved in any way, except that it still holds the network reference. Obliq values and network references)J
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(luca; page: 15 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(15)S
145 160 :M
f0_15 sf
.217 .022(can now flow along the direct connection between the two sites, without having to be registered with a)J
145 178 :M
(name server.)S
172 196 :M
1.219 .122(This protocol is coded as follows, using the built-in )J
502 196 :M
f13_15 sf
.175<D2>A
f9_15 sf
.525(net)A
f13_15 sf
.175<D3>A
f0_15 sf
1.151 .115( module. An Obliq object can be )J
748 196 :M
(ex-)S
145 214 :M
(ported to a name server by the command:)S
199 244 :M
f4_15 sf
(Site1: )S
253 244 :M
f9_15 sf
(net_export\("obj", )S
f11_15 sf
(NameServer)S
f9_15 sf
(, site1Obj\))S
380 257 152 128 rC
49 44 493 279.5 @f
474 276 :M
f0_15 sf
(Name)S
474 291 :M
-.027(Server)A
380.5 322.5 58 44 rS
-1 -1 431 367 1 1 430 322 @b
13 -73 -25 438 338 @k
-1 -1 443 335 1 1 475 295 @b
384.5 347.5 17 12 rS
430 338 -1 1 439 337 1 430 337 @a
13 -43 5 401 347 @k
-1 -1 408 346 1 1 430 337 @b
381 380 :M
-.208(Site1)A
20 124 172 465 278 @k
20 -56 -8 407 315 @k
-3 -3 417 312 3 3 456 282 @b
404 289 :M
-.253(TCP)A
466 323 :M
(Network)S
466 338 :M
(Reference)S
gR
gS 46 46 824 1090 rC
145 409 :M
f0_15 sf
.578 .058(where )J
f13_15 sf
.069<D2>A
f9_15 sf
.206("obj")A
f13_15 sf
.069<D3>A
f0_15 sf
.446 .045( is the registration name for the object, )J
479 409 :M
f13_15 sf
<D2>S
f9_15 sf
.134(site1Obj)A
f13_15 sf
<D3>S
f0_15 sf
.231 .023( is the object, and )J
f13_15 sf
<D2>S
f11_15 sf
.134(NameServer)A
f13_15 sf
<D3>S
145 427 :M
f0_15 sf
.854 .085(is a string containing the net IP address or IP name of the machine running the desired name server.)J
145 445 :M
.284 .028(\(The empty string can be used as an abbreviation for the local IP address.\) The object is now available)J
145 463 :M
.031 .003(through the name server, as long as the site that exports it is alive. Objects and engines \(section 3.8\) are)J
145 481 :M
(the only Obliq values that can be exported to name servers.)S
172 499 :M
(Any other site can then )S
315 499 :M
(import a network reference to the object:)S
199 529 :M
f4_15 sf
(Site2: )S
253 529 :M
f9_15 sf
(let site1Obj = net_import\("obj", )S
f11_15 sf
(NameServer)S
f9_15 sf
<29>S
343 542 226 129 rC
345.5 606.5 58 44 rS
-1 -1 396 651 1 1 395 606 @b
13 -73 -25 404 620 @k
-1 -1 409 617 1 1 441 577 @b
349.5 631.5 17 12 rS
395 622 -1 1 404 621 1 395 621 @a
13 -43 5 366 631 @k
-1 -1 373 630 1 1 395 621 @b
346 664 :M
f0_15 sf
-.208(Site1)A
20 188 236 548 602 @k
20 8 56 494 568 @k
501 575 -3 3 542 596 3 501 572 @a
524 577 :M
-.253(TCP)A
509.5 608.5 58 44 rS
510 666 :M
(Site2)S
533.5 630.5 4 13 rS
13 -18 30 404 622 @k
410 623 -1 1 534 637 1 410 622 @a
438 542 52 46 rC
49 44 464 564.5 @f
445 561 :M
(Name)S
445 576 :M
-.027(Server)A
gR
gS 46 46 824 1090 rC
145 695 :M
f0_15 sf
(Object operations can be applied to )S
361 695 :M
f13_15 sf
<D2>S
f9_15 sf
(site1Obj)S
f13_15 sf
<D3>S
f0_15 sf
( as if it were a local object, as discussed in section 3.3.)S
172 713 :M
.222 .022(The two sites can now communicate directly; the name server is out of the loop. \(It may be told to)J
145 731 :M
(forget the object by redefining its registration name.\))S
199 761 :M
f4_15 sf
(Site2: )S
253 761 :M
f9_15 sf
(site1Obj.)S
f11_15 sf
(op)S
f9_15 sf
<28>S
f11_15 sf
(args)S
f9_15 sf
<29>S
343 774 226 147 rC
345.5 838.5 58 44 rS
-1 -1 396 883 1 1 395 838 @b
349.5 863.5 17 12 rS
395 854 -1 1 404 853 1 395 853 @a
13 -43 5 366 863 @k
-1 -1 373 862 1 1 395 853 @b
346 896 :M
f0_15 sf
-.208(Site1)A
20 156 204 501 896 @k
20 -24 24 404 896 @k
413 898 -3 3 493 895 3 413 895 @a
440 916 :M
-.253(TCP)A
509.5 840.5 58 44 rS
510 898 :M
(Site2)S
13 -18 30 404 854 @k
410 855 -1 1 534 869 1 410 854 @a
428 775 52 46 rC
49 44 454 797.5 @f
435 794 :M
(Name)S
435 809 :M
-.027(Server)A
gR
gS 343 774 226 147 rC
534.5 862.5 4 13 rS
gR
gS 46 46 824 1090 rC
172 945 :M
f0_15 sf
.617 .062(Finally, the object may be made available to a third site by transmitting it through an established)J
145 963 :M
(communication channel:)S
199 993 :M
f4_15 sf
(Site2: )S
253 993 :M
f9_15 sf
(site3Obj.)S
f11_15 sf
(op)S
f9_15 sf
(\(site1Obj\))S
endp
%%Page: 16 16
%%BeginPageSetup
initializepage
(luca; page: 16 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(16)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
296 145 319 130 rC
298.5 209.5 58 44 rS
-1 -1 349 254 1 1 348 209 @b
302.5 234.5 17 12 rS
348 225 -1 1 357 224 1 348 224 @a
13 -43 5 319 234 @k
-1 -1 326 233 1 1 348 224 @b
299 267 :M
f0_15 sf
-.208(Site1)A
20 156 204 578 196 @k
20 -24 24 501 196 @k
510 198 -3 3 570 195 3 510 195 @a
527 181 :M
-.253(TCP)A
462.5 211.5 58 44 rS
555 269 :M
(Site3)S
13 -18 30 357 225 @k
363 226 -1 1 487 240 1 363 225 @a
555.5 210.5 58 44 rS
462 270 :M
(Site2)S
13 -25 23 356 224 @k
-1 -1 363 225 1 1 578 220 @b
380 146 52 46 rC
49 44 406 168.5 @f
387 165 :M
(Name)S
387 180 :M
-.027(Server)A
gR
gS 296 145 319 130 rC
487.5 233.5 4 13 rS
579.5 213.5 4 13 rS
590.5 236.5 17 12 rS
-1 -1 564 255 1 1 563 211 @b
505.5 236.5 4 13 rS
13 151 199 554 239 @k
-1 -1 510 244 1 1 548 239 @b
555 240 -1 1 564 239 1 555 239 @a
13 162 210 590 242 @k
564 240 -1 1 585 242 1 564 239 @a
gR
gS 46 46 824 1090 rC
145 299 :M
f0_15 sf
.079 .008(Objects are garbage collected at a site when they are no longer referred to, either locally or via network)J
145 317 :M
(references [Birrell, )S
262 317 :M
f4_15 sf
(et al.)S
292 317 :M
f0_15 sf
( 1993a].)S
172 335 :M
1.261 .126(Another name service operation returns status information about a network reference, as a text)J
145 353 :M
(string. It can be used to \322ping\323 a remote object without affecting it:)S
199 383 :M
f9_15 sf
(net_who\(site1Obj\);)S
172 411 :M
f0_15 sf
.5 .05(Communication failures raise an exception \()J
443 411 :M
f13_15 sf
.053<D2>A
f9_15 sf
.16(net_failure)A
f13_15 sf
.053<D3>A
f0_15 sf
.392 .039(\), which can be trapped. These fail)J
761 411 :M
(-)S
145 429 :M
.414 .041(ures may mean that one of the machines involved has crashed, or that an Obliq address space was ter)J
762 429 :M
(-)S
145 447 :M
(minated. There is no automatic recovery from network failures.)S
145 491 :M
f2_18 sf
(3.8)S
185 491 :M
(Execution Engines)S
172 519 :M
f0_15 sf
.5 .05(We shall see soon that compute servers are definable via simple network objects. However, com)J
762 519 :M
(-)S
145 537 :M
.38 .038(pute servers are so common and useful that we provide them as primitives, calling them execution en)J
762 537 :M
(-)S
145 555 :M
-.007(gines. An execution engine accepts Obliq procedures \(that is, procedure closures\) from the network and)A
145 573 :M
(executes them at the engine site. An )S
365 573 :M
(engine can be exported from a site via the primitive:)S
199 603 :M
f9_15 sf
(net_exportEngine\()S
f9_14 sf
(")S
f9_15 sf
(Engine1@Site1)S
f9_14 sf
(")S
486 603 :M
f9_15 sf
(, )S
f11_15 sf
(NameServer)S
f9_15 sf
(, arg\);)S
145 631 :M
f0_15 sf
.601 .06(The )J
f13_15 sf
.093<D2>A
f9_15 sf
.28(arg)A
f13_15 sf
.093<D3>A
f0_15 sf
.73 .073( parameter is supplied to all the client procedures received by the engine. Multiple engines)J
145 649 :M
(can be exported from the same site under different names.)S
172 667 :M
1.036 .104(A client may import an engine and then specify a procedure to be execute remotely. An engine)J
145 685 :M
(value behaves like a procedure of one argument:)S
199 715 :M
f9_15 sf
(let atSite1 =)S
199 737 :M
(  net_importEngine\()S
f9_14 sf
(")S
f9_15 sf
(Engine1@Site1)S
f9_14 sf
(")S
504 737 :M
f9_15 sf
(, )S
f11_15 sf
(NameServer)S
f9_15 sf
(\);)S
199 768 :M
(atSite1\(proc\(arg\) 3+2 end\);)S
172 796 :M
f0_15 sf
.5 .05(Implementing engines as remote procedures, instead of a remote objects, allows self-inflicted op)J
762 796 :M
(-)S
145 814 :M
(erations to extend across sites; this turns out to be important for object migration.)S
145 860 :M
f2_21 sf
(4.)S
172 860 :M
(Local Techniques)S
172 889 :M
f0_15 sf
.479 .048(In this section we discuss a collection of single-threaded examples to illustrate Obliq\325s sequential)J
145 907 :M
.135 .013(features. A collection of concurrent and distributed examples is given in section 5; the impatient reader)J
145 925 :M
.34 .034(may want to skip forward. In both these sections the emphasis is on advanced, rather than tutorial, ex)J
761 925 :M
(-)S
145 943 :M
(amples.)S
145 987 :M
f2_18 sf
(4.1)S
185 987 :M
(Recursion and Iteration)S
172 1015 :M
f0_15 sf
1.203 .12(We start with a simple example, to illustrate the use of definitions, local variables, and control)J
145 1033 :M
(constructs. The factorial function is defined in recursive and iterative style.)S
endp
%%Page: 17 17
%%BeginPageSetup
initializepage
(luca; page: 17 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(17)S
199 172 :M
f9_15 sf
(let rec recFact =)S
199 194 :M
(  proc\(n\))S
199 216 :M
(    if n is 0 then 1 else n * recFact\(n-1\) end;)S
199 238 :M
(  end;)S
199 269 :M
(let itFact =)S
199 291 :M
(  proc\(n\))S
199 313 :M
(    var cnt = n; var acc = 1;)S
199 335 :M
(    loop)S
199 357 :M
(      if cnt is 0 then exit end;)S
199 379 :M
(      acc := cnt * acc; cnt := cnt - 1;)S
199 401 :M
(    end;)S
199 423 :M
(    acc;)S
199 445 :M
(  end;)S
145 473 :M
f0_15 sf
.475 .048(Identifiers are declared by )J
309 473 :M
f13_15 sf
<D2>S
f9_15 sf
.143(let)A
f13_15 sf
<D3>S
f0_15 sf
.345 .035(, and updatable variables by )J
f13_15 sf
<D2>S
f9_15 sf
.143(var)A
f13_15 sf
<D3>S
f0_15 sf
.451 .045(. Recursive definitions are obtained)J
145 491 :M
.157 .016(by )J
164 491 :M
f13_15 sf
<D2>S
f9_15 sf
.167 .017(let rec)J
f13_15 sf
<D3>S
f0_15 sf
.093 .009(. The identity predicate is called )J
f13_15 sf
<D2>S
f9_15 sf
.04(is)A
f13_15 sf
<D3>S
f0_15 sf
.117 .012(. A sequence of statements separated by semicolons)J
145 509 :M
(returns the value of the last statement; hence the iterative factorial program returns )S
f13_15 sf
<D2>S
f9_15 sf
(acc)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 553 :M
f2_18 sf
(4.2)S
185 553 :M
(The Object-Oriented Numerals)S
172 581 :M
f0_15 sf
.128 .013(This next example illustrates the expressive power of the object primitives by encoding the natural)J
145 599 :M
(numbers purely in terms of objects.)S
199 629 :M
f9_15 sf
(let zero =)S
199 651 :M
(  {case =>)S
199 673 :M
(     proc\(pz,ps\) pz\(\) end,)S
199 695 :M
(   succ =>)S
199 717 :M
(     meth\(self\))S
199 739 :M
(       let o = clone\(self\);)S
253 761 :M
( o.case := proc\(pz,ps\) ps\(self\) end;)S
253 783 :M
( o)S
199 805 :M
(     end};)S
145 833 :M
f0_15 sf
.918 .092(The numeral )J
228 833 :M
f13_15 sf
.131<D2>A
f9_15 sf
.392(zero)A
f13_15 sf
.131<D3>A
f0_15 sf
.758 .076( has two fields. The )J
399 833 :M
f13_15 sf
.072<D2>A
f9_15 sf
.215(succ)A
f13_15 sf
.072<D3>A
f0_15 sf
.682 .068( field produces successive numerals by appropriately)J
145 851 :M
3.708 .371(modifying the current numeral. The )J
f13_15 sf
.434<D2>A
f9_15 sf
1.299(case)A
f13_15 sf
.434<D3>A
f0_15 sf
2.96 .296( field is used to discriminate on zero: the idiom)J
145 869 :M
f13_15 sf
<D2>S
f9_15 sf
.212 .021(\(n.case\)\(proc\(\) b end, proc\(p\) c end\))J
f13_15 sf
<D3>S
f0_15 sf
.099 .01( is read, informally, as \322if )J
644 869 :M
f9_15 sf
.071(n)A
f0_15 sf
.151 .015( is zero then return)J
145 887 :M
f9_15 sf
(b)S
f0_15 sf
(, else bind the predecessor of )S
332 887 :M
f9_15 sf
(n)S
f0_15 sf
( to )S
f9_15 sf
(p)S
f0_15 sf
( and return )S
438 887 :M
f9_15 sf
(c)S
f0_15 sf
<D32E>S
172 905 :M
.452 .045(The code of the )J
272 905 :M
f13_15 sf
<D2>S
f9_15 sf
.127(succ)A
f13_15 sf
<D3>S
f0_15 sf
.343 .034( method depends heavily on Obliq peculiarities: it clones self, and embeds)J
145 923 :M
.647 .065(the current self into a procedure closure, so that it can be used later. For example, the numeral )J
730 923 :M
f13_15 sf
<D2>S
f9_15 sf
(one)S
f13_15 sf
<D3>S
f0_15 sf
(,)S
145 941 :M
(computed as, )S
228 941 :M
f13_15 sf
<D2>S
f9_15 sf
(zero.succ\(\))S
f13_15 sf
<D3>S
f0_15 sf
(, is:)S
199 971 :M
f9_15 sf
( {case => proc\(pz,ps\) ps\(zero\) end,)S
199 993 :M
(  succ => )S
f4_15 sf
(\(as for zero\))S
f9_15 sf
( })S
145 1021 :M
f0_15 sf
(Hence, )S
191 1021 :M
f13_15 sf
<D2>S
f9_15 sf
(one.case\(pz,ps\))S
f13_15 sf
<D3>S
f0_15 sf
( correctly applies )S
f13_15 sf
<D2>S
f9_15 sf
(ps)S
f13_15 sf
<D3>S
f0_15 sf
( to the predecessor of )S
f13_15 sf
<D2>S
f9_15 sf
(one)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
endp
%%Page: 18 18
%%BeginPageSetup
initializepage
(luca; page: 18 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(18)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
172 160 :M
f0_15 sf
.363 .036(To show that the encoding is fully general, we define the successor, predecessor, and test for zero)J
145 178 :M
(procedures:)S
199 208 :M
f9_15 sf
(let succ =)S
199 230 :M
(  proc\(n\) n.succ end;)S
199 261 :M
(let pred =)S
199 283 :M
(  proc\(n\))S
199 305 :M
(    \(n.case\)\(proc\(\) zero end, proc\(p\) p end\))S
199 327 :M
(  end;)S
199 358 :M
(let iszero =)S
199 380 :M
(  proc\(n\))S
199 402 :M
(    \(n.case\)\(proc\(\) true end, proc\(p\) false end\))S
199 424 :M
(  end;)S
145 478 :M
f2_18 sf
(4.3)S
185 478 :M
(The Prime Numbers Sieve)S
172 506 :M
f0_15 sf
.233 .023(This example shows an interesting case of methods )J
487 506 :M
.197 .02(overriding themselves, and of objects replicat-)J
145 524 :M
.814 .081(ing themselves by )J
261 524 :M
.793 .079(cloning. The program below prints the prime numbers when the method )J
711 524 :M
f13_15 sf
.144<D2>A
f9_15 sf
.431(m)A
f13_15 sf
.144<D3>A
f0_15 sf
.706 .071( of the)J
145 542 :M
f13_15 sf
<D2>S
f9_15 sf
.139(sieve)A
f13_15 sf
<D3>S
f0_15 sf
.329 .033( object is invoked with successive integers starting from 2. Each time a new prime p is found,)J
145 560 :M
.6 .06(the sieve object clones itself into two objects. One of the clones then transforms itself into a filter for)J
145 578 :M
(multiples of p; non-multiples are passed to the other clone.)S
199 608 :M
f9_15 sf
(let sieve =)S
199 630 :M
(   { m =>)S
199 652 :M
(        meth\(s, n\))S
199 674 :M
(          print\(n\);)S
496 674 :M
(\(* defined elsewhere *\))S
199 696 :M
(          let s0 = clone\(s\);)S
199 718 :M
(          s.m :=)S
199 740 :M
(            meth\(s1,n1\))S
199 762 :M
(              if \(n1 % n\) is 0 then ok else s0.m\(n1\) end)S
199 784 :M
(            end;)S
199 806 :M
(        end)S
199 828 :M
(   };)S
199 859 :M
(\(* print the primes < 100 *\))S
199 881 :M
(for i = 2 to 100 do sieve.m\(i\) end;)S
145 909 :M
f0_15 sf
.278 .028(At any point in time, if n primes have been printed, then there exists n filter objects plus a clone of the)J
145 927 :M
(original sieve object.)S
145 971 :M
f2_18 sf
(4.4)S
185 971 :M
(A Calculator)S
172 999 :M
f0_15 sf
-.006(This example illustrates method )A
368 999 :M
-.007(overriding, used here to store the \322pending operations\323 of a pocket)A
145 1017 :M
(calculator.)S
endp
%%Page: 19 19
%%BeginPageSetup
initializepage
(luca; page: 19 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(19)S
199 172 :M
f9_15 sf
(let calc =)S
199 194 :M
(  { arg => 0.0,   \(* the )S
f0_15 sf
(")S
f9_15 sf
(visible)S
f0_15 sf
(")S
f9_15 sf
( argument display *\))S
199 216 :M
(    acc => 0.0,   \(* the )S
f0_15 sf
(")S
f9_15 sf
(hidden)S
f0_15 sf
(")S
f9_15 sf
( accumulator *\))S
199 247 :M
(    enter => )S
361 247 :M
(\(* entering a new argument *\))S
199 269 :M
(      meth\(s, n\))S
199 291 :M
(        s.arg := n;)S
199 313 :M
(        s)S
199 335 :M
(      end,)S
199 366 :M
(    add =>  )S
361 366 :M
(\(* the addition button *\))S
199 388 :M
(      meth\(s\))S
199 410 :M
(        s.acc := s.equals;)S
199 432 :M
(        s.equals := meth\(s\) s.acc+s.arg end;)S
199 454 :M
(        s)S
199 476 :M
(      end,)S
199 507 :M
(    sub =>  )S
361 507 :M
(\(* the subtraction button *\))S
199 529 :M
(      meth\(s\))S
199 551 :M
(        s.acc := s.equals;)S
199 573 :M
(        s.equals := meth\(s\) s.acc-s.arg end;)S
199 595 :M
(        s)S
199 617 :M
(      end,)S
199 648 :M
(    equals =>   )S
361 648 :M
(\(* the result button \(and operator stack\) *\))S
199 670 :M
(      meth\(s\) s.arg end,)S
199 701 :M
(    reset =>   )S
361 701 :M
(\(* the reset button *\))S
199 723 :M
(      meth\(s\))S
199 745 :M
(        s.arg:=0.0;)S
199 767 :M
(        s.acc:=0.0;)S
199 789 :M
(        s.equals:=meth\(s\) s.arg end;)S
199 811 :M
(        s)S
199 833 :M
(      end)S
199 855 :M
(   };)S
172 883 :M
f0_15 sf
(For example:)S
199 913 :M
f9_15 sf
(   calc .reset .enter\(3.5\) .equals;                   \(* 3.5 *\))S
199 935 :M
(   calc .reset .enter\(3.5\) .sub .enter\(2.0\) .equals;  \(* 1.5 *\))S
199 957 :M
(   calc .reset .enter\(3.5\) .add .equals;              \(* 7.0 *\))S
199 979 :M
(   calc .reset .enter\(3.5\) .add .add .equals;         \(*10.5 *\))S
endp
%%Page: 20 20
%%BeginPageSetup
initializepage
(luca; page: 20 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(20)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 159 :M
f2_18 sf
(4.5)S
185 159 :M
(Surrogates)S
172 187 :M
f0_15 sf
.611 .061(Here we create a non-trivial surrogate for the calculator object of section 4.4. Unlike the original)J
145 205 :M
.243 .024(calculator, this object is protected against outside interference. Some of the calculator fields are shared)J
145 223 :M
(by aliasing, some are hidden, some are renamed, and one is added.)S
199 271 :M
f9_15 sf
(let publicCalc =)S
199 293 :M
(   { protected,)S
199 315 :M
(     enter => alias enter of calc end,)S
199 337 :M
(     pi => meth\(s\) s.enter\(3.1415926535897932384626433833\) end,)S
199 359 :M
(     plus => alias add of calc end,)S
199 381 :M
(     minus => alias sub of calc end,)S
199 403 :M
(     equals => alias equals of calc end,)S
199 425 :M
(     reset => alias reset of calc end })S
145 481 :M
f2_21 sf
(5.)S
172 481 :M
(Distributed Techniques)S
172 510 :M
f0_15 sf
.405 .04(In this section we code some distributed programming techniques in Obliq. Each example is typi)J
762 510 :M
(-)S
145 528 :M
(cal of a separate class of distributed programs, and illustrates the unique features of Obliq.)S
145 572 :M
f2_18 sf
(5.1)S
185 572 :M
(A Serialized Queue)S
172 600 :M
f0_15 sf
.192 .019(We begin with an example of ordinary concurrent programming to illustrate the threads primitives)J
145 618 :M
1.289 .129(that are used in the sequel. We implement a queue that can be accessed consistently by concurrent)J
145 636 :M
(reader and writer threads.)S
172 654 :M
.667 .067(The queue is implemented as a serialized object with )J
503 654 :M
f13_15 sf
.063<D2>A
f9_15 sf
.188(read)A
f13_15 sf
.063<D3>A
f0_15 sf
.243 .024( and )J
f13_15 sf
.063<D2>A
f9_15 sf
.188(write)A
f13_15 sf
.063<D3>A
f0_15 sf
.56 .056( methods. These meth)J
762 654 :M
(-)S
145 672 :M
.541 .054(ods refer to free identifiers that are hidden from users of the queue. The object mutex is used, implic)J
762 672 :M
(-)S
145 690 :M
1.183 .118(itly, to protect a private variable that contains an array of queue elements. Another private variable)J
145 708 :M
(contains a )S
f4_15 sf
(condition)S
266 708 :M
f0_15 sf
( )S
270 708 :M
f13_15 sf
<D2>S
f9_15 sf
(nonEmpty)S
f13_15 sf
<D3>S
f0_15 sf
( used for signaling the state of the queue.)S
172 726 :M
.923 .092(The write method adds an element to the queue, and )J
503 726 :M
f4_15 sf
.198(signals)A
f0_15 sf
.73 .073( the non-empty condition, so that at)J
145 744 :M
.298 .03(least one reader thread waiting on that condition wakes up \(a similar )J
f4_15 sf
.091(broadcast)A
f0_15 sf
.307 .031( operation wakes up all)J
145 762 :M
.735 .073(waiting threads\). The object mutex is locked throughout the execution of the write method, therefore)J
145 780 :M
(excluding other writer or reader threads.)S
172 798 :M
-.007(When a read method starts executing, the object mutex is locked. Its first instruction is to watch for)A
145 816 :M
.155 .016(the non-empty condition, and for the existence of elements in the queue. If the queue is non-empty, the)J
145 834 :M
.644 .064(reader simply goes ahead and removes one element from the queue. If the queue is empty, the reader)J
145 852 :M
.556 .056(thread is suspended and the object mutex is released \(allowing other reader and writer threads to exe)J
762 852 :M
(-)S
145 870 :M
.945 .094(cute\). The reader is suspended until it receives a signal for the non-empty condition; then the object)J
145 888 :M
1.363 .136(mutex is locked, and the reader thread proceeds as above \(possibly being suspended again if some)J
145 906 :M
(other reader thread has already emptied the queue\).)S
172 924 :M
.918 .092(What is important here is that a reader thread may be blocked inside a method, and yet a writer)J
145 942 :M
1.005 .101(thread can get access and eventually allow the first thread to proceed. Hence, even though only one)J
145 960 :M
(thread at a time can run, multiple threads may be simultaneously present \322in\323 the object.)S
172 978 :M
(Here, )S
209 978 :M
f13_15 sf
<D2>S
f9_15 sf
([)S
f0_15 sf
(...)S
f9_15 sf
(])S
f13_15 sf
<D3>S
f0_15 sf
( is an array, )S
318 978 :M
f13_15 sf
<D2>S
f9_15 sf
(#)S
f13_15 sf
<D3>S
f0_15 sf
( is array-size, and )S
f13_15 sf
<D2>S
f9_15 sf
(@)S
f13_15 sf
<D3>S
f0_15 sf
( is array-concatenation.)S
endp
%%Page: 21 21
%%BeginPageSetup
initializepage
(luca; page: 21 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(21)S
199 172 :M
f9_15 sf
(let queue =)S
199 194 :M
(  \(let nonEmpty = condition\(\);)S
199 216 :M
(   var q = [];               \(* the \(hidden\) queue data *\))S
199 247 :M
(   {protected, serialized,)S
226 269 :M
(   write =>)S
199 291 :M
(        meth\(s, elem\))S
199 313 :M
(          q := q @ [elem];   \(* append elem to tail *\))S
199 335 :M
(          signal\(nonEmpty\);  \(* wake up readers *\))S
199 357 :M
(        end,)S
199 388 :M
(      read =>)S
199 410 :M
(        meth\(s\))S
199 432 :M
(          watch nonEmpty     \(* wait for writers *\))S
199 454 :M
(          until #\(q\)>0       \(* check size of queue *\))S
199 476 :M
(          end;)S
199 498 :M
(          let q0 = q[0];           \(* get first elem *\))S
199 520 :M
(          q := q[1 for #\(q\)-1];    \(* remove from queue *\))S
199 542 :M
(          q0;                      \(* return first elem *\))S
199 564 :M
(        end;)S
199 586 :M
(   }\);)S
172 614 :M
f0_15 sf
.658 .066(Let us see how this queue can be used. Suppose a reader is activated first when the queue is still)J
145 632 :M
1.316 .132(empty. To avoid an immediate deadlock, we fork a thread running a procedure that reads from the)J
145 650 :M
.276 .028(queue; this thread blocks on the )J
342 650 :M
f13_15 sf
<D2>S
f9_15 sf
.092(watch)A
f13_15 sf
<D3>S
f0_15 sf
.212 .021( statement. The reader thread is returned by the )J
f13_15 sf
<D2>S
f9_15 sf
.092(fork)A
f13_15 sf
<D3>S
f0_15 sf
.248 .025( primi)J
762 650 :M
(-)S
145 668 :M
(tive, and bound to the identifier )S
338 668 :M
f13_15 sf
<D2>S
f9_15 sf
(t)S
f13_15 sf
<D3>S
f0_15 sf
(:)S
199 698 :M
f9_15 sf
(let t =                   \(* fork a reader t, which blocks *\))S
199 720 :M
(  fork\(proc\(\) queue.read\(\) end, 0\);)S
145 748 :M
f0_15 sf
.489 .049(Next we add an element to the queue, using the current thread as the writer thread. A non-empty con)J
762 748 :M
(-)S
145 766 :M
(dition is immediately signaled and, shortly thereafter, the reader thread returns the queue element.)S
199 796 :M
f9_15 sf
(queue.write\(3\);           \(* cause t to read 3 *\))S
145 824 :M
f0_15 sf
.247 .025(The reader thread has now finished running, but is not completely dead because it has not delivered its)J
145 842 :M
(result. To obtain the result, the current thread is joined with the reader thread:)S
199 872 :M
f9_15 sf
(let result = join\(t\);     \(* get 3 from t *\))S
145 900 :M
f0_15 sf
(In general, )S
213 900 :M
f13_15 sf
<D2>S
f9_15 sf
(join)S
f13_15 sf
<D3>S
f0_15 sf
( waits until the completion of a thread and returns its result.)S
145 944 :M
f2_18 sf
(5.2)S
185 944 :M
(Compute Servers)S
172 972 :M
f0_15 sf
1.504 .15(The compute server defined below receives a client procedure )J
f13_15 sf
.181<D2>A
f9_15 sf
.543(p)A
f13_15 sf
.181<D3>A
f0_14 sf
.211 .021( )J
590 972 :M
f0_15 sf
1.444 .144(with zero arguments via the)J
145 990 :M
f13_15 sf
.056<D2>A
f9_15 sf
.169(rexec)A
f13_15 sf
.056<D3>A
f0_14 sf
.06 .006( )J
f0_15 sf
.446 .045(method, and executes the procedure at the server site. This particular server cheats on clients)J
145 1008 :M
.897 .09(by storing the latest client procedure into a global variable )J
513 1008 :M
f13_15 sf
.09<D2>A
f9_15 sf
.27(replay)A
f13_15 sf
.09<D3>A
f0_15 sf
.609 .061(. Another field, )J
f13_15 sf
.09<D2>A
f9_15 sf
.27(lexec)A
f13_15 sf
.09<D3>A
f0_15 sf
.409 .041(, is de)J
762 1008 :M
(-)S
endp
%%Page: 22 22
%%BeginPageSetup
initializepage
(luca; page: 22 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(22)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 160 :M
f0_15 sf
.207 .021(fined similarly to )J
f13_15 sf
<D2>S
f9_15 sf
.085(rexec)A
f13_15 sf
<D3>S
f0_15 sf
.111 .011(, but )J
f13_15 sf
<D2>S
f9_15 sf
.085(rexec)A
f13_15 sf
<D3>S
f0_15 sf
.168 .017(, is a method field, while )J
541 160 :M
f13_15 sf
<D2>S
f9_15 sf
.081(lexec)A
f13_15 sf
<D3>S
f0_15 sf
.173 .017(, is a value field containing a)J
145 178 :M
(procedure value: the operational difference is discussed below.)S
199 208 :M
f9_15 sf
(\(* Server Site *\))S
199 230 :M
(var replay = proc\(\) end;)S
199 261 :M
(net_export\()S
f9_14 sf
(")S
f9_15 sf
(ComputeServer)S
f9_14 sf
(")S
432 261 :M
f9_15 sf
(, )S
f11_15 sf
(NameServer)S
f9_15 sf
(,)S
199 283 :M
(  {rexec => meth\(s, p\) replay:=p; p\(\) end,)S
226 305 :M
(lexec => proc\(p\) replay:=p; p\(\) end}\))S
172 333 :M
f0_15 sf
.937 .094(A client may import the compute server and send it a procedure to execute. The procedure may)J
145 351 :M
(have free variables at the client site; in this example it increments a global variable )S
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
(:)S
199 381 :M
f9_15 sf
(\(* Client Site *\))S
199 403 :M
(let computeServer =)S
199 425 :M
(  net_import\()S
f9_14 sf
(")S
f9_15 sf
(ComputeServer)S
f9_14 sf
(")S
450 425 :M
f9_15 sf
(, )S
f11_15 sf
(NameServer)S
f9_15 sf
(\);)S
199 456 :M
(var x = 0;)S
199 478 :M
(computeServer.rexec\(proc\(\) x:=x+1 end\);)S
199 500 :M
(x;)S
280 500 :M
(\(* now x = 1 *\))S
172 528 :M
f0_15 sf
2.078 .208(When the server executes its )J
f13_15 sf
.281<D2>A
f9_15 sf
.842(rexec)A
f13_15 sf
.281<D3>A
f0_15 sf
1.881 .188( method, )J
481 528 :M
f13_15 sf
.307<D2>A
f9_15 sf
.92(replay)A
f13_15 sf
.307<D3>A
f0_15 sf
1.497 .15( is set to \(a closure for\) )J
f13_15 sf
.307<D2>A
f9_15 sf
1.105(proc\(\))A
145 546 :M
.478 .048(x:=x+1 end)J
f13_15 sf
<D3>S
f0_15 sf
.176 .018( at the server site, and then )J
405 546 :M
f13_15 sf
<D2>S
f9_15 sf
.134(x)A
f13_15 sf
<D3>S
f0_15 sf
.155 .016( is set to )J
f13_15 sf
<D2>S
f9_15 sf
.134(1)A
f13_15 sf
<D3>S
f0_15 sf
.245 .024( at the client site, since the free )J
682 546 :M
f13_15 sf
<D2>S
f9_15 sf
.072(x)A
f13_15 sf
<D3>S
f0_15 sf
.174 .017( is lexically)J
145 564 :M
.421 .042(bound to the client site. Any variable called )J
f13_15 sf
.06<D2>A
f9_15 sf
.18(x)A
f13_15 sf
.06<D3>A
f0_15 sf
.363 .036( at the server site, if it exists, is a different variable and)J
145 582 :M
(is not affected. At the server we may now invoke )S
444 582 :M
f13_15 sf
<D2>S
f9_15 sf
(replay\(\))S
f13_15 sf
<D3>S
f0_15 sf
( , setting )S
577 582 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
( to )S
f13_15 sf
<D2>S
f9_15 sf
(2)S
f13_15 sf
<D3>S
f0_15 sf
( at the client site.)S
172 600 :M
(For contrast, consider the execution of the following line at the client site:)S
199 630 :M
f9_15 sf
(\(* Client Site *\))S
199 652 :M
(\(computeServer.lexec\)\(proc\(\) x:=x+1 end\);)S
145 680 :M
f0_15 sf
.329 .033(This results in the server returning the procedure )J
445 680 :M
f13_15 sf
<D2>S
f9_15 sf
.302 .03(proc\(p\) replay:=p; p\(\) end)J
684 680 :M
f13_15 sf
.059<D3>A
f0_15 sf
.347 .035( to the client,)J
145 698 :M
.175 .018(by the semantics of remote field selection, with )J
f13_15 sf
<D2>S
f9_15 sf
.071(replay)A
f13_15 sf
<D3>S
f0_15 sf
.154 .015( bound at the server site. Then the client pro)J
762 698 :M
(-)S
145 716 :M
.126 .013(cedure )J
f13_15 sf
<D2>S
f9_15 sf
.209 .021(proc\(\) x:=x+1 end)J
346 716 :M
f13_15 sf
<D3>S
f0_15 sf
.199 .02( is given as an argument. Hence, this time, the client procedure is ex-)J
145 734 :M
.298 .03(ecuted at the client site. Still, the execution at the client site causes the client procedure to be transmit)J
762 734 :M
(-)S
145 752 :M
(ted to the server and bound to the )S
f13_15 sf
<D2>S
f9_15 sf
(replay)S
f13_15 sf
<D3>S
f0_15 sf
( variable there. The final effect is the same.)S
145 796 :M
f2_18 sf
(5.3)S
185 796 :M
(A Database Server)S
172 824 :M
f0_15 sf
1.069 .107(This example describes a simple server that maintains a persistent database of \322fortunes\323. Each)J
145 842 :M
.184 .018(client may add a new fortune via a )J
f13_15 sf
<D2>S
f9_15 sf
.09(learn)A
f13_15 sf
<D3>S
f0_15 sf
.226 .023( method, and may retrieve a fortune entered by some client)J
145 860 :M
.11 .011(via a )J
f13_15 sf
<D2>S
f9_15 sf
.079(tell)A
f13_15 sf
<D3>S
f0_15 sf
.197 .02( method. The server handles concurrent client access, and saves the database to file to pre)J
762 860 :M
(-)S
145 878 :M
(serve data through outages. An initial empty database is assumed.)S
172 896 :M
1.222 .122(The built-in libraries for readers \()J
384 896 :M
f13_15 sf
.151<D2>A
f9_15 sf
.454(rd_)A
f13_15 sf
.151<D3>A
f0_15 sf
.99 .099(\), writers \()J
f13_15 sf
.151<D2>A
f9_15 sf
.454(wr_)A
f13_15 sf
.151<D3>A
f0_15 sf
.997 .1(\), and data storage \()J
644 896 :M
f13_15 sf
.105<D2>A
f9_15 sf
.316(pickle_)A
f13_15 sf
.105<D3>A
f0_15 sf
.627 .063(\) are de-)J
145 914 :M
(scribed in section B.6.)S
199 944 :M
f9_15 sf
(let writeDB =)S
199 966 :M
(  proc\(dB\))S
199 988 :M
(    let w = wr_open\(fileSys, "fortune.obq"\);)S
199 1010 :M
(    pickle_write\(w, dB\); wr_close\(w\))S
endp
%%Page: 23 23
%%BeginPageSetup
initializepage
(luca; page: 23 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(23)S
199 163 :M
f9_15 sf
(  end;)S
199 194 :M
(let readDB =)S
199 216 :M
(  proc\(\))S
199 238 :M
(    let r = rd_open\(fileSys, "fortune.obq"\);)S
199 260 :M
(    let a = pickle_read\(r\); rd_close\(r\); a)S
199 282 :M
(  end;)S
199 313 :M
(var i = -1;)S
199 344 :M
(let fortune =)S
199 366 :M
(  {protected, serialized,)S
199 388 :M
(     dB => readDB\(\),)S
199 419 :M
(     tell =>)S
199 441 :M
(       meth\(self\))S
199 463 :M
(         if #\(self.dB\) is 0 then "<bad luck>")S
199 485 :M
(         else)S
199 507 :M
(           i := i+1;)S
199 529 :M
(           if i >= #\(self.dB\) then i:=0 end;)S
199 551 :M
(           self.dB[i])S
199 573 :M
(         end)S
199 595 :M
(       end,)S
199 626 :M
(     learn =>)S
199 648 :M
(       meth\(self, t\))S
199 670 :M
(         self.dB := self.dB @ [t];)S
199 692 :M
(         writeDB\(self.dB\);)S
199 714 :M
(       end,)S
199 736 :M
(  };)S
199 767 :M
(net_export\("FortuneServer", )S
f11_15 sf
(NameServer)S
f9_15 sf
(, fortune\);)S
145 821 :M
f2_18 sf
(5.4)S
185 821 :M
(Remote Agents)S
172 849 :M
f0_15 sf
.879 .088(Compute servers \(section 5.2\) and execution engines \(section 3.8\) can be used as general object)J
145 867 :M
.074 .007(servers; that is, as ways of allocating objects at remote sites. These objects can then act as )J
689 867 :M
f4_15 sf
.019(agents)A
f0_15 sf
.043 .004( of the)J
145 885 :M
(initiating site.)S
172 903 :M
.407 .041(Suppose, for example, that we have an engine exported by a database server site. The engine pro)J
762 903 :M
(-)S
145 921 :M
(vides the database as an argument to client procedures:)S
199 951 :M
f9_15 sf
(\(* DataBase Server Site *\))S
199 973 :M
(net_exportEngine\()S
f9_14 sf
(")S
f9_15 sf
(DBServer)S
f9_14 sf
(")S
441 973 :M
f9_15 sf
(, )S
f11_15 sf
(NameServer)S
f9_15 sf
(, dataBase\);)S
endp
%%Page: 24 24
%%BeginPageSetup
initializepage
(luca; page: 24 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(24)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 160 :M
f0_15 sf
.865 .087(A database client could simply send over procedures performing queries on the database \(which, for)J
145 178 :M
.297 .03(complex queries, would be more efficient than repeatedly querying the server remotely\). However, for)J
145 196 :M
(added flexibility, the client can instead create an object at the server site that acts as its remote agent:)S
199 226 :M
f9_15 sf
(\(* DataBase Client Site *\))S
199 248 :M
(let atDBServer =)S
199 270 :M
(  net_importEngine\()S
f9_14 sf
(")S
f9_15 sf
(DBServer)S
f9_14 sf
(")S
459 270 :M
f9_15 sf
(, )S
f11_15 sf
(NameServer)S
f9_15 sf
(\);)S
199 301 :M
(let searchAgent =)S
199 323 :M
(  atDBServer\()S
199 345 :M
(    proc\(dataBase\))S
199 367 :M
(      {state => ...,)S
199 389 :M
(       start => meth ... end,)S
199 411 :M
(       report => meth ... end,)S
199 433 :M
(       stop => meth ... end})S
199 455 :M
(    end\);)S
145 483 :M
f0_15 sf
.294 .029(The execution of the client procedure causes the allocation of an object at the server site with methods)J
145 501 :M
f13_15 sf
<D2>S
f9_15 sf
.129(start)A
f13_15 sf
<D3>S
f0_15 sf
.09 .009(, )J
f13_15 sf
<D2>S
f9_15 sf
.129(report)A
f13_15 sf
<D3>S
f0_15 sf
.189 .019(, and )J
299 501 :M
f13_15 sf
.057<D2>A
f9_15 sf
.171(stop)A
f13_15 sf
.057<D3>A
f0_15 sf
.264 .026(, and with a )J
f13_15 sf
.057<D2>A
f9_15 sf
.171(state)A
f13_15 sf
.057<D3>A
f0_15 sf
.427 .043( field. The server simply returns a network refer)J
762 501 :M
(-)S
145 519 :M
(ence to this object, and is no longer engaged.)S
172 537 :M
.61 .061(We show below an example of what the client can now do. The client starts a remote search in a)J
145 555 :M
.12 .012(background thread, and periodically request a progress report. If the search is successful within a given)J
145 573 :M
.53 .053(time period, everything is fine. If the search takes too long, the remote agent is aborted via )J
f13_15 sf
.077<D2>A
f9_15 sf
.231(stop)A
f13_15 sf
.077<D3>A
f0_15 sf
.346 .035(. If)J
145 591 :M
.125 .013(an intermediate report proves promising, the client may decide to wait for however long it takes for the)J
145 609 :M
(agent to complete, by joining the background thread.)S
199 639 :M
f9_15 sf
(\(* DataBase Client Site *\))S
199 661 :M
(let searchThread =)S
199 683 :M
(  fork\(proc\(\) searchAgent.start\(\) end, 0\);)S
199 714 :M
(var report = "";)S
199 736 :M
(for i = 1 to 10 do)S
199 758 :M
(  pause\(6.0\);)S
199 780 :M
(  report := searchAgent.report\(\);)S
199 802 :M
(  if successful\(report\) then exit end;)S
199 824 :M
(  if promising\(report\) then)S
199 846 :M
(    report := join\(searchThread\); exit;)S
199 868 :M
(  end;)S
199 890 :M
(end;)S
199 912 :M
(searchAgent.stop\(\);)S
145 940 :M
f0_15 sf
.977 .098(Client resources at the server site are released when the client garbage collects the search agents, or)J
145 958 :M
(when the client site dies )S
293 958 :M
([Birrell, )S
345 958 :M
f4_15 sf
(et al.)S
375 958 :M
f0_15 sf
( 1993a].)S
172 976 :M
.235 .023(This technique for remotely allocating objects can be extended to multiple agents searching multi)J
762 976 :M
(-)S
145 994 :M
(ple databases simultaneously, and to agents initiating their own sub-agents.)S
endp
%%Page: 25 25
%%BeginPageSetup
initializepage
(luca; page: 25 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(25)S
145 159 :M
f2_18 sf
(5.5)S
185 159 :M
(Application Partitioning)S
172 187 :M
f0_15 sf
.362 .036(The technique for remotely allocating objects described in section 5.4 can be used for )J
f4_15 sf
.109(application)A
145 205 :M
(partitioning)S
217 205 :M
f0_15 sf
.771 .077(. An application can be organized as a collection of procedures that return objects. When)J
145 223 :M
.755 .076(the application starts, it can pick a site for each object and send the respective procedure to a remote)J
145 241 :M
1.039 .104(engine for that site. This way, the application components can be \(initially\) distributed according to)J
145 259 :M
(dynamic criteria.)S
145 303 :M
f2_18 sf
(5.6)S
185 303 :M
(Agent Migration)S
172 331 :M
f0_15 sf
.633 .063(In this example we consider the case of an untethered agent that moves from site to site carrying)J
145 349 :M
.011 .001(along some state )J
249 349 :M
.011 .001([White 1994]. We write the state as an object, and the agent as a procedure parameter-)J
145 367 :M
(ized on the state and on a site-specific argument:)S
199 397 :M
f9_15 sf
(let state = { ... };)S
199 419 :M
(let agent = proc\(state, arg\) ... end;)S
145 447 :M
f0_15 sf
.136 .014(To be completely self-contained, this agent should have no free identifiers, and should use the state pa)J
762 447 :M
(-)S
145 465 :M
(rameter for all its long-term memory needs.)S
172 483 :M
(The agent can be sent to a new site as follows, assuming )S
514 483 :M
f13_15 sf
<D2>S
f9_15 sf
(atSite1)S
f13_15 sf
<D3>S
f0_15 sf
( is an available remote engine:)S
199 513 :M
f9_15 sf
(atSite1\(proc\(arg\) agent\(copy\(state\),arg\) end\))S
145 541 :M
f0_15 sf
1.116 .112(The )J
174 541 :M
f13_15 sf
.123<D2>A
f9_15 sf
.367(copy)A
f13_15 sf
.123<D3>A
f0_15 sf
.862 .086( operation is explained below, but the intent should be clear: the agent is executed at the)J
145 559 :M
.285 .028(new site, with a local copy of the state it had at the previous site. The agent\325s state is then accessed lo)J
762 559 :M
(-)S
145 577 :M
.369 .037(cally at the new site. Implicitly, we assume that the agent ceases any activity at the old site. The agent)J
145 595 :M
(can repeat this procedure to move to yet another site.)S
172 613 :M
.465 .047(The )J
f13_15 sf
.072<D2>A
f9_15 sf
.217(copy)A
f13_15 sf
.072<D3>A
f0_15 sf
.567 .057( operation is a primitive that produces local copies of \(almost\) arbitrary Obliq values,)J
145 631 :M
-.003(including values that span several sites. Sharing and circularities are preserved, even those that span the)A
145 649 :M
.79 .079(network. Not all values can be copied, however, because not all values can be transmitted. Protected)J
145 667 :M
.93 .093(objects cause exceptions on copying, as do site-specific values such as threads, mutexes, and condi)J
761 667 :M
(-)S
145 685 :M
(tions.)S
172 703 :M
.275 .028(This techniques allows autonomous agents to travel between sites, perhaps eventually returning to)J
145 721 :M
(their original site with results. The original site may go off-line without directly affecting the agent.)S
172 739 :M
.039 .004(The main unpleasantness is that, because of copying, the state consistency between the old site and)J
145 757 :M
.999 .1(the new site must be preserved by programming convention \(by not using the old state\). In the next)J
145 775 :M
(section we see how to migrate state consistently, for individual objects.)S
145 819 :M
f2_18 sf
(5.7)S
185 819 :M
(Object Migration)S
172 847 :M
f0_15 sf
.373 .037(This example uses a remote execution engine to migrate an object between two sites. First we de)J
762 847 :M
(-)S
145 865 :M
.189 .019(fine a procedure that, given an object, the name of an engine, and a name server, migrates the object to)J
145 883 :M
.369 .037(the engine\325s site. Migration is achieved in two phases: \(1\) by causing the engine to remotely clone the)J
145 901 :M
(object, and \(2\) by redirecting the original object to its clone.)S
199 931 :M
f9_15 sf
(let migrateProc =)S
199 953 :M
(  proc\(obj, engineName\))S
199 975 :M
(    let engine = net_importEngine\(engineName, )S
f11_15 sf
(NameServer)S
f9_15 sf
(\);)S
199 997 :M
(    let remoteObj = engine\(proc\(arg\) clone\(obj\) end\);)S
739 997 :M
f0_15 sf
(\(1\))S
199 1019 :M
f9_15 sf
(    redirect obj to remoteObj end;)S
739 1019 :M
f0_15 sf
(\(2\))S
endp
%%Page: 26 26
%%BeginPageSetup
initializepage
(luca; page: 26 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(26)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
199 163 :M
f9_15 sf
(    remoteObj;)S
199 185 :M
(  end;)S
145 213 :M
f0_15 sf
(After migration, operations on the original object are redirected to the remote site, and executed there.)S
172 231 :M
.722 .072(It is critical, though, that the two phases of migration be executed atomically, to preserve the in)J
762 231 :M
(-)S
145 249 :M
.671 .067(tegrity of the object state)J
299 245 :M
f0_13 sf
(3)S
306 249 :M
f0_15 sf
.684 .068(. This can be achieved by serializing the migrating object, and by invoking)J
145 267 :M
(the )S
f13_15 sf
<D2>S
f9_15 sf
(migrateProc)S
f13_15 sf
<D3>S
f0_15 sf
( procedure from a method of that object, where it is applied to self:)S
199 297 :M
f9_15 sf
(let obj1 =)S
199 319 :M
(  { serialized, protected,)S
199 341 :M
(    ...)S
334 341 :M
f11_15 sf
(\(other fields\))S
199 363 :M
f9_15 sf
(    migrate =>)S
199 385 :M
(      meth\(self, engineName\))S
199 407 :M
(        migrateProc\(self, engineName\);)S
199 429 :M
(      end};)S
199 460 :M
(let remoteObj1 = obj1.migrate\()S
f9_14 sf
(")S
f9_15 sf
(Engine1@Site1)S
f9_14 sf
(")S
603 460 :M
f9_15 sf
<29>S
145 488 :M
f0_15 sf
.432 .043(Because of serialization, the object state cannot change during a call to )J
f13_15 sf
.059<D2>A
f9_15 sf
.176(migrate)A
f13_15 sf
.059<D3>A
f0_15 sf
.372 .037(. The call returns a)J
145 506 :M
.87 .087(network reference to the remote clone that can be used in place of )J
f13_15 sf
.129<D2>A
f9_15 sf
.387(obj1)A
f13_15 sf
.129<D3>A
f0_15 sf
1.06 .106( \(which, anyway has been)J
145 524 :M
(redirected to the clone\).)S
172 542 :M
.306 .031(We still need to explain how migration can work for protected objects, since such objects are pro)J
762 542 :M
(-)S
145 560 :M
.351 .035(tected against external cloning and redirection. Note the )J
f13_15 sf
<D2>S
f9_15 sf
.911 .091(migrateProc\(self, ...\))J
693 560 :M
f13_15 sf
.071<D3>A
f0_15 sf
.522 .052( call above,)J
145 578 :M
(where )S
f13_15 sf
<D2>S
f9_15 sf
(self)S
f13_15 sf
<D3>S
f0_15 sf
( is bound to )S
302 578 :M
f13_15 sf
<D2>S
f9_15 sf
(obj1)S
f13_15 sf
<D3>S
f0_15 sf
(. It causes the execution of:)S
199 608 :M
f9_15 sf
(engine\(proc\(arg\) clone\(obj1\) end\))S
145 636 :M
f0_15 sf
.236 .024(Rather subtly, the cloning of )J
322 636 :M
f13_15 sf
<D2>S
f9_15 sf
.092(obj1)A
f13_15 sf
<D3>S
f0_15 sf
.215 .021( here is self-inflicted \(section 3.4\), even though it happens at a site)J
145 654 :M
.717 .072(different from the site of the object. According to the general definition, )J
f13_15 sf
.097<D2>A
f9_15 sf
.29(clone\(obj1\))A
f13_15 sf
.097<D3>A
f0_15 sf
.6 .06( is self-in)J
761 654 :M
(-)S
145 672 :M
.74 .074(flicted because )J
f13_15 sf
.086<D2>A
f9_15 sf
.257(obj1)A
f13_15 sf
.086<D3>A
f0_15 sf
.534 .053( is the same as the self of the last active method of the current thread, which is)J
145 690 :M
f13_15 sf
.181<D2>A
f9_15 sf
.541(migrate)A
f13_15 sf
.181<D3>A
f0_15 sf
1.555 .156(. The redirection operation is similarly self-inflicted. Therefore, the protected status of)J
145 708 :M
f13_15 sf
<D2>S
f9_15 sf
(obj1)S
f13_15 sf
<D3>S
f0_15 sf
( does not inhibit self-initiated migration.)S
172 726 :M
.293 .029(Migration permanently modifies the original object, redirecting all operations to the remote clone.)J
145 744 :M
(In particular, if )S
f13_15 sf
<D2>S
f9_15 sf
(obj1)S
f13_15 sf
<D3>S
f0_15 sf
( is asked to migrate again, the remote clone will properly migrate.)S
172 762 :M
.392 .039(We now make the example a bit more interesting by assuming that the migrating object )J
f13_15 sf
.052<D2>A
f9_15 sf
.157(obj1)A
f13_15 sf
.052<D3>A
f0_15 sf
.199 .02( is)J
145 780 :M
.064 .006(publicly available through a name server. The )J
425 780 :M
f13_15 sf
<D2>S
f9_15 sf
.02(migrate)A
f13_15 sf
<D3>S
f0_15 sf
.053 .005( method can register the migrated object with)J
145 798 :M
(the name server under the old name:)S
199 828 :M
f9_15 sf
(let obj1 =)S
199 850 :M
(  net_export\("obj1", )S
f11_15 sf
(NameServer)S
f9_15 sf
(,)S
199 872 :M
(    { serialized, protected,)S
199 894 :M
(      ...)S
199 916 :M
(      migrate =>)S
199 938 :M
(        meth\(self, engineName\))S
199 960 :M
(          net_export\("obj1", )S
f11_15 sf
(NameServer)S
f9_15 sf
(,)S
199 982 :M
(            migrateProc\(self, engineName\)\);)S
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
145 1001.24 -.24 .24 288.24 1001 .24 145 1001 @a
145 1017 :M
f0_13 sf
(3)S
152 1021 :M
f0_12 sf
( \322Captain, we have a problem. We tele)S
338 1021 :M
(ported an instance of yourself successfully to the planet. But you here failed to disin-)S
145 1033 :M
(tegrate. This is most unfortunate; if you could just step into this waste recycler ...\323)S
endp
%%Page: 27 27
%%BeginPageSetup
initializepage
(luca; page: 27 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(27)S
199 163 :M
f9_15 sf
(        end};)S
145 191 :M
f0_15 sf
.137 .014(This way, old clients of )J
291 191 :M
f13_15 sf
<D2>S
f9_15 sf
.039(obj1)A
f13_15 sf
<D3>S
f0_15 sf
.103 .01( go through aliasing indirections, but new clients acquiring )J
f13_15 sf
<D2>S
f9_15 sf
.039(obj1)A
f13_15 sf
<D3>S
f0_15 sf
.102 .01( from)J
145 209 :M
(the name server operate directly on the migrated object.)S
145 253 :M
f2_18 sf
(5.8)S
185 253 :M
(Application Servers)S
172 281 :M
f0_15 sf
.076 .008(Visual Obliq [Bharat, Brown 1994] is an interactive distributed-application and user-interface gen-)J
145 299 :M
.198 .02(erator, based on Obliq. All distributed applications built in Visual Obliq follow the same model, which)J
145 317 :M
.102 .01(we may call the application server model. In this model, a centralized server supplies interested clients,)J
145 335 :M
1.048 .105(dynamically, with both the client code and the client user interface of a distributed application. The)J
145 353 :M
.829 .083(code transmitted to each client retains lexical bindings to the server site, allowing it to communicate)J
145 371 :M
.004 0(with the server and with other clients. Each client may have separate local state, and may present a sep)J
761 371 :M
(-)S
145 389 :M
(arate view of the application to the user. A typical example is a distributed tic-tac-toe game.)S
145 435 :M
f2_21 sf
(6.)S
172 435 :M
(Syntax Overview)S
145 464 :M
f9_14 sf
(TOP-LEVEL PHRASES)S
478 464 :M
f0_14 sf
(any term or definition ended by )S
f13_15 sf
<D2>S
f9_14 sf
(;)S
670 464 :M
f13_15 sf
<D3>S
145 482 :M
f9_14 sf
(  a;)S
145 509 :M
(DEFINITIONS )S
246 509 :M
f0_14 sf
(\(denoted by )S
316 509 :M
f13_15 sf
<D2>S
f9_14 sf
(d)S
f13_15 sf
<D3>S
f0_14 sf
(; identifiers are denoted by )S
484 509 :M
f13_15 sf
<D2>S
f9_14 sf
(x)S
f13_15 sf
<D3>S
f0_14 sf
(, terms are denoted by )S
626 509 :M
f13_15 sf
<D2>S
f9_14 sf
(a)S
f13_15 sf
<D3>S
f0_14 sf
<29>S
145 527 :M
f9_14 sf
(  )S
162 527 :M
f12_14 sf
(let)S
f9_14 sf
( x)S
204 530 :M
f9_10 sf
(1)S
f12_14 sf
0 -3 rm
(=)S
0 3 rm
f9_14 sf
0 -3 rm
(a)S
0 3 rm
227 530 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(,...,x)S
0 3 rm
f9_10 sf
(n)S
f12_14 sf
0 -3 rm
(=)S
0 3 rm
f9_14 sf
0 -3 rm
(a)S
0 3 rm
306 530 :M
f9_10 sf
(n)S
478 527 :M
f0_14 sf
(definition of constant identifiers)S
145 545 :M
f9_14 sf
(  )S
162 545 :M
f12_14 sf
(let)S
f9_14 sf
( )S
f12_14 sf
(rec)S
221 545 :M
f9_14 sf
( x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f12_14 sf
(=)S
f9_14 sf
(a)S
260 548 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(,...,x)S
0 3 rm
f9_10 sf
(n)S
f12_14 sf
0 -3 rm
(=)S
0 3 rm
f9_14 sf
0 -3 rm
(a)S
0 3 rm
339 548 :M
f9_10 sf
(n)S
478 545 :M
f0_14 sf
(definition of recursive procedures)S
145 563 :M
f9_14 sf
(  )S
162 563 :M
f12_14 sf
(var)S
f9_14 sf
( x)S
204 566 :M
f9_10 sf
(1)S
f12_14 sf
0 -3 rm
(=)S
0 3 rm
f9_14 sf
0 -3 rm
(a)S
0 3 rm
227 566 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(,...,x)S
0 3 rm
f9_10 sf
(n)S
f12_14 sf
0 -3 rm
(=)S
0 3 rm
f9_14 sf
0 -3 rm
(a)S
0 3 rm
306 566 :M
f9_10 sf
(n)S
478 563 :M
f0_14 sf
(definition of updatable identifiers)S
145 590 :M
f9_14 sf
(SEQUENCES )S
f0_14 sf
(\(denoted by )S
299 590 :M
f13_15 sf
<D2>S
f9_14 sf
(s)S
f13_15 sf
<D3>S
f0_14 sf
<29>S
478 590 :M
(each )S
f13_15 sf
<D2>S
f9_14 sf
(a)S
519 593 :M
f9_10 sf
(i)S
f13_15 sf
0 -3 rm
<D3>S
0 3 rm
f0_14 sf
0 -3 rm
( \(a term or a definition\) is)S
0 3 rm
145 608 :M
f9_14 sf
(  a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_14 sf
(;...;a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
478 608 :M
f0_14 sf
(executed; yields )S
f13_15 sf
<D2>S
f9_14 sf
(a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f13_15 sf
<D3>S
f0_14 sf
( \(or )S
f13_15 sf
<D2>S
f9_14 sf
(ok)S
635 608 :M
f13_15 sf
<D3>S
f0_14 sf
( if n=0\))S
145 635 :M
f9_14 sf
(TERMS )S
f0_14 sf
(\(denoted by )S
265 635 :M
f13_15 sf
<D2>S
f9_14 sf
(a)S
277 635 :M
f13_15 sf
<D3>S
f0_14 sf
(, )S
f13_15 sf
<D2>S
f9_14 sf
(b)S
f13_15 sf
<D3>S
f0_14 sf
(, )S
f13_15 sf
<D2>S
f9_14 sf
(c)S
320 635 :M
f13_15 sf
<D3>S
f0_14 sf
(; identifiers are denoted by )S
f13_15 sf
<D2>S
f9_14 sf
(x)S
488 635 :M
f13_15 sf
<D3>S
f0_14 sf
(, )S
f13_15 sf
<D2>S
f9_14 sf
(l)S
f13_15 sf
<D3>S
f0_14 sf
(; libraries are denoted by )S
655 635 :M
f13_15 sf
<D2>S
f9_14 sf
(m)S
f13_15 sf
<D3>S
f0_14 sf
<29>S
145 653 :M
f9_14 sf
(  x)S
289 653 :M
(m_x)S
478 653 :M
f0_14 sf
(identifiers)S
145 671 :M
f9_14 sf
(  x)S
f12_14 sf
(:=)S
187 671 :M
f9_14 sf
(a)S
478 671 :M
f0_14 sf
(assignment)S
145 698 :M
f9_14 sf
(  )S
162 698 :M
f12_14 sf
(ok)S
179 698 :M
f9_14 sf
(  )S
f12_14 sf
(true)S
229 698 :M
f9_14 sf
(  )S
246 698 :M
f12_14 sf
(false)S
f9_14 sf
(  'a'  "abc"  3  1.5)S
478 698 :M
f0_14 sf
(constants)S
145 725 :M
f9_14 sf
(  [a)S
179 728 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(,...,a)S
0 3 rm
f9_10 sf
(n)S
f9_14 sf
0 -3 rm
(])S
0 3 rm
478 725 :M
f0_14 sf
(arrays)S
145 743 :M
f9_14 sf
(  a[b])S
289 743 :M
(a[b])S
323 743 :M
f12_14 sf
(:=)S
f9_14 sf
(c)S
478 743 :M
f0_14 sf
(array selection, array update)S
145 761 :M
f9_14 sf
(  a[b)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_14 sf
( for b)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_14 sf
(])S
289 761 :M
(a[b)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_14 sf
( for b)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_14 sf
(])S
f12_14 sf
(:=)S
401 761 :M
f9_14 sf
(c)S
478 761 :M
f0_14 sf
(subarray selection, subarray update)S
145 788 :M
f9_14 sf
(  )S
162 788 :M
f12_14 sf
(option)S
f9_14 sf
( l => s )S
f12_14 sf
(end)S
478 788 :M
f0_14 sf
(term )S
f13_15 sf
<D2>S
f9_14 sf
(s)S
519 788 :M
f13_15 sf
<D3>S
f0_14 sf
( tagged by )S
f13_15 sf
<D2>S
f9_14 sf
(l)S
595 788 :M
f13_15 sf
<D3>S
145 815 :M
f9_14 sf
(  )S
162 815 :M
f12_14 sf
(proc)S
f9_14 sf
(\(x)S
212 818 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(,...,x)S
0 3 rm
f9_10 sf
(n)S
f9_14 sf
0 -3 rm
(\) s )S
0 3 rm
308 815 :M
f12_14 sf
(end)S
478 815 :M
f0_14 sf
(procedures)S
145 833 :M
f9_14 sf
(  a\(b)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_14 sf
(,...,b)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_14 sf
<29>S
478 833 :M
f0_14 sf
(procedure invocation)S
145 851 :M
f9_14 sf
(  m_x\(a)S
204 854 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(,...,a)S
0 3 rm
f9_10 sf
(n)S
f9_14 sf
0 -3 rm
<29>S
0 3 rm
478 851 :M
f0_14 sf
(invocation of )S
556 851 :M
f13_15 sf
<D2>S
f9_14 sf
(x)S
f13_15 sf
<D3>S
f0_14 sf
( from library )S
f13_15 sf
<D2>S
f9_14 sf
(m)S
657 851 :M
f13_15 sf
<D3>S
145 869 :M
f9_14 sf
(  a b c)S
478 869 :M
f0_14 sf
(infix \(right-ass.\) version of )S
f13_15 sf
<D2>S
f9_14 sf
(b\(a,c\))S
686 869 :M
f13_15 sf
<D3>S
145 896 :M
f9_14 sf
(  )S
162 896 :M
f12_14 sf
(meth)S
f9_14 sf
(\(x,x)S
229 899 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(,...,x)S
0 3 rm
f9_10 sf
(n)S
f9_14 sf
0 -3 rm
(\) s )S
0 3 rm
325 896 :M
f12_14 sf
(end)S
478 896 :M
f0_14 sf
(method with self )S
576 896 :M
f13_15 sf
<D2>S
f9_14 sf
(x)S
f13_15 sf
<D3>S
145 914 :M
f9_14 sf
(  {l)S
179 917 :M
f9_10 sf
(1)S
f12_14 sf
0 -3 rm
(=>)S
0 3 rm
202 914 :M
f9_14 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_14 sf
(,...,l)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f12_14 sf
(=>)S
289 914 :M
f9_14 sf
(a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_14 sf
(})S
478 914 :M
f0_14 sf
(object with fields named )S
620 914 :M
f13_15 sf
<D2>S
f9_14 sf
(l)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_14 sf
(...)S
651 914 :M
f13_15 sf
<D2>S
f9_14 sf
(l)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f13_15 sf
<D3>S
145 932 :M
f9_14 sf
(  {)S
f12_14 sf
(protected)S
246 932 :M
f9_14 sf
(, )S
263 932 :M
f12_14 sf
(serialized)S
f9_14 sf
(, ...})S
478 932 :M
f0_14 sf
(protected and serialized object)S
145 950 :M
f9_14 sf
(  {l)S
179 953 :M
f9_10 sf
(1)S
f12_14 sf
0 -3 rm
(=>alias)S
0 3 rm
244 950 :M
f9_14 sf
( l)S
261 953 :M
f9_10 sf
(2)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(of)S
0 3 rm
292 950 :M
f9_14 sf
( a)S
309 953 :M
f9_10 sf
(2)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(end)S
0 3 rm
349 950 :M
f9_14 sf
(,...})S
478 950 :M
f0_14 sf
(object with redirected fields)S
145 968 :M
f9_14 sf
(  a.l    a.l\(a)S
263 971 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(, ..., a)S
0 3 rm
f9_10 sf
(n)S
f9_14 sf
0 -3 rm
<29>S
0 3 rm
478 968 :M
f0_14 sf
(field selection / method invocation)S
145 986 :M
f9_14 sf
(  a.l)S
f12_14 sf
(:=)S
204 986 :M
f9_14 sf
(b)S
478 986 :M
f0_14 sf
(field update / method override)S
145 1004 :M
f9_14 sf
(  )S
162 1004 :M
f12_14 sf
(clone)S
f9_14 sf
(\(a)S
221 1007 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(,...,a)S
0 3 rm
f9_10 sf
(n)S
f9_14 sf
0 -3 rm
<29>S
0 3 rm
478 1004 :M
f0_14 sf
(object cloning)S
endp
%%Page: 28 28
%%BeginPageSetup
initializepage
(luca; page: 28 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(28)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 160 :M
f9_14 sf
(  a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_14 sf
(.l)S
193 163 :M
f9_10 sf
(1)S
f12_14 sf
0 -3 rm
(:=alias)S
0 3 rm
258 160 :M
f9_14 sf
( l)S
275 163 :M
f9_10 sf
(2)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(of)S
0 3 rm
306 160 :M
f9_14 sf
( a)S
323 163 :M
f9_10 sf
(2)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(end)S
0 3 rm
478 160 :M
f0_14 sf
(field redirection)S
145 178 :M
f12_14 sf
(  redirect )S
f9_14 sf
(a)S
246 181 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(to)S
0 3 rm
277 178 :M
f9_14 sf
( a)S
294 181 :M
f9_10 sf
(2)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(end)S
0 3 rm
478 178 :M
f0_14 sf
(object redirection)S
145 205 :M
f9_14 sf
(  d)S
478 205 :M
f0_14 sf
(definition)S
145 223 :M
f9_14 sf
(  )S
162 223 :M
f12_14 sf
(if)S
179 223 :M
f9_14 sf
( s)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_14 sf
( )S
f12_14 sf
(then)S
243 223 :M
f9_14 sf
( s)S
260 226 :M
f9_10 sf
(2)S
478 223 :M
f0_14 sf
(conditional)S
145 241 :M
f9_14 sf
(    )S
179 241 :M
f12_14 sf
(elsif)S
f9_14 sf
( s)S
f9_10 sf
0 3 rm
(3)S
0 -3 rm
f9_14 sf
( )S
f12_14 sf
(then)S
285 241 :M
f9_14 sf
( s)S
302 244 :M
f9_10 sf
(4)S
f9_14 sf
0 -3 rm
(... )S
0 3 rm
342 241 :M
f12_14 sf
(else)S
f9_14 sf
( s)S
392 244 :M
f9_10 sf
(n)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(end)S
0 3 rm
478 241 :M
f0_14 sf
(  \()S
490 241 :M
f13_15 sf
<D2>S
f9_14 sf
(elsif)S
f13_15 sf
<D3>S
f0_14 sf
(, )S
f13_15 sf
<D2>S
f9_14 sf
(else)S
f13_15 sf
<D3>S
f0_14 sf
( optional\))S
145 259 :M
f9_14 sf
(  a )S
179 259 :M
f12_14 sf
(andif)S
f9_14 sf
( b)S
289 259 :M
(a )S
306 259 :M
f12_14 sf
(orif)S
f9_14 sf
( b)S
478 259 :M
f0_14 sf
(conditional conjunction/disjunction)S
145 277 :M
f9_14 sf
(  a )S
179 277 :M
f12_14 sf
(is)S
f9_14 sf
( b)S
289 277 :M
(a )S
306 277 :M
f12_14 sf
(isnot)S
f9_14 sf
( b)S
478 277 :M
f0_14 sf
(identical/not identical predicates)S
145 295 :M
f9_14 sf
(  )S
162 295 :M
f12_14 sf
(case)S
f9_14 sf
( s )S
221 295 :M
f12_14 sf
(of )S
f9_14 sf
(l)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_14 sf
(\(x)S
277 298 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
<29>S
0 3 rm
f12_14 sf
0 -3 rm
(=>)S
0 3 rm
308 295 :M
f9_14 sf
(s)S
317 298 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(,...,)S
0 3 rm
478 295 :M
f0_14 sf
(case over the tag )S
f13_15 sf
<D2>S
f9_14 sf
(l)S
587 298 :M
f9_10 sf
(i)S
f13_15 sf
0 -3 rm
<D3>S
0 3 rm
f0_14 sf
0 -3 rm
( of an option value)S
0 3 rm
145 313 :M
f9_14 sf
(    l)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_14 sf
(\(x)S
210 316 :M
f9_10 sf
(n)S
f9_14 sf
0 -3 rm
<29>S
0 3 rm
f12_14 sf
0 -3 rm
(=>)S
0 3 rm
241 313 :M
f9_14 sf
(s)S
250 316 :M
f9_10 sf
(n)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(else)S
0 3 rm
298 313 :M
f9_14 sf
( s)S
315 316 :M
f9_10 sf
(0)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(end)S
0 3 rm
478 313 :M
f0_14 sf
(  binding )S
f13_15 sf
<D2>S
f9_14 sf
(x)S
543 316 :M
f9_10 sf
(i)S
f13_15 sf
0 -3 rm
<D3>S
0 3 rm
f0_14 sf
0 -3 rm
( in )S
0 3 rm
570 313 :M
f13_15 sf
<D2>S
f9_14 sf
(s)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_14 sf
( \()S
f13_15 sf
<D2>S
f9_14 sf
(else)S
635 313 :M
f13_15 sf
<D3>S
f0_14 sf
( optional\))S
145 331 :M
f9_14 sf
(  )S
162 331 :M
f12_14 sf
(loop)S
f9_14 sf
( s )S
221 331 :M
f12_14 sf
(end)S
478 331 :M
f0_14 sf
(loop)S
145 349 :M
f9_14 sf
(  )S
162 349 :M
f12_14 sf
(for)S
f9_14 sf
( i=a )S
f12_14 sf
(to)S
246 349 :M
f9_14 sf
( b )S
f12_14 sf
(do)S
288 349 :M
f9_14 sf
( s )S
f12_14 sf
(end)S
478 349 :M
f0_14 sf
(iteration through successive integers)S
145 367 :M
f9_14 sf
(  )S
162 367 :M
f12_14 sf
(foreach)S
221 367 :M
f9_14 sf
( i )S
f12_14 sf
(in)S
263 367 :M
f9_14 sf
( a )S
f12_14 sf
(do)S
305 367 :M
f9_14 sf
( s )S
f12_14 sf
(end)S
478 367 :M
f0_14 sf
(iteration through an array)S
145 385 :M
f9_14 sf
(  )S
162 385 :M
f12_14 sf
(foreach)S
221 385 :M
f9_14 sf
( i )S
f12_14 sf
(in)S
263 385 :M
f9_14 sf
( a )S
f12_14 sf
(map)S
f9_14 sf
( s )S
f12_14 sf
(end)S
478 385 :M
f0_14 sf
(yielding an array of the results)S
145 403 :M
f9_14 sf
(  )S
162 403 :M
f12_14 sf
(exit)S
478 403 :M
f0_14 sf
(exit the innermost loop, for, foreach)S
145 430 :M
f9_14 sf
(  )S
162 430 :M
f12_14 sf
(exception)S
f9_14 sf
(\("exc"\))S
478 430 :M
f0_14 sf
(new exception value named )S
f13_15 sf
<D2>S
f9_14 sf
(exc)S
666 430 :M
f13_15 sf
<D3>S
145 448 :M
f9_14 sf
(  )S
162 448 :M
f12_14 sf
(raise)S
f9_14 sf
(\(a\))S
478 448 :M
f0_14 sf
(raise an exception)S
145 466 :M
f9_14 sf
(  )S
162 466 :M
f12_14 sf
(try)S
f9_14 sf
( s )S
f12_14 sf
(except)S
478 466 :M
f0_14 sf
(exception capture)S
145 484 :M
f9_14 sf
(    a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f12_14 sf
(=>)S
210 484 :M
f9_14 sf
(s)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_14 sf
(,...,a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f12_14 sf
(=>)S
297 484 :M
f9_14 sf
(s)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_14 sf
( )S
f12_14 sf
(else)S
353 484 :M
f9_14 sf
( s)S
370 487 :M
f9_10 sf
(0)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(end)S
0 3 rm
478 484 :M
f0_14 sf
(  \()S
490 484 :M
f13_15 sf
<D2>S
f9_14 sf
(else)S
f13_15 sf
<D3>S
f0_14 sf
( optional\))S
145 502 :M
f9_14 sf
(  )S
162 502 :M
f12_14 sf
(try)S
f9_14 sf
( s)S
204 505 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(finally)S
0 3 rm
277 502 :M
f9_14 sf
( s)S
294 505 :M
f9_10 sf
(2)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(end)S
0 3 rm
478 502 :M
f0_14 sf
(finalization)S
145 529 :M
f9_14 sf
(  )S
162 529 :M
f12_14 sf
(condition)S
f9_14 sf
(\(\)  )S
271 529 :M
f12_14 sf
(signal)S
f9_14 sf
(\(a\))S
347 529 :M
f12_14 sf
(  broadcast)S
f9_14 sf
(\(a\))S
478 529 :M
f0_14 sf
(creating and signaling a condition)S
145 547 :M
f9_14 sf
(  )S
162 547 :M
f12_14 sf
(watch)S
f9_14 sf
( s)S
221 550 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(until)S
0 3 rm
f9_14 sf
0 -3 rm
( s)S
0 3 rm
294 550 :M
f9_10 sf
(2)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(end)S
0 3 rm
478 547 :M
f0_14 sf
(waiting for a signal and a boolean guard)S
145 565 :M
f9_14 sf
(  )S
162 565 :M
f12_14 sf
(fork)S
f9_14 sf
(\(a)S
212 568 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(,a)S
0 3 rm
235 568 :M
f9_10 sf
(2)S
f9_14 sf
0 -3 rm
<29>S
0 3 rm
f12_14 sf
0 -3 rm
(   join)S
0 3 rm
308 565 :M
f9_14 sf
(\(a\))S
478 565 :M
f0_14 sf
(forking and joining a thread)S
145 583 :M
f9_14 sf
(  )S
162 583 :M
f12_14 sf
(pause)S
f9_14 sf
(\(a\))S
478 583 :M
f0_14 sf
(pausing the current thread)S
145 610 :M
f9_14 sf
(  )S
162 610 :M
f12_14 sf
(mutex)S
f9_14 sf
<2829>S
478 610 :M
f0_14 sf
(creating a mutex)S
145 628 :M
f9_14 sf
(  )S
162 628 :M
f12_14 sf
(lock)S
f9_14 sf
( s)S
212 631 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(do)S
0 3 rm
243 628 :M
f9_14 sf
( s)S
260 631 :M
f9_10 sf
(2)S
f9_14 sf
0 -3 rm
( )S
0 3 rm
f12_14 sf
0 -3 rm
(end)S
0 3 rm
478 628 :M
f0_14 sf
(locking a mutex in a scope)S
145 646 :M
f9_14 sf
(  )S
162 646 :M
f12_14 sf
(wait)S
f9_14 sf
(\(a)S
212 649 :M
f9_10 sf
(1)S
f9_14 sf
0 -3 rm
(,a)S
0 3 rm
235 649 :M
f9_10 sf
(2)S
f9_14 sf
0 -3 rm
<29>S
0 3 rm
478 646 :M
f0_14 sf
(waiting on a mutex for a condition)S
145 673 :M
f9_14 sf
(  \(s\))S
478 673 :M
f0_14 sf
(block structure / precedence group)S
145 728 :M
f2_21 sf
(7.)S
172 728 :M
(Conclusions)S
172 757 :M
f0_15 sf
.212 .021(Obliq addresses a very dynamic form of distributed programming, where objects can redirect their)J
145 775 :M
.289 .029(behavior over the network, and where computations can roam between network sites. We feel that this)J
145 793 :M
.221 .022(kind of programming is still in its infancy, and that not all the fundamental issues can yet be addressed)J
145 811 :M
.73 .073(at once. Where in doubt, we have given precedence to flexible mechanism over robust methodology,)J
145 829 :M
.232 .023(hoping that methodology will develop with experience. In this spirit, for example, Obliq could be used)J
145 847 :M
-.004(to experiment in the design and implementation of agent/place paradigms )A
590 847 :M
-.004([White 1994], using the basic)A
145 865 :M
(techniques of section 5.)S
145 893 :M
f6_15 sf
(Related Work)S
172 921 :M
f0_15 sf
2.356 .236(Obliq\325s features and application domains overlap with programming languages such as ML)J
145 939 :M
.919 .092([Milner, Tofte, Harper 1989; Reppy 1991])J
408 939 :M
1.089 .109(, Modula-3 )J
482 939 :M
.748 .075([Nelson 1991])J
570 939 :M
1.225 .122(, and Self )J
636 939 :M
.863 .086([Ungar, Smith 1987])J
764 939 :M
(,)S
145 957 :M
4.899 .49(with scripting languages such as Tcl )J
414 957 :M
4.043 .404([Ousterhout 1994], AppleScript [Apple 1993], VBA)J
145 975 :M
.979 .098([Brockschmidt 1994; Mansfield 1994])J
382 975 :M
1.358 .136(, and Telescript )J
485 975 :M
1.121 .112([White 1994], and with distributed languages)J
145 993 :M
(such as Orca [Bal, Kaashoek, Tanenbaum 1992])S
435 993 :M
(, Fort\216 )S
478 993 :M
([Fort\216 1994], and Facile [Thomsen, )S
f4_15 sf
(et al.)S
724 993 :M
f0_15 sf
( 1993])S
763 993 :M
(.)S
172 1011 :M
.362 .036(None of these languages, however, has the same mix of features as Obliq, particularly concerning)J
145 1029 :M
.083 .008(the distribution aspects. Our choice of features was largely determined by the idea of a distributed lexi)J
761 1029 :M
(-)S
endp
%%Page: 29 29
%%BeginPageSetup
initializepage
(luca; page: 29 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(29)S
145 160 :M
f0_15 sf
.378 .038(cally scoped language, by the desire for a simple object model that would scale up to distributed com)J
762 160 :M
(-)S
145 178 :M
(putation, and by the availability of a sophisticated network-objects implementation technology.)S
172 196 :M
1.416 .142(The Obliq object primitives were designed in parallel with work on the type theory of objects)J
145 214 :M
([Abadi, Cardelli 1994]; distributed scoping and distributed semantics, however, are not treated there.)S
145 242 :M
f6_15 sf
(Status)S
172 270 :M
f0_15 sf
.149 .015(Obliq has been available at Digital SRC for about a year. In addition to incidental programming, it)J
145 288 :M
1.779 .178(has been used extensively as a scripting language for algorithm animation [Brown 1994])J
713 288 :M
2.336 .234( and 3D)J
145 306 :M
1.347 .135(graphics [Najork, Brown 1994])J
341 306 :M
1.546 .155(, and as the basis of a distributed-application builder \(Visual Obliq)J
145 324 :M
([Bharat, Brown 1994]\).)S
172 342 :M
1.153 .115(The Obliq implementation provides access to many popular Modula-3 libraries [Horning, )J
f4_15 sf
.836 .084(et al.)J
145 360 :M
f0_15 sf
(1993])S
180 360 :M
.342 .034( and to an extensive user interface tool kit [Brown, Meehan 1994]. Obliq can be used as a stand-)J
145 378 :M
.976 .098(alone interactive interpeter. It can also be embedded as a library in Modula-3 applications, allowing)J
145 396 :M
(them to interact remotely through Obliq scripts.)S
172 414 :M
2.914 .291(The implementation and complete documentation is available on the World Wide Web at)J
145 432 :M
f13_15 sf
<D2>S
f0_15 sf
(http://www.)S
f13_15 sf
(-)S
f0_15 sf
(research.)S
274 432 :M
f13_15 sf
(-)S
f0_15 sf
(digital.)S
f13_15 sf
(-)S
f0_15 sf
(com/)S
346 432 :M
f13_15 sf
(-)S
f0_15 sf
(SRC/)S
f13_15 sf
(-)S
f0_15 sf
(home.)S
f13_15 sf
(-)S
f0_15 sf
(html)S
443 432 :M
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 460 :M
f6_15 sf
(Future Work)S
172 488 :M
f0_15 sf
(Issues of authentication, security, authority delegation, and accounting remain to be explored.)S
145 534 :M
f2_21 sf
(Acknowledgments)S
172 563 :M
f0_15 sf
.155 .015(The Network Objects project at SRC provided the infrastructure without which Obliq would never)J
145 581 :M
(have been thought of. Alan Knaff implemented the metaparser layer used in the Obliq parser.)S
endp
%%Page: 30 30
%%BeginPageSetup
initializepage
(luca; page: 30 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(30)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 188 :M
f2_21 sf
(A.)S
172 188 :M
(Language Reference)S
172 217 :M
f0_15 sf
.722 .072(This section describes the syntax and semantics of the Obliq language. Interactions with the sur)J
762 217 :M
(-)S
145 235 :M
.801 .08(rounding system environment are described in section B. Interactions with the surrounding program)J
762 235 :M
(-)S
145 253 :M
(ming environment are described in section C.)S
145 297 :M
f2_18 sf
(A.1)S
185 297 :M
(Syntactic Structures)S
172 325 :M
f0_15 sf
.301 .03(We begin with an overview of some principles that pervade the syntax of Obliq. While the formal)J
145 343 :M
.35 .035(grammar has the final word \(section A.6\), these principles should help in predicting the correct syntax)J
145 361 :M
(to be used in programs.)S
172 379 :M
2.046 .205(Obliq\325s syntactic structures can be classified into )J
495 379 :M
f4_15 sf
.149(identifiers)A
f0_15 sf
.168 .017(, )J
f4_15 sf
.17(definitions)A
630 379 :M
f0_15 sf
.899 .09(, )J
f4_15 sf
.958(terms)A
f0_15 sf
1.893 .189(, and )J
714 379 :M
f4_15 sf
2.085 .209(term se-)J
145 397 :M
.133(quences)A
f0_15 sf
.532 .053(. Definitions establish bindings, terms denote values, and term sequences represent sequential)J
145 415 :M
(evaluation. )S
215 415 :M
f4_15 sf
-.005(Final commas)A
f0_15 sf
-.004( in term and definition lists, as well as )A
532 415 :M
f4_15 sf
(final semicolons)S
630 415 :M
f0_15 sf
-.004( in term sequences, are)A
145 433 :M
(always optional.)S
145 465 :M
f2_15 sf
(A.1.1)S
185 465 :M
(Identifiers)S
172 493 :M
f0_15 sf
.055 .006(Obliq\325s )J
221 493 :M
f4_15 sf
.028 .003(unqualified identifiers)J
354 493 :M
f0_15 sf
.05 .005( are either case sensitive sequences of alphanumerics beginning with)J
145 511 :M
.328 .033(a letter, or sequences of special characters \(section A.5\). By convention, identifiers used for constants,)J
145 529 :M
.347 .035(variables, procedures, fields, and methods begin with a lower case letter, and are internally capitalized)J
145 547 :M
(on word boundaries. Type identifiers \(section A.4.1\) begin with an upper case letter.)S
172 565 :M
f4_15 sf
.203 .02(Qualified identifiers)J
294 565 :M
f0_15 sf
.423 .042( have the form )J
f13_15 sf
.077<D2>A
f9_15 sf
.231(m_x)A
f13_15 sf
.077<D3>A
f0_15 sf
.419 .042( where )J
f13_15 sf
.077<D2>A
f9_15 sf
.231(m)A
f13_15 sf
.077<D3>A
f0_15 sf
.204 .02( is a )J
510 565 :M
f4_15 sf
(library)S
552 565 :M
f0_15 sf
.369 .037( name \(alphanumeric\), and )J
719 565 :M
f13_15 sf
.077<D2>A
f9_15 sf
.231(x)A
f13_15 sf
.077<D3>A
f0_15 sf
.325 .033( is an)J
145 583 :M
1.524 .152(unqualified identifier. By convention, the names of built-in libraries begin with lower case letters,)J
145 601 :M
(while the names of user libraries begin with an upper case letter.)S
172 619 :M
.579 .058(All identifiers are )J
f4_15 sf
.978 .098(lexically scoped)J
f0_15 sf
.635 .064(. Unqualified identifiers are subject to block scoping, while li)J
761 619 :M
(-)S
145 637 :M
(brary names are scoped in a global environment.)S
172 655 :M
f4_15 sf
1.227 .123(Field names)J
f0_15 sf
.81 .081( \(for object and option values\) have the same lexical structure as unqualified identi)J
762 655 :M
(-)S
145 673 :M
(fiers. Field names are not subject to scoping.)S
145 705 :M
f2_15 sf
(A.1.2)S
185 705 :M
(Definitions)S
172 733 :M
f0_15 sf
.572 .057(Definitions begin with either )J
353 733 :M
f13_15 sf
.056<D2>A
f9_15 sf
.169(let)A
f13_15 sf
.056<D3>A
f0_15 sf
.117 .012(, )J
f13_15 sf
.056<D2>A
f9_15 sf
.739 .074(let rec)J
461 733 :M
f13_15 sf
.221<D3>A
f0_15 sf
.728 .073(, or )J
490 733 :M
f13_15 sf
.066<D2>A
f9_15 sf
.197(var)A
f13_15 sf
.066<D3>A
f0_15 sf
.531 .053(, followed by a comma-separated list of)J
145 751 :M
.327 .033(binders, which bind unqualified identifiers to terms. A )J
f13_15 sf
<D2>S
f9_15 sf
.121(let)A
f13_15 sf
<D3>S
f0_15 sf
.407 .041( definition introduces constant identifiers,)J
145 769 :M
1.614 .161(while a )J
197 769 :M
f13_15 sf
.108<D2>A
f9_15 sf
.325(var)A
f13_15 sf
.108<D3>A
f0_15 sf
.962 .096( definition introduces assignable identifiers \(variables\). A )J
f13_15 sf
.108<D2>A
f9_15 sf
.325(let\312rec)A
f13_15 sf
.108<D3>A
f0_15 sf
.944 .094( definition intro)J
762 769 :M
(-)S
145 787 :M
(duces a collection of identifiers bound to mutually recursive procedures.)S
145 819 :M
f2_15 sf
(A.1.3)S
185 819 :M
(Terms)S
172 847 :M
f0_15 sf
.803 .08(The Obliq language is value-oriented: almost every syntactic structure is a )J
f4_15 sf
.305(term)A
665 847 :M
f0_15 sf
.959 .096(, and every term)J
145 865 :M
.011 .001(produces a value. Terms whose main purpose is to cause side-effects produce the value )J
f13_15 sf
<D2>S
f9_15 sf
(ok)S
f13_15 sf
<D3>S
f0_15 sf
(. Terms can)S
145 883 :M
(be classified into )S
f4_15 sf
(identifier terms)S
f0_15 sf
(, )S
350 883 :M
f4_15 sf
(data terms)S
414 883 :M
f0_15 sf
(, )S
f4_15 sf
(constructs)S
483 883 :M
f0_15 sf
(, and )S
516 883 :M
f4_15 sf
(operations)S
f0_15 sf
(.)S
172 901 :M
f4_15 sf
(Identifier terms)S
265 901 :M
f0_15 sf
( are qualified or unqualified identifiers.)S
172 919 :M
f4_15 sf
(Data terms)S
f0_15 sf
( have specialized syntax for various built-in data structures.)S
172 937 :M
f4_15 sf
.136(Constructs)A
f0_15 sf
.508 .051( have individual specialized syntax, but whenever they begin with a keyword they end)J
145 955 :M
(with the keyword )S
254 955 :M
f13_15 sf
<D2>S
f9_15 sf
(end)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 973 :M
f4_15 sf
(Operations)S
240 973 :M
f0_15 sf
.55 .055( can be either prefix or infix. A prefix operation consists of an term \(indicating an op-)J
145 991 :M
.477 .048(eration, or evaluating to a procedure\) followed by a parenthesized, comma-separated, list of argument)J
145 1009 :M
.257 .026(terms. An infix operation consists of a term, an unqualified identifier, and another term. Every unqual)J
762 1009 :M
(-)S
145 1027 :M
.391 .039(ified identifier that denotes a built-in binary operator or a binary procedure can be used with both pre)J
762 1027 :M
(-)S
endp
%%Page: 31 31
%%BeginPageSetup
initializepage
(luca; page: 31 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(31)S
145 160 :M
f0_15 sf
.089 .009(fix and infix syntax. The operator )J
f13_15 sf
<D2>S
f9_15 sf
(-)S
f13_15 sf
<D3>S
f0_15 sf
.088 .009( \(minus\) can be simply placed in front of a term, without requiring)J
145 178 :M
(parentheses.)S
145 210 :M
f2_15 sf
(A.1.4)S
185 210 :M
(Term Sequences)S
172 238 :M
f0_15 sf
.45 .045(Term sequences are lists of terms separated by semicolons: they indicate the sequential execution)J
145 256 :M
.564 .056(of terms from left to right. Semicolons are used in Obliq exclusively to indicate sequential execution;)J
145 274 :M
(all other kinds of lists are separated by commas.)S
172 292 :M
.128 .013(Definitions happen to be terms as well \(their value is always the constant )J
617 292 :M
f13_15 sf
<D2>S
f9_15 sf
.048(ok)A
f13_15 sf
<D3>S
f0_15 sf
.114 .011(\), and hence may ap-)J
145 310 :M
.681 .068(pear in sequences. Definitions establish bindings whose scope extends to the whole sequence to their)J
145 328 :M
(right.)S
145 360 :M
f2_15 sf
(A.1.5)S
185 360 :M
(Built-In Operators)S
172 388 :M
f0_15 sf
.937 .094(All built-in operators are available as qualified names through a set of built-in libraries. For ex)J
762 388 :M
(-)S
145 406 :M
.785 .079(ample, real addition is )J
f13_15 sf
.11<D2>A
f9_15 sf
.33(real_+\(r)A
f9_10 sf
0 3 rm
.22(1)A
0 -3 rm
f9_15 sf
.33(,r)A
f9_10 sf
0 3 rm
.22(2)A
0 -3 rm
f9_15 sf
.33<29>A
f13_15 sf
.11<D3>A
f0_15 sf
.538 .054( from the )J
f13_15 sf
.11<D2>A
f9_15 sf
.33(real)A
f13_15 sf
.11<D3>A
f0_15 sf
.998 .1( built-in library. Common built-in opera-)J
145 424 :M
.861 .086(tions are made available also without library qualification, mostly in the form of infix operators. So,)J
145 442 :M
f13_15 sf
<D2>S
f9_15 sf
(r)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(+r)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( is also admitted.)S
145 474 :M
f2_15 sf
(A.1.6)S
185 474 :M
(Operator Precedence)S
172 502 :M
f0_15 sf
.561 .056(Operator precedence is the same for all infix operators, both built-in and user-defined. All opera)J
762 502 :M
(-)S
145 520 :M
1.525 .153(tors are right-associative, and evaluate their arguments from left to right. Infix operators bind less)J
145 538 :M
1.138 .114(tightly than procedure call, object selection, and array indexing. Parentheses can be used for prece)J
761 538 :M
(-)S
145 556 :M
(dence grouping.)S
172 574 :M
.957 .096(The minus sign for negative number literals is )J
f13_15 sf
.13<D2>A
f0_15 sf
.352(~)A
f13_15 sf
.13<D3>A
f0_15 sf
.739 .074(; this is not an operator: it is part of the literal.)J
145 592 :M
1.643 .164(The form )J
210 592 :M
f13_15 sf
.172<D2>A
f9_15 sf
.515(-n)A
f13_15 sf
.172<D3>A
f0_15 sf
.979 .098( is equivalent to )J
f13_15 sf
.172<D2>A
f9_15 sf
.515(0-n)A
f13_15 sf
.172<D3>A
f0_15 sf
1.389 .139(, particularly with respect to operator precedence. As a conse)J
762 592 :M
(-)S
145 610 :M
(quence of these rules, )S
279 610 :M
f13_15 sf
<D2>S
f9_15 sf
(-5-3)S
f13_15 sf
<D3>S
f0_15 sf
( )S
f13_15 sf
(7)S
335 610 :M
f0_15 sf
( )S
f13_15 sf
<D2>S
f9_15 sf
(0-5-3)S
f13_15 sf
<D3>S
f0_15 sf
( )S
393 610 :M
f13_15 sf
(7)S
f0_15 sf
( )S
407 610 :M
f13_15 sf
<D2>S
f9_15 sf
(0-\(5-3\))S
f13_15 sf
<D3>S
f0_15 sf
( = )S
492 610 :M
f13_15 sf
<D2>S
f9_15 sf
(~2)S
f13_15 sf
<D3>S
f0_15 sf
(, while )S
f13_15 sf
<D2>S
f9_15 sf
(~5-3)S
f13_15 sf
<D3>S
f0_15 sf
( = )S
618 610 :M
f13_15 sf
<D2>S
f9_15 sf
(~8)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 654 :M
f2_18 sf
(A.2)S
185 654 :M
(Data Structures)S
172 682 :M
f0_15 sf
.322 .032(A network address is a pair consisting of a )J
435 682 :M
f4_15 sf
.232 .023(site address)J
507 682 :M
f0_15 sf
.393 .039( and a )J
548 682 :M
f4_15 sf
.557 .056(memory address)J
f0_15 sf
.218 .022( at that site. The se)J
762 682 :M
(-)S
145 700 :M
.42 .042(mantics of Obliq data can be described consistently by considering all addresses as network addresses)J
145 718 :M
-.007(in the sense above. Obliq data structures are assembled out of network addresses, just like ordinary data)A
145 736 :M
.305 .031(structures are assembled out of local addresses \(more precisely, the implementation is designed to cre)J
762 736 :M
(-)S
145 754 :M
.349 .035(ate this illusion\). With this proviso, Obliq data structures can be discussed with almost no reference to)J
145 772 :M
(the existence of multiple sites.)S
145 804 :M
f2_15 sf
(A.2.1)S
185 804 :M
(Value Identity)S
172 832 :M
f0_15 sf
.545 .055(A value is a data structure that is the result of an Obliq computation. Values may )J
674 832 :M
f4_15 sf
.064(share)A
f0_15 sf
.288 .029( substruc)J
762 832 :M
(-)S
145 850 :M
.738 .074(tures. Updates to shared substructures may be visible from separate value roots. To understand when)J
145 868 :M
.153 .015(and how sharing occurs, it is critical to know under what circumstances two Obliq values are )J
f4_15 sf
.045(identical)A
763 868 :M
f0_15 sf
(.)S
145 886 :M
(The entire network semantics of Obliq can be glimped by the details of this definition.)S
172 904 :M
.395 .04(The infix operator )J
287 904 :M
f13_15 sf
<D2>S
f9_15 sf
.145(is)A
f13_15 sf
<D3>S
f0_15 sf
.37 .037( determines value identity. It returns a boolean on every pair of arguments,)J
145 922 :M
(including pairs of different types. Its negation is the operator )S
513 922 :M
f13_15 sf
<D2>S
f9_15 sf
(isnot)S
f13_15 sf
<D3>S
f0_15 sf
(:)S
199 952 :M
f9_15 sf
(a is b)S
361 952 :M
f0_15 sf
(is )S
375 952 :M
f9_15 sf
(a)S
f0_15 sf
( identical to )S
f9_15 sf
(b)S
f0_15 sf
(?)S
199 974 :M
f9_15 sf
(a isnot b)S
361 974 :M
f0_15 sf
(is )S
375 974 :M
f9_15 sf
(a)S
f0_15 sf
( not identical to )S
f9_15 sf
(b)S
f0_15 sf
(?)S
172 1002 :M
.299 .03(A value maintains its identity as long as it is not copied: copying a value produces a )J
f4_15 sf
.107(similar)A
730 1002 :M
f0_15 sf
.325 .033( value)J
145 1020 :M
.798 .08(which is not identical to it. For the basic types \(ok, booleans, integers, reals, chars, texts, and excep)J
762 1020 :M
(-)S
endp
%%Page: 32 32
%%BeginPageSetup
initializepage
(luca; page: 32 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(32)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 160 :M
f0_15 sf
.325 .033(tions\), we imagine that there is a single instance of each value, which is never copied. For other types,)J
145 178 :M
.797 .08(values are copied by specific operations, such as object cloning and array concatenation, and by net)J
762 178 :M
(-)S
145 196 :M
(work transmission.)S
172 214 :M
.986 .099(Most importantly, values are )J
355 214 :M
f4_15 sf
.243(not)A
f0_15 sf
.937 .094( copied on identifier definition and access, on local assignment)J
145 232 :M
.372 .037(and update, or on local parameter passing and result. In these situations, a value may become a shared)J
145 250 :M
.179 .018(substructure of two or more other structures. Values with state \(objects and arrays\) are not copied even)J
145 268 :M
(on remote versions of the situation above.)S
172 286 :M
1.047 .105(Let us spell out the consequences for )J
409 286 :M
f13_15 sf
.128<D2>A
f9_15 sf
.383(is)A
f13_15 sf
.128<D3>A
f0_15 sf
.734 .073(. For basic types the )J
f13_15 sf
.128<D2>A
f9_15 sf
.383(is)A
f13_15 sf
.128<D3>A
f0_15 sf
1.059 .106( predicate corresponds to se)J
762 286 :M
(-)S
145 304 :M
.902 .09(mantic value equality. For example, an integer is another integer if they are the same number, and a)J
145 322 :M
(text is another text if they contain the same sequence of characters.)S
172 340 :M
.46 .046(For objects and arrays, the )J
f13_15 sf
.066<D2>A
f9_15 sf
.199(is)A
f13_15 sf
.066<D3>A
f0_15 sf
.567 .057( predicate corresponds to equality of the network addresses where)J
145 358 :M
(the actual objects and arrays \(not their network references\) are stored.)S
172 376 :M
1.243 .124(For most other types \(options, closures, readers, and writers\), the )J
586 376 :M
f13_15 sf
.107<D2>A
f9_15 sf
.322(is)A
f13_15 sf
.107<D3>A
f0_15 sf
.995 .099( predicate corresponds to)J
145 394 :M
(equality of the local addresses where the values are stored.)S
172 412 :M
.627 .063(Finally, certain data types make sense only within a site \(local threads, mutexes, conditions, pro)J
762 412 :M
(-)S
145 430 :M
.313 .031(cesses, forms\); network transmission of these values is inhibited. These values are identical when they)J
145 448 :M
(are stored at the same local address.)S
145 480 :M
f2_15 sf
(A.2.2)S
185 480 :M
(Constants)S
172 508 :M
f0_15 sf
(The constants literals are listed below, see section A.5 for the lexical details.)S
199 538 :M
f9_15 sf
(ok)S
334 538 :M
f0_15 sf
(a trivial constant, returned by side-effecting operations)S
199 560 :M
f9_15 sf
(true, false)S
334 560 :M
f0_15 sf
(booleans, see section B.6.2.)S
199 582 :M
f9_15 sf
(0)S
f0_15 sf
(, )S
216 582 :M
f9_15 sf
(1)S
f0_15 sf
(, )S
f9_15 sf
(~1)S
f0_15 sf
(, ...)S
334 582 :M
(integers, see section B.6.3.)S
199 604 :M
f9_15 sf
(0.)S
f0_15 sf
(, )S
225 604 :M
f9_15 sf
(0.1)S
f0_15 sf
(, )S
f9_15 sf
(~0.1)S
f0_15 sf
(, ...)S
334 604 :M
(reals, see sections B.6.4 and B.6.5.)S
199 626 :M
(')S
202 626 :M
f9_15 sf
(a)S
f0_15 sf
(')S
334 626 :M
(chars, see section B.6.6.)S
199 648 :M
f9_15 sf
("abc")S
334 648 :M
f0_15 sf
(text strings, see section B.6.7.)S
172 676 :M
.434 .043(The constant )J
f13_15 sf
.053<D2>A
f9_15 sf
.159(ok)A
f13_15 sf
.053<D3>A
f0_15 sf
.424 .042( can be used to mean \322uninitialized\323 in variable declarations. For characters and)J
145 694 :M
.676 .068(strings, escape sequences \()J
f9_15 sf
.216<5C5C>A
f0_15 sf
.163 .016(, )J
336 694 :M
f9_15 sf
.394(\\')A
f0_15 sf
.274 .027(, )J
f9_15 sf
.394(\\")A
f0_15 sf
.298 .03(, )J
389 694 :M
f9_15 sf
.394(\\n)A
f0_15 sf
.298 .03(, )J
416 694 :M
f9_15 sf
.394(\\r)A
f0_15 sf
.274 .027(, )J
f9_15 sf
.394(\\t)A
f0_15 sf
.298 .03(, )J
469 694 :M
f9_15 sf
.349(\\f)A
f0_15 sf
.242 .024(, )J
f9_15 sf
.349<5C>A
f11_15 sf
.349(xxx)A
f0_15 sf
.404 .04( for )J
559 694 :M
f11_15 sf
.248(xxx)A
f0_15 sf
.611 .061( octal\) are supported with the)J
145 712 :M
(usual meaning \(section A.5\).)S
145 744 :M
f2_15 sf
(A.2.3)S
185 744 :M
(Operators)S
172 772 :M
f0_15 sf
.34 .034(Here is the list of all the predefined unqualified operators. On the left, we list the built-in libraries)J
145 790 :M
.017 .002(they belong to. For the list of all built-in libraries \(and hence of all qualified and unqualified operators\),)J
145 808 :M
(see section B.6. Operators evaluate all their arguments from left to right.)S
199 838 :M
f9_15 sf
(bool)S
f0_15 sf
(:)S
307 838 :M
f9_15 sf
(not and or)S
199 860 :M
(int)S
f0_15 sf
(:)S
307 860 :M
f9_15 sf
(%)S
199 882 :M
(real)S
f0_15 sf
(:)S
307 882 :M
f9_15 sf
(+ - * / > < >= <= float round)S
199 904 :M
(text)S
f0_15 sf
(:)S
307 904 :M
f9_15 sf
(&)S
199 926 :M
(array)S
f0_15 sf
(:)S
307 926 :M
f9_15 sf
(# @)S
172 954 :M
f0_15 sf
.185 .018(The )J
f13_15 sf
<D2>S
f9_15 sf
.086(not)A
f13_15 sf
<D3>S
f0_15 sf
.206 .021( operator is prefix \(that is, its argument must be parenthesized\). The )J
647 954 :M
f13_15 sf
<D2>S
f9_15 sf
.1(and)A
f13_15 sf
<D3>S
f0_15 sf
.135 .014( and )J
710 954 :M
f13_15 sf
<D2>S
f9_15 sf
.056(or)A
f13_15 sf
<D3>S
f0_15 sf
.134 .013( infix)J
145 972 :M
.954 .095(operators evaluate both arguments \(but see also section A.3.5\). These operators accept only boolean)J
145 990 :M
(arguments.)S
172 1008 :M
(The infix )S
f13_15 sf
<D2>S
f9_15 sf
(%)S
f13_15 sf
<D3>S
f0_15 sf
( operator is integer modulo.)S
endp
%%Page: 33 33
%%BeginPageSetup
initializepage
(luca; page: 33 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(33)S
172 160 :M
f0_15 sf
.286 .029(The operators on real numbers are overloaded with corresponding operators on integers. The infix)J
145 178 :M
.004 0(arithmetic operators on reals accept also pairs of integers and return an integer, but do not accept mixed)J
145 196 :M
.864 .086(integer-real arguments. The infix comparison operators on reals similarly accept a pair of integer ar)J
762 196 :M
(-)S
145 214 :M
-.003(guments, but not mixed arguments. The prefix operators )A
f13_15 sf
<D2>S
f9_15 sf
(float)S
f13_15 sf
<D3>S
f0_15 sf
( and )S
f13_15 sf
<D2>S
f9_15 sf
(round)S
f13_15 sf
<D3>S
618 214 :M
f0_15 sf
-.004( accept both integers and)A
145 232 :M
(reals. The form )S
241 232 :M
f13_15 sf
<D2>S
f9_15 sf
(-n)S
f13_15 sf
<D3>S
f0_15 sf
( is equivalent to )S
f13_15 sf
<D2>S
f9_15 sf
(0-n)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 250 :M
(The infix )S
f13_15 sf
<D2>S
f9_15 sf
(&)S
f13_15 sf
<D3>S
f0_15 sf
( operator is text concatenation.)S
172 268 :M
(The prefix )S
239 268 :M
f13_15 sf
<D2>S
f9_15 sf
(#)S
f13_15 sf
<D3>S
f0_15 sf
( operator is array size; the infix )S
f13_15 sf
<D2>S
f9_15 sf
(@)S
f13_15 sf
<D3>S
f0_15 sf
( operator is array concatenation.)S
145 300 :M
f2_15 sf
(A.2.4)S
185 300 :M
(Arrays)S
172 328 :M
f0_15 sf
(Arrays have fixed size \(once allocated\), with zero-based indexing.)S
199 358 :M
f9_15 sf
([1,2,3,4])S
415 358 :M
f0_15 sf
(array)S
199 380 :M
f9_15 sf
(#\(a\))S
415 380 :M
f0_15 sf
(array size)S
199 402 :M
f9_15 sf
(a[0])S
415 402 :M
f0_15 sf
(array indexing)S
199 424 :M
f9_15 sf
(a[0]:=2)S
415 424 :M
f0_15 sf
(array update)S
199 446 :M
f9_15 sf
(a[1 for 2])S
415 446 :M
f0_15 sf
(subarray extraction, from index 1 for length 2)S
199 468 :M
f9_15 sf
(a[1 for 3]:=b)S
415 468 :M
f0_15 sf
(subarray update)S
199 490 :M
f9_15 sf
(a @ b)S
415 490 :M
f0_15 sf
(array concatenation)S
172 518 :M
.565 .057(All array operations are bound-checked. When the array is remote, each indexing and update op)J
761 518 :M
(-)S
145 536 :M
(eration causes a network communication.)S
172 554 :M
.474 .047(Subarray extraction and array concatenation produce local copies of possibly remote arrays. Note)J
145 572 :M
.037 .004(that array values are always shared, unless explicitly copied by these two operations \(or copied element)J
145 590 :M
(by element\).)S
172 608 :M
.312 .031(Subarray extraction, subarray update, and array concatenation cause at most one network commu)J
762 608 :M
(-)S
145 626 :M
(nication for each argument.)S
172 644 :M
.716 .072(Subarray update operates correctly even when updating overlapping segments of the same array.)J
145 662 :M
.178 .018(The source array must be at least as long as the destination array; if it is longer, only its initial segment)J
145 680 :M
(is used.)S
172 698 :M
(See also section B.6.8, which includes operations to initialize arrays from values and iterators.)S
145 730 :M
f2_15 sf
(A.2.5)S
185 730 :M
(Options)S
172 758 :M
f0_15 sf
.158 .016(An option value is a pair of a tag \(syntactically, an identifier\) and a value. Such a tag can be tested)J
145 776 :M
.453 .045(by a case statement, which discriminates between a set of expected tags. No operation other than case)J
145 794 :M
(is defined on option values.)S
199 824 :M
f9_15 sf
(option x => 3 end)S
415 824 :M
f0_15 sf
(an option of tag )S
f9_15 sf
(x)S
f0_15 sf
( and value )S
588 824 :M
f9_15 sf
(3)S
145 866 :M
f2_15 sf
(A.2.6)S
185 866 :M
(Objects)S
172 894 :M
f0_15 sf
.15 .015(Objects are collections of )J
330 894 :M
f4_15 sf
.037(fields)A
f0_15 sf
( )S
366 894 :M
f13_15 sf
<D2>S
f9_15 sf
.103(x)A
f9_10 sf
0 3 rm
.069(i)A
0 -3 rm
f0_15 sf
( )S
388 894 :M
f9_15 sf
.104(=>)A
f0_15 sf
( )S
410 894 :M
f9_15 sf
.097(a)A
f9_10 sf
0 3 rm
.065(i)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.184 .018(, where )J
f13_15 sf
<D2>S
f9_15 sf
.097(x)A
f9_10 sf
0 3 rm
.065(i)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.086 .009( is a )J
526 894 :M
f4_15 sf
.318 .032(field name)J
f0_15 sf
.128 .013(, and )J
f13_15 sf
<D2>S
f9_15 sf
.091(a)A
f9_10 sf
0 3 rm
.061(i)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.124 .012( is a term. A )J
722 894 :M
f4_15 sf
(method)S
145 912 :M
(field)S
172 912 :M
f0_15 sf
.216 .022( is a field that contains a method closure. An )J
f4_15 sf
.349 .035(alias field)J
506 912 :M
f0_15 sf
.226 .023( is a field that contains an alias. Otherwise,)J
145 930 :M
(a field is called a )S
f4_15 sf
(value field)S
313 930 :M
f0_15 sf
(.)S
199 960 :M
f9_15 sf
({x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... ,x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(})S
496 960 :M
f0_15 sf
(for n)S
cF
f1_15 sf
<B3>S
sf
(0)S
172 988 :M
1.239 .124(Objects may have two )J
317 988 :M
f4_15 sf
.164(attributes)A
f0_15 sf
.205 .02(: )J
384 988 :M
f4_15 sf
(protected)S
441 988 :M
f0_15 sf
1.546 .155( and )J
474 988 :M
f4_15 sf
.192(serialized)A
f0_15 sf
.766 .077( \(section A.2.7\) The keywords )J
f13_15 sf
.099<D2>A
f9_15 sf
.395(pro-)A
145 1006 :M
.418(tected)A
f13_15 sf
.139<D3>A
f0_15 sf
.788 .079( and/or )J
253 1006 :M
f13_15 sf
.177<D2>A
f9_15 sf
.529(serialized)A
f13_15 sf
.177<D3>A
f0_15 sf
1.238 .124( may be placed after the left brace, each optionally followed by a)J
145 1024 :M
(comma.)S
endp
%%Page: 34 34
%%BeginPageSetup
initializepage
(luca; page: 34 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(34)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
172 160 :M
f0_15 sf
.358 .036(An aliased field denotes a field within another object. Most operations on aliases are redirected to)J
145 178 :M
(the fields they denote, as described in section A.2.6.)S
199 208 :M
f9_15 sf
({x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( => alias x of a end, ... })S
496 208 :M
f0_15 sf
(an alias for field )S
598 208 :M
f9_15 sf
(x)S
f0_15 sf
( of object )S
f9_15 sf
(a)S
145 236 :M
f0_15 sf
(An error is produced if the object )S
349 236 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f13_15 sf
<D3>S
f0_15 sf
( does not have the field )S
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 254 :M
(We now describe the primitive operations on objects.)S
145 282 :M
f6_15 sf
( )S
149 282 :M
(Selection)S
199 313 :M
f9_15 sf
(a.x)S
145 341 :M
f0_15 sf
.77 .077(If )J
160 341 :M
f13_15 sf
.099<D2>A
f9_15 sf
.298(x)A
f13_15 sf
.099<D3>A
f0_15 sf
.563 .056( is a value field, then the value is returned. If )J
f13_15 sf
.099<D2>A
f9_15 sf
.298(x)A
f13_15 sf
.099<D3>A
f0_15 sf
.637 .064( is a method field containing a method of no ar)J
762 341 :M
(-)S
145 359 :M
.882 .088(guments, then the method is invoked by supplying )J
f9_15 sf
.334(a)A
f0_15 sf
.694 .069( as its first parameter, and its result \(or error, or)J
145 377 :M
.614 .061(exception\) is returned. If )J
f13_15 sf
.081<D2>A
f9_15 sf
.244(x)A
f13_15 sf
.081<D3>A
f0_15 sf
.393 .039( is an alias field for )J
439 377 :M
f13_15 sf
.113<D2>A
f9_15 sf
.34(x)A
f9_10 sf
0 3 rm
.227(0)A
0 -3 rm
f13_15 sf
.113<D3>A
f0_15 sf
.329 .033( of )J
482 377 :M
f13_15 sf
.08<D2>A
f9_15 sf
.24(a)A
f9_10 sf
0 3 rm
.16(0)A
0 -3 rm
f13_15 sf
.08<D3>A
f0_15 sf
.38 .038(, then )J
542 377 :M
f13_15 sf
.053<D2>A
f9_15 sf
.158(a)A
f9_10 sf
0 3 rm
.105(0)A
0 -3 rm
f9_15 sf
.158(.x)A
f9_10 sf
0 3 rm
.105(0)A
0 -3 rm
f13_15 sf
.053<D3>A
f0_15 sf
.382 .038( is executed. Selection fails if)J
145 395 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
( is not a field of )S
f13_15 sf
<D2>S
f9_15 sf
(a)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 423 :M
f6_15 sf
(Invocation)S
199 454 :M
f9_15 sf
(a.x\(b)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... ,b)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
<29>S
469 454 :M
f0_15 sf
(for n)S
cF
f1_15 sf
<B3>S
sf
(0)S
145 482 :M
.055 .006(If )J
159 482 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
.038 .004( is a method field containing a method of n+1 arguments, then the method is invoked by supplying)J
145 500 :M
f13_15 sf
<D2>S
f9_15 sf
.153 .015(\(a, b)J
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
.131 .013(, ... ,b)J
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
<29>S
f13_15 sf
<D3>S
f0_15 sf
.109 .011( as its arguments, evaluated from left to right. The computed result \(or error, or)J
145 518 :M
.266 .027(exception\) is returned. If )J
f13_15 sf
<D2>S
f9_15 sf
.106(x)A
f13_15 sf
<D3>S
f0_15 sf
.168 .017( is an alias field for )J
f13_15 sf
<D2>S
f9_15 sf
.106(x)A
f9_10 sf
0 3 rm
.07(0)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.102 .01( of )J
476 518 :M
f13_15 sf
<D2>S
f9_15 sf
.098(a)A
f9_10 sf
0 3 rm
.066(0)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.156 .016(, then )J
535 518 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(0)S
0 -3 rm
f9_15 sf
.045(.x)A
f9_10 sf
0 3 rm
(0)S
0 -3 rm
f9_15 sf
.045(\(b)A
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
.132 .013(, ... ,b)J
674 521 :M
f9_10 sf
(n)S
f9_15 sf
0 -3 rm
.062<29>A
0 3 rm
f13_15 sf
0 -3 rm
<D3>S
0 3 rm
f0_15 sf
0 -3 rm
.161 .016( is executed.)J
0 3 rm
145 536 :M
.569 .057(Invocation fails if )J
f13_15 sf
.077<D2>A
f9_15 sf
.232(x)A
f13_15 sf
.077<D3>A
f0_15 sf
.321 .032( is not a field of )J
f13_15 sf
.077<D2>A
f9_15 sf
.232(a)A
f13_15 sf
.077<D3>A
f0_15 sf
.392 .039(. If the object )J
476 536 :M
f13_15 sf
<D2>S
f9_15 sf
.12(a)A
f13_15 sf
<D3>S
f0_15 sf
.346 .035( is serialized, the method executes atomically)J
145 554 :M
(with respect to other methods of the object.)S
145 582 :M
f6_15 sf
(Updating and Overriding)S
199 613 :M
f9_15 sf
(a.x:=b)S
145 641 :M
f0_15 sf
.665 .067(If )J
160 641 :M
f13_15 sf
.088<D2>A
f9_15 sf
.262(x)A
f13_15 sf
.088<D3>A
f0_15 sf
.464 .046( is a value or method field of )J
f13_15 sf
.088<D2>A
f9_15 sf
.262(a)A
f13_15 sf
.088<D3>A
f0_15 sf
.565 .057(, its contents are replaced by )J
552 641 :M
f13_15 sf
.132<D2>A
f9_15 sf
.395(b)A
f13_15 sf
.132<D3>A
f0_15 sf
.389 .039(, If )J
590 641 :M
f13_15 sf
.098<D2>A
f9_15 sf
.292(x)A
f13_15 sf
.098<D3>A
f0_15 sf
.466 .047( is an alias field for )J
f13_15 sf
.098<D2>A
f9_15 sf
.292(x)A
f9_10 sf
0 3 rm
.195(0)A
0 -3 rm
f13_15 sf
.098<D3>A
f0_15 sf
.44 .044( of)J
145 659 :M
f13_15 sf
<D2>S
f9_15 sf
.085(a)A
f9_10 sf
0 3 rm
.057(0)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.134 .013(, then )J
204 659 :M
f13_15 sf
<D2>S
f9_15 sf
.07(a)A
f9_10 sf
0 3 rm
(0)S
0 -3 rm
f9_15 sf
.07(.x)A
f9_10 sf
0 3 rm
(0)S
0 -3 rm
f9_15 sf
.07(:=b)A
f13_15 sf
<D3>S
f0_15 sf
.144 .014( is executed. The result value is )J
f13_15 sf
<D2>S
f9_15 sf
.07(ok)A
f13_15 sf
<D3>S
f0_15 sf
.145 .014(. The operation fails if )J
633 659 :M
f13_15 sf
<D2>S
f9_15 sf
.13(x)A
f13_15 sf
<D3>S
f0_15 sf
.183 .018( is not a field of )J
748 659 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 677 :M
(The operation fails if it is not self-inflicted and )S
430 677 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f13_15 sf
<D3>S
f0_15 sf
( is protected.)S
145 705 :M
f6_15 sf
(Cloning)S
199 736 :M
f9_15 sf
(clone\(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ... ,a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
<29>S
496 736 :M
f0_15 sf
(for n)S
cF
f1_15 sf
<B3>S
sf
(1)S
145 764 :M
1.538 .154(Provided that all the fields in the )J
361 764 :M
f13_15 sf
.162<D2>A
f9_15 sf
.486(a)A
f9_10 sf
0 3 rm
.324(i)A
0 -3 rm
f13_15 sf
.162<D3>A
f0_15 sf
1.319 .132( have distinct names, cloning produces an object whose field)J
145 782 :M
.508 .051(names are the union of the field names of the )J
f13_15 sf
.081<D2>A
f9_15 sf
.243(a)A
f9_10 sf
0 3 rm
.162(i)A
0 -3 rm
f13_15 sf
.081<D3>A
f0_15 sf
.551 .055(, and whose contents are )J
603 782 :M
f4_15 sf
.087(identical)A
f0_15 sf
.34 .034( \(section A.2.1\) to)J
145 800 :M
.045 .004(the contents of the corresponding fields of the )J
425 800 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.04 .004(. The attributes of the resulting object \(protection and)J
145 818 :M
.374 .037(serialization\) are the same as the attributes of )J
f13_15 sf
.053<D2>A
f9_15 sf
.158(a)A
f9_10 sf
0 3 rm
.105(1)A
0 -3 rm
f13_15 sf
.053<D3>A
f0_15 sf
.294 .029(. Cloning fails if one of the )J
615 818 :M
f13_15 sf
<D2>S
f9_15 sf
.097(a)A
f9_10 sf
0 3 rm
.065(i)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.273 .027( is protected. Cloning)J
145 836 :M
.078 .008(is not in general an atomic operation, but it acts atomically on each )J
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.089 .009( that is serialized. The operation)J
145 854 :M
(fails if it is not self-inflicted on all the )S
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
(\325s that are protected.)S
145 900 :M
f6_15 sf
(Redirection)S
199 931 :M
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(.x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(:=alias x)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( of a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( end)S
145 959 :M
f0_15 sf
(The field )S
f13_15 sf
<D2>S
f9_15 sf
(x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( of )S
244 959 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( is replaced by an alias to the field )S
474 959 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( of )S
515 959 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
(, whether or not )S
635 959 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( already is aliased.)S
145 977 :M
(The operation fails if )S
275 977 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( is not a field of )S
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
(, or if it is not self-inflicted and )S
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( is protected.)S
199 1007 :M
f9_15 sf
(redirect a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( to a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( end)S
endp
%%Page: 35 35
%%BeginPageSetup
initializepage
(luca; page: 35 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(35)S
145 160 :M
f0_15 sf
.383 .038(The fields of )J
f13_15 sf
.063<D2>A
f9_15 sf
.189(a)A
f9_10 sf
0 3 rm
.126(1)A
0 -3 rm
f13_15 sf
.063<D3>A
f0_15 sf
.42 .042( are replaced by aliases to the similarly named fields of )J
590 160 :M
f13_15 sf
.058<D2>A
f9_15 sf
.174(a)A
f9_10 sf
0 3 rm
.116(2)A
0 -3 rm
f13_15 sf
.058<D3>A
f0_15 sf
.386 .039(. This is an atomic opera)J
762 160 :M
(-)S
145 178 :M
.849 .085(tion \(even if )J
226 178 :M
f13_15 sf
.133<D2>A
f9_15 sf
.399(a)A
f9_10 sf
0 3 rm
.266(1)A
0 -3 rm
f13_15 sf
.133<D3>A
f0_15 sf
.777 .078( is not serialized\): either all or none of the fields of )J
570 178 :M
f13_15 sf
.096<D2>A
f9_15 sf
.287(a)A
f9_10 sf
0 3 rm
.191(1)A
0 -3 rm
f13_15 sf
.096<D3>A
f0_15 sf
.695 .069( are replaced by aliases. The)J
145 196 :M
(operation fails if )S
248 196 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( lacks some of the fields of )S
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
(, or if it is not self-inflicted and )S
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( is protected.)S
145 228 :M
f2_15 sf
(A.2.7)S
185 228 :M
(Protection and Serialization)S
172 256 :M
f0_15 sf
.268 .027(Every object has two attributes that may or may not be enabled: )J
f4_15 sf
.087(protection)A
626 256 :M
f0_15 sf
.121 .012( and )J
f4_15 sf
.06(serialization)A
f0_15 sf
.227 .023(. First)J
145 274 :M
2.004 .2(we need the following definitions; let )J
393 274 :M
f13_15 sf
<D2>S
f4_15 sf
(op)S
f0_15 sf
<28>S
416 274 :M
f9_15 sf
(o)S
f0_15 sf
<29>S
430 274 :M
f13_15 sf
.219<D3>A
f0_15 sf
1.845 .184( be either a select/invoke, update/override, clone, or)J
145 292 :M
(redirect operation on an object )S
f13_15 sf
<D2>S
f9_15 sf
(o)S
f13_15 sf
<D3>S
f0_15 sf
(:)S
199 322 :M
(The )S
f4_15 sf
(current method)S
f0_15 sf
( of a thread \(if it exists\) is the last method that was invoked during the)S
217 344 :M
(thread\325s execution but has not yet returned.)S
199 366 :M
(An object operation )S
322 366 :M
f13_15 sf
<D2>S
f4_15 sf
(op)S
f0_15 sf
<28>S
345 366 :M
f9_15 sf
(o)S
f0_15 sf
<29>S
359 366 :M
f13_15 sf
<D3>S
f0_15 sf
( is )S
f4_15 sf
(self-inflicted)S
454 366 :M
f0_15 sf
( iff )S
476 366 :M
f13_15 sf
<D2>S
f9_15 sf
(o)S
f13_15 sf
<D3>S
f0_15 sf
( is identical to the self of the current method)S
217 388 :M
(\(if any\).)S
145 416 :M
.366 .037(This definition remains valid under circumstances where threads span multiple sites, and where object)J
145 434 :M
(identity tests are to be applied to remote objects.)S
172 452 :M
.567 .057(On a )J
f4_15 sf
.309(protected)A
265 452 :M
f0_15 sf
1.012 .101( object, all non self-inflicted update/override, cloning, and redirection operations)J
145 470 :M
.177 .018(produce errors. Self-inflicted update/override, cloning, and redirection, and all selection/invocation op)J
762 470 :M
(-)S
145 488 :M
(erations are allowed. Protected objects are declared as follows:)S
199 518 :M
f9_15 sf
({protected, ... })S
172 546 :M
f0_15 sf
.213 .021(A )J
187 546 :M
f4_15 sf
.029(serialized)A
f0_15 sf
.122 .012( object has an associated \(implicit\) mutex. All non self-inflicted operations acquire the)J
145 564 :M
.4 .04(mutex on entry, and release it on completion. Self-inflicted operations do not affect the mutex. Serial)J
761 564 :M
(-)S
145 582 :M
(ized objects are declared as follows:)S
199 612 :M
f9_15 sf
({serialized, ... })S
145 654 :M
f2_15 sf
(A.2.8)S
185 654 :M
(Object and Engine Servers)S
172 682 :M
f0_15 sf
.836 .084(The built-in )J
250 682 :M
f13_15 sf
.096<D2>A
f9_15 sf
.289(net)A
f13_15 sf
.096<D3>A
f0_15 sf
.755 .075( library enables the initial network transmission of objects and engines, by the)J
145 700 :M
(mediation of a name server. An object can be exported to a name server by saying:)S
199 730 :M
f9_15 sf
(net_export\("obj", )S
f11_15 sf
(NameServer)S
f9_15 sf
(, o\))S
145 758 :M
f0_15 sf
.836 .084(where )J
f13_15 sf
.099<D2>A
f9_15 sf
.298(o)A
f13_15 sf
.099<D3>A
f0_15 sf
.504 .05( is the object, )J
289 758 :M
f13_15 sf
.071<D2>A
f11_15 sf
.214(NameServer)A
f13_15 sf
.071<D3>A
f0_15 sf
.484 .048( is a text containing the IP address of the machine running the)J
145 776 :M
.599 .06(desired name server \()J
277 776 :M
f13_15 sf
.089<D2>A
f9_15 sf
.266("")A
f13_15 sf
.089<D3>A
f0_15 sf
.58 .058( is an abbreviation for the local machine\), and the text )J
f13_15 sf
.089<D2>A
f9_15 sf
.266("obj")A
f13_15 sf
.089<D3>A
f0_15 sf
.484 .048( is the regis)J
762 776 :M
(-)S
145 794 :M
.045 .005(tration name for the object. The object is then available through the name server, as long as the site that)J
145 812 :M
-.007(registered it is alive. Registering under an existing name overrides the previous registration. . The result)A
145 830 :M
(of this operation is the object )S
f13_15 sf
<D2>S
f9_15 sf
(o)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 848 :M
(Similarly, an engine can be registered with a name server:)S
199 878 :M
f9_15 sf
(net_exportEngine\("eng", )S
f11_15 sf
(NameServer)S
f9_15 sf
(, arg\))S
145 906 :M
f0_15 sf
(where )S
f13_15 sf
<D2>S
f9_15 sf
(arg)S
f13_15 sf
<D3>S
f0_15 sf
( is a value passed to every procedure executed by the engine. The result is )S
666 906 :M
f13_15 sf
<D2>S
f9_15 sf
(ok)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 924 :M
(At a separate site \(or the same site\), an object can be imported:)S
199 954 :M
f9_15 sf
(net_import\("obj", "tsktsk.pa.dec.com"\))S
145 982 :M
f0_15 sf
(Now, all object operations can be applied to the resulting remote object.)S
172 1000 :M
(Similarly, a registered engine can be imported:)S
endp
%%Page: 36 36
%%BeginPageSetup
initializepage
(luca; page: 36 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(36)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
199 172 :M
f9_15 sf
(net_importEngine\("eng", )S
f11_15 sf
(NameServer)S
f9_15 sf
(\);)S
145 200 :M
f0_15 sf
.741 .074(The resulting value can be used as a procedure of one argument that, when given a procedure of one)J
145 218 :M
(argument, returns the result of applying that procedure to the )S
514 218 :M
f13_15 sf
<D2>S
f9_15 sf
(arg)S
f13_15 sf
<D3>S
f0_15 sf
( specified in )S
f9_15 sf
("exportEngine")S
f0_15 sf
(.)S
172 236 :M
.475 .048(Each engine execution takes place in the thread of the client. Hence, sequential calls to an engine)J
145 254 :M
.746 .075(from a site execute sequentially. But calls from multiple sites, or from multiple threads within a site,)J
145 272 :M
(execute concurrently.)S
172 290 :M
.552 .055(The final operation available in the )J
f13_15 sf
<D2>S
395 290 :M
f9_15 sf
.271(net)A
f13_15 sf
.09<D3>A
f0_15 sf
.56 .056( library is a net inquiry. It can be applied to objects and)J
145 308 :M
(engines, and returns a string:)S
199 338 :M
f9_15 sf
(net_who\(o\))S
172 366 :M
f0_15 sf
(Communication failures raise the exception )S
f13_15 sf
<D2>S
f9_15 sf
(net_failure)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 384 :M
.491 .049(Certain Obliq built-in values make sense only at the local site, and produce errors on any attempt)J
145 402 :M
.105 .011(to transmit them. These include threads, mutexes, conditions, processes, and forms \(see appendix C\). It)J
145 420 :M
.847 .085(is however easy to bundle the built-in operations for these values into objects, and then export those)J
145 438 :M
.181 .018(objects to the network. In the case of forms )J
411 438 :M
.14 .014([Avrahami, Brooks, Brown 1989])J
615 438 :M
.175 .018(, it is possible to transmit)J
145 456 :M
(a textual form description, and generate the form remotely.)S
172 474 :M
.486 .049(Readers and writers \(appendix B.6.11 and B.6.12\) can be transmitted over the network; then they)J
145 492 :M
1.391 .139(operate as efficient network streams. However, their usage is significantly restricted )J
680 492 :M
1.567 .157([Birrell, )J
f4_15 sf
1.213 .121(et al.)J
145 510 :M
f0_15 sf
(1994])S
180 510 :M
.69 .069(; it is safe to transmit each reader/writer only once away from a site, and from then on to use it)J
145 528 :M
(only at the receiving site, where it can be retransmitted with the same restrictions.)S
172 546 :M
1.96 .196(The alternative of packaging readers/writers within network objects is less efficient, because)J
145 564 :M
-.007(buffering is then done at the wrong end. However, such packaged readers/writers do not suffer from the)A
145 582 :M
1.042 .104(usage restrictions above, since they are not transmitted. The restrictions are still in effect on remote)J
145 600 :M
.18 .018(cloning of objects containing readers/writers. But this does not interfere with object migration \(cloning)J
145 618 :M
.152 .015(plus redirection to remote clones\), as long as the readers/writers are accessed only through methods, so)J
145 636 :M
(that no additional transmissions occur.)S
145 668 :M
f2_15 sf
(A.2.9)S
185 668 :M
(Processor and File System Enablers)S
172 696 :M
f0_15 sf
.22 .022(At each site, an )J
f4_15 sf
.1(enabler)A
316 696 :M
f0_15 sf
.285 .028( for the local processor is bound to the predefined, lexically scoped identi)J
762 696 :M
(-)S
145 714 :M
.292 .029(fier )J
f13_15 sf
.054<D2>A
f9_15 sf
.16(processor)A
f13_15 sf
.054<D3>A
f0_15 sf
.432 .043(. The primitives that start external processes \(e.g. Unix processes\) require a proces)J
762 714 :M
(-)S
145 732 :M
(sor enabler as a parameter. Processor enablers cannot be transmitted.)S
172 750 :M
.379 .038(At each site, an enabler for the local )J
397 750 :M
.335 .034(file system is bound to the predefined, lexically scoped iden)J
762 750 :M
(-)S
145 768 :M
1.248 .125(tifier )J
180 768 :M
f13_15 sf
.161<D2>A
f9_15 sf
.483(fileSys)A
f13_15 sf
.161<D3>A
f0_15 sf
1.129 .113(. Moreover, an enabler for a read-only version of the local file system is bound to)J
145 786 :M
f13_15 sf
<D2>S
f9_15 sf
(fileSysReader)S
f13_15 sf
<D3>S
f0_15 sf
(. The primitives that open files require a file system enabler as a parameter.)S
172 804 :M
.744 .074(File system enablers can be transmitted; multiple file systems can therefore be used at once. Be)J
762 804 :M
(-)S
145 822 :M
.46 .046(cause of lexical scoping, a roaming agent can access the file system of its originating site by referring)J
145 840 :M
(to )S
f13_15 sf
<D2>S
f9_15 sf
(fileSys)S
f13_15 sf
<D3>S
f0_15 sf
( or )S
249 840 :M
f13_15 sf
<D2>S
f9_15 sf
(fileSysReader)S
f13_15 sf
<D3>S
f0_15 sf
( as a free identifier.)S
172 858 :M
1.82 .182(Enablers cannot be obtained dynamically, since they are lexically bound. Therefore, roaming)J
145 876 :M
1.283 .128(agents cannot start local processes, nor access local file systems, unless local enablers are given to)J
145 894 :M
(them explicitly as parameters.)S
145 938 :M
f2_18 sf
(A.3)S
185 938 :M
(Control Structures)S
172 966 :M
f0_15 sf
(In this section we describe the Obliq control structures, including procedures and methods.)S
endp
%%Page: 37 37
%%BeginPageSetup
initializepage
(luca; page: 37 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(37)S
145 156 :M
f2_15 sf
(A.3.1)S
185 156 :M
(Definitions)S
172 184 :M
f0_15 sf
.199 .02(There are three kinds of definitions binding identifiers to values or locations. They can be used ei)J
761 184 :M
(-)S
145 202 :M
(ther in a local scope or at the top-level.)S
199 232 :M
f9_15 sf
(var x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( = a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ..., x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( = a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
199 254 :M
f9_15 sf
(let x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( = a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ..., x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( = a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
199 276 :M
f9_15 sf
(let rec x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( = p)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ..., x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( = p)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
172 304 :M
f0_15 sf
1.078 .108(A )J
188 304 :M
f13_15 sf
.082<D2>A
f9_15 sf
.246(var)A
f13_15 sf
.082<D3>A
f0_15 sf
.628 .063( definition introduces a collection of updatable variables and their initial values. A )J
f13_15 sf
.082<D2>A
f9_15 sf
.246(let)A
f13_15 sf
<D3>S
145 322 :M
f0_15 sf
.06 .006(definition introduces a collection of non-updatable identifiers and their values. A )J
f13_15 sf
<D2>S
f9_15 sf
.021(let\312rec)A
f13_15 sf
<D3>S
f0_15 sf
.073 .007( definition)J
145 340 :M
(introduces a collection of mutually recursive procedures.)S
172 358 :M
.208 .021(In the first two cases, the terms )J
365 358 :M
f13_15 sf
<D2>S
f9_15 sf
.083(a)A
f9_10 sf
0 3 rm
.055(i)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.186 .019( are all scoped in the context outside the definition. In the third)J
145 376 :M
.155 .015(case, the procedures )J
271 376 :M
f13_15 sf
<D2>S
f9_15 sf
.061(p)A
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.152 .015( are scoped in the outside context extended with the variables being defined. If)J
145 394 :M
(variables are multiply defined, the rightmost one has precedence.)S
172 412 :M
.351 .035(Any of the three forms above can be used at the top-level, followed by a semicolon, to establish a)J
145 430 :M
(top-level binding. See section A.3.3 \(sequencing\) about local scopes.)S
145 462 :M
f2_15 sf
(A.3.2)S
185 462 :M
(Assignment)S
172 490 :M
f0_15 sf
(Variables introduced by )S
320 490 :M
f13_15 sf
<D2>S
f9_15 sf
(var)S
f13_15 sf
<D3>S
f0_15 sf
( denote a storage location that can be assigned to:)S
199 520 :M
f9_15 sf
(x := a)S
145 548 :M
f0_15 sf
(The result of an assignment is the value )S
387 548 :M
f13_15 sf
<D2>S
f9_15 sf
(ok)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 566 :M
.524 .052(The value contained in the storage location denoted by a variable is accessed simply by mention)J
762 566 :M
(-)S
145 584 :M
(ing the variable.)S
199 614 :M
f9_15 sf
(x := x + 1)S
172 642 :M
f0_15 sf
(As discussed in section 4, a variable can be a network reference.)S
145 674 :M
f2_15 sf
(A.3.3)S
185 674 :M
(Sequencing)S
172 702 :M
f0_15 sf
.198 .02(A collection of definitions and terms \(possibly causing side-effects\), can be sequentially evaluated)J
145 720 :M
(by separating the individual components by semicolons:)S
199 750 :M
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(; ...; a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
145 778 :M
f0_15 sf
(A final semicolon may be added.)S
172 796 :M
.265 .026(Many syntactic contexts, such as bodies of procedures, accept sequences. But other contexts, such)J
145 814 :M
.041 .004(as argument lists, require terms. A sequence is not a term; it can be turned into a term by enclosing it in)J
145 832 :M
(parentheses.)S
172 850 :M
-.006(A sequence can be used to create a local scope, by means of definitions. The result of a sequence is)A
145 868 :M
(the value of its last component. If the last component is a definition, then )S
587 868 :M
f13_15 sf
<D2>S
f9_15 sf
(ok)S
f13_15 sf
<D3>S
f0_15 sf
( results.)S
199 898 :M
f9_15 sf
(\(var x=3; x:=x+1; x\))S
415 898 :M
f0_15 sf
(yields )S
455 898 :M
f9_15 sf
(4)S
145 940 :M
f2_15 sf
(A.3.4)S
185 940 :M
(Procedures and Methods)S
172 968 :M
f0_15 sf
.061 .006(Procedures and methods can be manipulated without restrictions: they can be passed as arguments,)J
145 986 :M
(returned as results, and transmitted over the network.)S
endp
%%Page: 38 38
%%BeginPageSetup
initializepage
(luca; page: 38 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(38)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
199 172 :M
f9_15 sf
(proc\(x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(,...,x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(\) b end)S
442 172 :M
f0_15 sf
(a procedure term, n)S
cF
f1_15 sf
<B3>S
sf
(0)S
199 194 :M
f9_15 sf
(meth\(s,x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(,...,x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(\) b end)S
442 194 :M
f0_15 sf
(a method term, n)S
cF
f1_15 sf
<B3>S
sf
(0)S
172 222 :M
.731 .073(A procedure term evaluates to a procedure closure, which is a record of the procedure term with)J
145 240 :M
.207 .021(the value of its free identifiers in the scope where it is evaluated. Similarly, a method term evaluates to)J
145 258 :M
(a method closure.)S
172 276 :M
.282 .028(If the free identifiers of a procedure or method denote entities with state, \(updatable variables, ob)J
762 276 :M
(-)S
145 294 :M
.428 .043(jects, arrays\), and the corresponding closure is sent over the network, then the entities with state \322stay)J
145 312 :M
(behind\323 and are accessed over the network when the closure is activated.)S
172 330 :M
.63 .063(A procedure closure can be activated by an application that provides the correct number of argu)J
762 330 :M
(-)S
145 348 :M
.413 .041(ments; the value of the body is then returned. A method closures must first be installed into an object,)J
145 366 :M
.436 .044(and then can be invoked via object selection. It must be given the correct number of arguments minus)J
145 384 :M
.517 .052(the self parameter; the value computed by its body is then returned. In all cases, arguments are evalu)J
762 384 :M
(-)S
145 402 :M
(ated from left to right.)S
145 434 :M
f2_15 sf
(A.3.5)S
185 434 :M
(Conditionals)S
172 462 :M
f0_15 sf
.429 .043(The syntax of conditional is as shown below. There can be any number of )J
628 462 :M
f13_15 sf
<D2>S
f9_15 sf
.086(elsif)A
f13_15 sf
<D3>S
f0_15 sf
.25 .025( branches, and)J
145 480 :M
.451 .045(the )J
f13_15 sf
.086<D2>A
f9_15 sf
.258(else)A
f13_15 sf
.086<D3>A
f0_15 sf
.645 .065( branch may be omitted. The boolean conditions are executed in sequence, and the )J
f13_15 sf
.086<D2>A
f9_15 sf
.258(then)A
f13_15 sf
<D3>S
145 498 :M
f0_15 sf
-.006(branch corresponding to the first )A
f13_15 sf
<D2>S
f9_15 sf
(true)S
f13_15 sf
<D3>S
f0_15 sf
-.006( condition is executed; otherwise the )A
609 498 :M
f13_15 sf
<D2>S
f9_15 sf
(else)S
f13_15 sf
<D3>S
f0_15 sf
-.005( branch is executed)A
145 516 :M
(\(if absent, )S
209 516 :M
f13_15 sf
<D2>S
f9_15 sf
(ok)S
f13_15 sf
<D3>S
f0_15 sf
( is returned\).)S
199 546 :M
f9_15 sf
(if a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( then a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( elsif a)S
f9_10 sf
0 3 rm
(3)S
0 -3 rm
f9_15 sf
( then a)S
f9_10 sf
0 3 rm
(4)S
0 -3 rm
f9_15 sf
( ... else a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( end)S
172 574 :M
f0_15 sf
(The following boolean connectives are particularly useful in the )S
560 574 :M
f13_15 sf
<D2>S
f9_15 sf
(if)S
f13_15 sf
<D3>S
f0_15 sf
( test of a conditional:)S
199 604 :M
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( andif a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
361 604 :M
f9_15 sf
(\(* if a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( then a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( else false end *\))S
199 626 :M
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( orif a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
361 626 :M
f9_15 sf
(\(* if a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( then true else a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( end *\))S
145 668 :M
f2_15 sf
(A.3.6)S
185 668 :M
(Case)S
172 696 :M
f0_15 sf
.045 .005(The syntax of case is as shown below. The )J
433 696 :M
f13_15 sf
<D2>S
f9_15 sf
.016(else)A
f13_15 sf
<D3>S
f0_15 sf
.035 .003( branch may be omitted, and any )J
f13_15 sf
<D2>S
f9_15 sf
(\(x)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f9_15 sf
<29>S
f13_15 sf
<D3>S
f0_15 sf
.033 .003( can also)J
145 714 :M
(be omitted.)S
199 744 :M
f9_15 sf
(case a of y)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(\(x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(\) => a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ..., y)S
f9_10 sf
0 3 rm
(n-1)S
0 -3 rm
f9_15 sf
(\(x)S
f9_10 sf
0 3 rm
(n-1)S
0 -3 rm
f9_15 sf
(\) => a)S
f9_10 sf
0 3 rm
(n-1)S
0 -3 rm
f9_15 sf
( else a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( end)S
145 772 :M
f0_15 sf
-.006(The term )A
f13_15 sf
<D2>S
f9_15 sf
(a)S
f13_15 sf
<D3>S
f0_15 sf
-.005( must evaluate to an option value of, say, tag t and value v. If t matches one of the )A
712 772 :M
f13_15 sf
<D2>S
f9_15 sf
(y)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
(, then)S
145 790 :M
f13_15 sf
.096<D2>A
f9_15 sf
.288(a)A
f9_10 sf
0 3 rm
.192(i)A
0 -3 rm
f13_15 sf
.096<D3>A
f0_15 sf
.572 .057( is executed in a scope where )J
f13_15 sf
.096<D2>A
f9_15 sf
.288(x)A
f9_10 sf
0 3 rm
.192(i)A
0 -3 rm
f13_15 sf
.096<D3>A
f0_15 sf
.588 .059( \(if present\) is bound to v; the resulting value is the result of the)J
145 808 :M
.285 .028(case statement. If t does not match any )J
385 808 :M
f13_15 sf
<D2>S
f9_15 sf
.122(y)A
f9_10 sf
0 3 rm
.081(i)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.25 .025(, and the else branch is present, then )J
f13_15 sf
<D2>S
f9_15 sf
.122(a)A
f9_10 sf
0 3 rm
.081(n)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.261 .026( is executed and its)J
145 826 :M
(value returned. If t does not match any )S
f13_15 sf
<D2>S
f9_15 sf
(y)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
(, and the else branch is not present, then an error is reported.)S
145 858 :M
f2_15 sf
(A.3.7)S
185 858 :M
(Iteration)S
172 886 :M
f0_15 sf
.107 .011(The )J
f13_15 sf
<D2>S
f9_15 sf
.05(loop)A
f13_15 sf
<D3>S
f0_15 sf
.13 .013( statement repeatedly executes its body. The )J
512 886 :M
f13_15 sf
<D2>S
f9_15 sf
.033(exit)A
f13_15 sf
<D3>S
f0_15 sf
.106 .011( statement terminates the execution)J
145 904 :M
(of the innermost loop, and causes it to return the value )S
475 904 :M
f13_15 sf
<D2>S
f9_15 sf
(ok)S
f13_15 sf
<D3>S
f0_15 sf
( .)S
199 934 :M
f9_15 sf
(loop a end)S
199 956 :M
(exit)S
172 984 :M
f0_15 sf
1.135 .113(The )J
f13_15 sf
.176<D2>A
f9_15 sf
.528(for)A
f13_15 sf
.176<D3>A
f0_15 sf
1.242 .124( statement introduces a local identifier in the scope of its body, and iterates with the)J
145 1002 :M
1.251 .125(identifier ranging from the integer lower bound to the integer upper bound in increments of 1. The)J
145 1020 :M
(value )S
f13_15 sf
<D2>S
f9_15 sf
(ok)S
f13_15 sf
<D3>S
f0_15 sf
( is returned.)S
endp
%%Page: 39 39
%%BeginPageSetup
initializepage
(luca; page: 39 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(39)S
199 172 :M
f9_15 sf
(for x = a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( to a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( do a)S
f9_10 sf
0 3 rm
(3)S
0 -3 rm
f9_15 sf
( end)S
172 200 :M
f0_15 sf
.64 .064(The )J
f13_15 sf
.099<D2>A
f9_15 sf
.298(foreach)A
f13_15 sf
.099<D3>A
f0_15 sf
.711 .071( statement introduces a local identifier in the scope of its body, and iterates with)J
145 218 :M
.404 .04(the identifier ranging over the elements of an array. In the )J
503 218 :M
f13_15 sf
.051<D2>A
f9_15 sf
.152(do)A
f13_15 sf
.051<D3>A
f0_15 sf
.358 .036( version, the values of the individual it-)J
145 236 :M
.909 .091(erations are discarded, and )J
315 236 :M
f13_15 sf
.127<D2>A
f9_15 sf
.379(ok)A
f13_15 sf
.127<D3>A
f0_15 sf
.723 .072( returned. In the )J
f13_15 sf
.127<D2>A
f9_15 sf
.379(map)A
f13_15 sf
.127<D3>A
f0_15 sf
.919 .092( version, those values are collected in an array)J
145 254 :M
(that is then returned.)S
199 284 :M
f9_15 sf
(foreach x in a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( do a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( end)S
199 306 :M
(foreach x in a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( map a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( end)S
172 334 :M
f0_15 sf
(The )S
f13_15 sf
<D2>S
f9_15 sf
(exit)S
f13_15 sf
<D3>S
f0_15 sf
-.002( statement can be used to terminate the innermost )A
f13_15 sf
<D2>S
f9_15 sf
(for)S
f13_15 sf
<D3>S
f0_15 sf
( or )S
594 334 :M
f13_15 sf
<D2>S
f9_15 sf
(foreach)S
f13_15 sf
<D3>S
f0_15 sf
( statement. In the)S
145 352 :M
(case of )S
191 352 :M
f13_15 sf
<D2>S
f9_15 sf
(map)S
f13_15 sf
<D3>S
f0_15 sf
(, a shortened array is returned containing the values of the iterations computed so far.)S
145 384 :M
f2_15 sf
(A.3.8)S
185 384 :M
(Concurrency)S
172 412 :M
f0_15 sf
.913 .091(The primitives described in this section are built on top of, and have the same semantics as, the)J
145 430 :M
.68 .068(Modula-3 threads primitives having similar names )J
459 430 :M
.648 .065([Horning, )J
523 430 :M
f4_15 sf
.666 .067(et al.)J
f0_15 sf
.918 .092( 1993])J
594 430 :M
.774 .077(. The full thread interface is)J
145 448 :M
(described in appendix B.6.10.)S
172 466 :M
.63 .063(The )J
f13_15 sf
.098<D2>A
f9_15 sf
.293(mutex)A
f13_15 sf
.098<D3>A
f0_15 sf
.68 .068( primitive returns a new mutex. The )J
479 466 :M
f13_15 sf
.106<D2>A
f9_15 sf
.319(lock)A
f13_15 sf
.106<D3>A
f0_15 sf
.694 .069( statement locks a mutex in a scope, re)J
762 466 :M
(-)S
145 484 :M
.967 .097(turning the value of its second expression. The )J
441 484 :M
f13_15 sf
.103<D2>A
f9_15 sf
.308(fork)A
f13_15 sf
.103<D3>A
f0_15 sf
.804 .08( primitive starts the concurrent execution of a)J
145 502 :M
.219 .022(procedure of no arguments in a new thread, returning the thread; the second parameter is the stack size)J
145 520 :M
.479 .048(for the thread, in words \(0 defaults to a small but non-zero stack size\). The )J
607 520 :M
f13_15 sf
<D2>S
f9_15 sf
.126(join)A
f13_15 sf
<D3>S
f0_15 sf
.329 .033( primitive waits for)J
145 538 :M
.717 .072(the termination of a thread and returns the value of the procedure it executed. The )J
656 538 :M
f13_15 sf
<D2>S
f9_15 sf
.093(pause)A
f13_15 sf
<D3>S
f0_15 sf
.319 .032( primitive)J
145 556 :M
(pauses the current thread for a number of seconds, expressed as a real number.)S
199 586 :M
f9_15 sf
(mutex\(\))S
199 608 :M
(lock a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( do a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( end)S
199 630 :M
(fork\(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(,a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
<29>S
199 652 :M
(join\(a\))S
199 674 :M
(pause\(a\))S
172 702 :M
f0_15 sf
.058 .006(The )J
f13_15 sf
<D2>S
f9_15 sf
.027(condition)A
f13_15 sf
<D3>S
f0_15 sf
.065 .006( primitive returns a new condition. The )J
f13_15 sf
<D2>S
f9_15 sf
.027(signal)A
f13_15 sf
<D3>S
f0_15 sf
.036 .004( and )J
615 702 :M
f13_15 sf
<D2>S
f9_15 sf
.01(broadcast)A
f13_15 sf
<D3>S
f0_15 sf
.035 .003( primitives)J
145 720 :M
.169 .017(wake up one or all threads, respectively, waiting on a condition. The )J
563 720 :M
f13_15 sf
<D2>S
f9_15 sf
.048(wait)A
f13_15 sf
<D3>S
f0_15 sf
.132 .013( primitive unlocks a mutex)J
145 738 :M
(\(first argument\) until a condition is signaled \(second argument\), then locks the mutex again.)S
199 768 :M
f9_15 sf
(condition\(\))S
199 790 :M
(signal\(a\))S
199 812 :M
(broadcast\(a\))S
199 834 :M
(wait\(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(,a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
<29>S
172 862 :M
f0_15 sf
.08 .008(The )J
f13_15 sf
<D2>S
f9_15 sf
.037(watch)A
f13_15 sf
<D3>S
f0_15 sf
.098 .01( statement is specific to serialized objects, and operates on their implicit mutex. Thus,)J
145 880 :M
(it must occur within a method of a serialized object.)S
199 910 :M
f9_15 sf
(watch a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( until a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( end)S
145 938 :M
f0_15 sf
.468 .047(Here, )J
f13_15 sf
.061<D2>A
f9_15 sf
.184(a)A
f9_10 sf
0 3 rm
.123(1)A
0 -3 rm
f13_15 sf
.061<D3>A
f0_15 sf
.332 .033( is a condition and )J
f13_15 sf
.061<D2>A
f9_15 sf
.184(a)A
f9_10 sf
0 3 rm
.123(2)A
0 -3 rm
f13_15 sf
.061<D3>A
f0_15 sf
.433 .043( is a boolean expression. This statement waits for )J
f13_15 sf
.061<D2>A
f9_15 sf
.184(a)A
f9_10 sf
0 3 rm
.123(2)A
0 -3 rm
f13_15 sf
.061<D3>A
f0_15 sf
.439 .044( to become true,)J
145 956 :M
.629 .063(and then terminates. Whenever )J
f13_15 sf
.07<D2>A
f9_15 sf
.208(a)A
f9_10 sf
0 3 rm
.139(2)A
0 -3 rm
f13_15 sf
.07<D3>A
f0_15 sf
.418 .042( is found to be false, the statement waits for )J
f13_15 sf
.07<D2>A
f9_15 sf
.208(a)A
f9_10 sf
0 3 rm
.139(1)A
0 -3 rm
f13_15 sf
.07<D3>A
f0_15 sf
.439 .044( to be signaled be-)J
145 974 :M
.758 .076(fore trying again. The statement is equivalent to )J
446 974 :M
f13_15 sf
.087<D2>A
f9_15 sf
.743 .074(let )J
f11_15 sf
.26(x)A
f9_15 sf
.26(=a)A
f9_10 sf
0 3 rm
.173(1)A
0 -3 rm
f9_15 sf
.715 .072(; loop if a)J
622 977 :M
f9_10 sf
.158(2)A
f9_15 sf
0 -3 rm
.808 .081( then exit else)J
0 3 rm
145 992 :M
.09(wait\()A
f11_15 sf
.09(mu)A
f9_15 sf
.09(,)A
f11_15 sf
.09(x)A
f9_15 sf
.29 .029(\) end end)J
309 992 :M
f13_15 sf
.084<D3>A
f0_15 sf
.481 .048(, where )J
f13_15 sf
.084<D2>A
f11_15 sf
.253(x)A
f13_15 sf
.084<D3>A
f0_15 sf
.45 .045( does not occur in )J
f13_15 sf
.084<D2>A
f9_15 sf
.253(a)A
f9_10 sf
0 3 rm
.169(2)A
0 -3 rm
f13_15 sf
.084<D3>A
f0_15 sf
.356 .036(, and )J
f13_15 sf
.084<D2>A
f11_15 sf
.253(mu)A
f13_15 sf
.084<D3>A
f0_15 sf
.522 .052( is the implicit mutex of the self)J
145 1010 :M
(of the lexically enclosing method.)S
endp
%%Page: 40 40
%%BeginPageSetup
initializepage
(luca; page: 40 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(40)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 156 :M
f2_15 sf
(A.3.9)S
185 156 :M
(Exceptions)S
172 184 :M
f0_15 sf
.525 .052(An exception is a special value that, when raised, causes unwinding of the execution stack. If the)J
145 202 :M
(unwinding reaches the top-level, an error message is printed.)S
172 220 :M
.176 .018(An exception is created from a text string argument, which is the exception name. Two exceptions)J
145 238 :M
.45 .045(are equal if their names are equal text strings. \(Hence, an exception can be easily trapped at a site dif)J
762 238 :M
(-)S
145 256 :M
(ferent from the one in which it originated.\))S
199 286 :M
f9_15 sf
(exception\(a\))S
199 308 :M
(raise\(a\))S
172 336 :M
f0_15 sf
1.609 .161(The unwinding of the execution stack caused by an exception can be stopped by a try-except)J
145 354 :M
1.34 .134(statement, and can be temporarily suspended by a try-finally statement. The guards of a try-except)J
145 372 :M
.512 .051(statement, on the left of )J
295 372 :M
f13_15 sf
.055<D2>A
f9_15 sf
.164(=>)A
f13_15 sf
.055<D3>A
f0_15 sf
.441 .044(, must be exception values; if an exception is matched, the corresponding)J
145 390 :M
.322 .032(branch is executed, otherwise the )J
351 390 :M
f13_15 sf
<D2>S
f9_15 sf
.107(else)A
f13_15 sf
<D3>S
f0_15 sf
.285 .029( branch is executed. A try-finally statement executes )J
716 390 :M
f13_15 sf
<D2>S
f9_15 sf
.096(a)A
f9_10 sf
0 3 rm
.064(1)A
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.223 .022(, and)J
145 408 :M
(then executes )S
230 408 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( no matter whether )S
368 408 :M
f13_15 sf
<D2>S
f9_15 sf
(a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( raised an exception; if it did, the exception is raised again.)S
199 438 :M
f9_15 sf
(try a except a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
(, ..., a)S
f9_10 sf
0 3 rm
(n-2)S
0 -3 rm
f9_15 sf
( => a)S
f9_10 sf
0 3 rm
(n-1)S
0 -3 rm
f9_15 sf
( else a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( end)S
199 460 :M
(try a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( finally a)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
( end)S
172 488 :M
f0_15 sf
.37 .037(The semantics of try statements with respect to exceptions is the same as in Modula-3. In particu)J
762 488 :M
(-)S
145 506 :M
.466 .047(lar, an exception may propagate across sites, while unwinding the stack of a given thread. See section)J
145 524 :M
(A.3.10 for their behavior with respect to errors.)S
145 556 :M
f2_15 sf
(A.3.10)S
199 556 :M
(Errors)S
172 584 :M
f0_15 sf
.45 .045(Errors, as distinct from exceptions, are produced by built-in operations in situations where a logi)J
762 584 :M
(-)S
145 602 :M
.992 .099(cal flaw is judged to exist in a program. These situations include divide-by-zero, array overrunning,)J
145 620 :M
1.541 .154(bad operator arguments, and all cases that would produce typechecking errors in typed languages.)J
145 638 :M
(There are no user-defined errors.)S
172 656 :M
.451 .045(The occurrence of an error indicates a problem that should be fixed by recoding. However, errors)J
145 674 :M
1.016 .102(are not complete show-stoppers in Obliq. Errors are intercepted \(1\) by the recovery clause of try-fi)J
762 674 :M
(-)S
145 692 :M
.401 .04(nally, after whose execution the error is reissued, and \(2\) by the else clause of a try-except, which can)J
145 710 :M
.22 .022(even discard the error. This way, for example, a server can log the occurrence of an infrequent internal)J
145 728 :M
.971 .097(error and restart, or can detect \(to some extent\) errors occurring in client-supplied procedures. Error)J
145 746 :M
(trapping should not be used liberally.)S
172 764 :M
1.175 .117(Just like exceptions, errors are propagated across sites. Unless something is done, an error in a)J
145 782 :M
(server caused by a client thread will propagate back to the client, leaving the server unaffected.)S
145 826 :M
f2_18 sf
(A.4)S
185 826 :M
(Methodology)S
145 868 :M
f2_15 sf
(A.4.1)S
185 868 :M
(Type Comments)S
172 896 :M
f0_15 sf
1.318 .132(Although Obliq is an untyped language, every Obliq program, like any program, implicitly re)J
762 896 :M
(-)S
145 914 :M
.808 .081(spects the type discipline in the programmer\325s mind. It is essential to make this discipline explicit in)J
145 932 :M
(some way, otherwise programs quickly become unreadable and, therefore, unusable.)S
172 950 :M
.076 .008(To this end, Obliq supports a stylized form of comments that are intended to communicate type in)J
762 950 :M
(-)S
145 968 :M
1.046 .105(formation, but without enforcement. These comments are parsed according to a fixed grammar, and)J
145 986 :M
.525 .053(may appear where types usually appear in a typed language: as type definitions and as type specifica)J
762 986 :M
(-)S
145 1004 :M
.152 .015(tions for identifiers, procedures, and modules. One need write only as much type information as is use)J
762 1004 :M
(-)S
145 1022 :M
(ful and convenient; type comments have no effect after parsing.)S
endp
%%Page: 41 41
%%BeginPageSetup
initializepage
(luca; page: 41 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(41)S
172 160 :M
f0_15 sf
1.056 .106(Type comments are used in section B to specify the built-in libraries. Here are examples of the)J
145 178 :M
(syntax of \322types\323 and their intended meaning:)S
199 208 :M
f9_15 sf
(Top)S
f0_15 sf
(, )S
234 208 :M
f9_15 sf
(Ok)S
f0_15 sf
(, )S
f9_15 sf
(Bool)S
f0_15 sf
(, )S
303 208 :M
f9_15 sf
(Char)S
f0_15 sf
(, )S
f9_15 sf
(Text)S
f0_15 sf
(, )S
390 208 :M
f9_15 sf
(Int)S
f0_15 sf
(, )S
f9_15 sf
(Real)S
f0_15 sf
(, )S
468 208 :M
f9_15 sf
(Exception)S
f0_15 sf
(, )S
f9_15 sf
(Rd)S
f0_15 sf
(, )S
582 208 :M
f9_15 sf
(Wr)S
f0_15 sf
(, )S
f9_15 sf
(Thread\(T\))S
f0_15 sf
(, )S
696 208 :M
f9_15 sf
(Mutex)S
f0_15 sf
(,)S
199 230 :M
f9_15 sf
(Condition)S
f0_15 sf
(, )S
288 230 :M
f9_15 sf
(Process)S
f0_15 sf
(, )S
f9_15 sf
(Color)S
f0_15 sf
(, )S
411 230 :M
f9_15 sf
(Form)S
469 249 :M
f13_12 sf
<C5>S
482 249 :M
f0_15 sf
(Conventional type and operator names for the)S
482 267 :M
(built-in types. )S
f13_15 sf
<D2>S
f9_15 sf
(Top)S
f13_15 sf
<D3>S
f0_15 sf
( is the type of all values.)S
199 294 :M
f9_15 sf
(X)S
469 294 :M
f13_12 sf
<C5>S
482 294 :M
f0_15 sf
(A user-defined type \(any identifier, capitalized)S
482 312 :M
(by convention\).)S
199 339 :M
f9_15 sf
(X\(A)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, )S
f0_15 sf
(...)S
f9_15 sf
(, A)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
<29>S
469 339 :M
f13_12 sf
<C5>S
482 339 :M
f0_15 sf
(A parameterized type, e.g. )S
f13_15 sf
<D2>S
f9_15 sf
(List\(Int\))S
f13_15 sf
<D3>S
f0_15 sf
(.)S
199 366 :M
f9_15 sf
(A)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( op A)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
469 366 :M
f13_12 sf
<C5>S
482 366 :M
f0_15 sf
(An infix parameterized type, e.g. )S
684 366 :M
f13_15 sf
<D2>S
f9_15 sf
(Int +)S
482 384 :M
(Bool)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
199 411 :M
f9_15 sf
([A])S
469 411 :M
f13_12 sf
<C5>S
482 411 :M
f0_15 sf
(The type of arrays of )S
612 411 :M
f13_15 sf
<D2>S
f9_15 sf
(A)S
f13_15 sf
<D3>S
f0_15 sf
<D5732E>S
199 438 :M
f9_15 sf
([n*A])S
469 438 :M
f13_12 sf
<C5>S
482 438 :M
f0_15 sf
(The type of arrays of )S
612 438 :M
f13_15 sf
<D2>S
f9_15 sf
(A)S
f13_15 sf
<D3>S
f0_15 sf
(\325s of length )S
f13_15 sf
<D2>S
f9_15 sf
(n)S
f13_15 sf
<D3>S
f0_15 sf
( \(an int\).)S
199 465 :M
f9_15 sf
(\(A)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, )S
f0_15 sf
(...)S
f9_15 sf
(, A)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(\)->A ! exc)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( )S
f0_15 sf
(...)S
f9_15 sf
( exc)S
f9_10 sf
0 3 rm
(m)S
0 -3 rm
469 465 :M
f13_12 sf
<C5>S
482 465 :M
f0_15 sf
(The type of procedures of argument types )S
f13_15 sf
<D2>S
f9_15 sf
(A)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
482 483 :M
f0_15 sf
(\(n)S
cF
f1_15 sf
<B3>S
sf
(0\), result type )S
f13_15 sf
<D2>S
f9_15 sf
(A)S
f13_15 sf
<D3>S
f0_15 sf
(, and exceptions )S
705 483 :M
f13_15 sf
<D2>S
f9_15 sf
(exc)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
482 501 :M
f0_15 sf
(\(where )S
f13_15 sf
<D2>S
f9_15 sf
(!)S
f0_15 sf
( )S
543 501 :M
f9_15 sf
(exc)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f0_15 sf
( ... )S
595 501 :M
f9_15 sf
(exc)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( may be omitted\).)S
199 528 :M
f9_15 sf
(\(A)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, )S
f0_15 sf
(...)S
f9_15 sf
(, A)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(\)=>A ! exc)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( )S
f0_15 sf
(...)S
f9_15 sf
( exc)S
f9_10 sf
0 3 rm
(m)S
0 -3 rm
469 528 :M
f13_12 sf
<C5>S
482 528 :M
f0_15 sf
(The type of methods of self type  )S
f13_15 sf
<D2>S
f9_15 sf
(A)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
(,  arg)S
482 546 :M
(types )S
f13_15 sf
<D2>S
f9_15 sf
(A)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( ...)S
f13_15 sf
<D2>S
f9_15 sf
(A)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( \(n>0\), result type )S
f13_15 sf
<D2>S
f9_15 sf
(A)S
f13_15 sf
<D3>S
f0_15 sf
(, and)S
482 564 :M
(exceptions )S
550 564 :M
f13_15 sf
<D2>S
f9_15 sf
(exc)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( \(where )S
f13_15 sf
<D2>S
f9_15 sf
(!)S
f0_15 sf
( )S
654 564 :M
f9_15 sf
(exc)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f0_15 sf
( ... )S
706 564 :M
f9_15 sf
(exc)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f13_15 sf
<D3>S
482 582 :M
f0_15 sf
(may be omitted\). Methods in an object type:)S
482 600 :M
f13_15 sf
<D2>S
f9_15 sf
(m:\(A)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
(, )S
f0_15 sf
(...)S
f9_15 sf
(, A)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(\)=>A)S
f13_15 sf
<D3>S
f0_15 sf
(. Stand-alone methods:)S
482 618 :M
f13_15 sf
<D2>S
f9_15 sf
(All\(X<:A\)\(X, A)S
f9_10 sf
0 3 rm
(2)S
0 -3 rm
f9_15 sf
(, )S
f0_15 sf
(...)S
f9_15 sf
(, A)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(\)=>A)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
199 645 :M
f9_15 sf
({x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(:A)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, )S
f0_15 sf
(...)S
f9_15 sf
(, x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(:A)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(})S
469 645 :M
f13_12 sf
<C5>S
482 645 :M
f0_15 sf
(The type of objects with components named)S
482 663 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( of field type or method type )S
f13_15 sf
<D2>S
f9_15 sf
(A)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
(.)S
199 690 :M
f9_15 sf
(Option x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(:A)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, )S
f0_15 sf
(...)S
f9_15 sf
(, x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(:A)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( end)S
469 690 :M
f13_12 sf
<C5>S
482 690 :M
f0_15 sf
(The type of options with choices named )S
726 690 :M
f13_15 sf
<D2>S
f9_15 sf
(x)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( of)S
482 708 :M
(type )S
512 708 :M
f13_15 sf
<D2>S
f9_15 sf
(A)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
(.)S
199 735 :M
f9_15 sf
(Self\(X\) B{X})S
469 735 :M
f13_12 sf
<C5>S
482 735 :M
f0_15 sf
(Where )S
526 735 :M
f13_15 sf
<D2>S
f9_15 sf
(B{X})S
f13_15 sf
<D3>S
f0_15 sf
( is an object type with possible)S
482 753 :M
(covariant occurrences of )S
f13_15 sf
<D2>S
f9_15 sf
(X)S
f13_15 sf
<D3>S
f0_15 sf
(. This construction)S
482 771 :M
(is used to give a name \()S
624 771 :M
f13_15 sf
<D2>S
f9_15 sf
(X)S
f13_15 sf
<D3>S
f0_15 sf
(\) to the type of the)S
482 789 :M
(methods\325 self \(e.g. for objects with methods)S
482 807 :M
(that return self\).)S
199 834 :M
f9_15 sf
(All\(X<:A\) B{X})S
469 834 :M
f13_12 sf
<C5>S
482 834 :M
f0_15 sf
(Where )S
526 834 :M
f13_15 sf
<D2>S
f9_15 sf
(B{X})S
f13_15 sf
<D3>S
f0_15 sf
( is any type with possible occur-)S
482 852 :M
(rences of )S
f13_15 sf
<D2>S
f9_15 sf
(X)S
f13_15 sf
<D3>S
f0_15 sf
(. This is the type of values that, for)S
482 870 :M
(all subtypes )S
557 870 :M
f13_15 sf
<D2>S
f9_15 sf
(A)S
f9_10 sf
0 3 rm
(0)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( of )S
598 870 :M
f13_15 sf
<D2>S
f9_15 sf
(A)S
f13_15 sf
<D3>S
f0_15 sf
(, have type )S
f13_15 sf
<D2>S
f9_15 sf
(B{A)S
f9_10 sf
0 3 rm
(0)S
0 -3 rm
f9_15 sf
(})S
f13_15 sf
<D3>S
f0_15 sf
(. If)S
482 888 :M
f13_15 sf
<D2>S
f9_15 sf
(<:A)S
f13_15 sf
<D3>S
f0_15 sf
( is omitted, it stands for )S
f13_15 sf
<D2>S
f9_15 sf
(<:Top)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
199 915 :M
f9_15 sf
(Some\(X<:A\) B{X})S
469 915 :M
f13_12 sf
<C5>S
482 915 :M
f0_15 sf
(Where )S
526 915 :M
f13_15 sf
<D2>S
f9_15 sf
(B{X})S
f13_15 sf
<D3>S
f0_15 sf
( is any type with possible occur-)S
482 933 :M
(rences of )S
f13_15 sf
<D2>S
f9_15 sf
(X)S
f13_15 sf
<D3>S
f0_15 sf
(. This is the type of values that, for)S
482 951 :M
(some \(unspecified\) subtype )S
651 951 :M
f13_15 sf
<D2>S
f9_15 sf
(A)S
f9_10 sf
0 3 rm
(0)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( of )S
692 951 :M
f13_15 sf
<D2>S
f9_15 sf
(A)S
f13_15 sf
<D3>S
f0_15 sf
(, have)S
482 969 :M
(type )S
512 969 :M
f13_15 sf
<D2>S
f9_15 sf
(B{A)S
f9_10 sf
0 3 rm
(0)S
0 -3 rm
f9_15 sf
(})S
f13_15 sf
<D3>S
f0_15 sf
(. If )S
f13_15 sf
<D2>S
f9_15 sf
(<:A)S
f13_15 sf
<D3>S
f0_15 sf
( is omitted, it stands for)S
482 987 :M
f13_15 sf
<D2>S
f9_15 sf
(<:Top)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 1014 :M
.974 .097(For the last two cases, we say that )J
f13_15 sf
.163<D2>A
f9_15 sf
.489(A)A
f13_15 sf
.163<D3>A
f0_15 sf
.778 .078( is a subtype of )J
480 1014 :M
f13_15 sf
.146<D2>A
f9_15 sf
.437(B)A
f13_15 sf
.146<D3>A
f0_15 sf
.354 .035( \()J
f13_15 sf
.146<D2>A
f9_15 sf
.437(A<:B)A
f13_15 sf
.146<D3>A
f0_15 sf
.804 .08(\) if every value of type )J
f13_15 sf
.146<D2>A
f9_15 sf
.437(A)A
f13_15 sf
.146<D3>A
f0_15 sf
.648 .065( is also a)J
145 1032 :M
(value of type )S
f13_15 sf
<D2>S
f9_15 sf
(B)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
endp
%%Page: 42 42
%%BeginPageSetup
initializepage
(luca; page: 42 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(42)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
172 160 :M
f0_15 sf
(Types can be used in the following contexts:)S
199 190 :M
f9_15 sf
(type X = A;)S
226 212 :M
f0_15 sf
(A top-level type declaration. )S
f13_15 sf
<D2>S
f9_15 sf
(X)S
f13_15 sf
<D3>S
f0_15 sf
( is bound in the following scope, and may occur in )S
724 212 :M
f13_15 sf
<D2>S
f9_15 sf
(A)S
f13_15 sf
<D3>S
f0_15 sf
( for)S
226 234 :M
(a recursive type definition.)S
199 265 :M
f9_15 sf
(type X\(X)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, )S
f0_15 sf
(...)S
f9_15 sf
(, X)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(\) = A;)S
226 287 :M
f0_15 sf
(A top-level parametric type declaration. The )S
f13_15 sf
<D2>S
f9_15 sf
(X)S
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
( are bound and may occur in )S
692 287 :M
f13_15 sf
<D2>S
f9_15 sf
(A)S
f13_15 sf
<D3>S
f0_15 sf
(. )S
f13_15 sf
<D2>S
f9_15 sf
(X)S
f13_15 sf
<D3>S
f0_15 sf
( may)S
226 309 :M
(occur in )S
f13_15 sf
<D2>S
f9_15 sf
(A)S
f13_15 sf
<D3>S
f0_15 sf
(, but only as )S
371 309 :M
f13_15 sf
<D2>S
f9_15 sf
(X\(X)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, .., X)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
<29>S
f13_15 sf
<D3>S
f0_15 sf
(, and in the following scope, but only as)S
226 331 :M
f13_15 sf
<D2>S
f9_15 sf
(X\(A)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, .., A)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
<29>S
f13_15 sf
<D3>S
f0_15 sf
(.)S
199 362 :M
f9_15 sf
(let x: A = a;)S
226 384 :M
f0_15 sf
2.004 .2(\(As opposed to )J
f13_15 sf
.286<D2>A
f9_15 sf
.858<6C6574CA78CA3DCA61>A
f13_15 sf
.286<D3>A
f0_15 sf
1.869 .187(.\) A type comment for a variable )J
644 384 :M
f13_15 sf
.293<D2>A
f9_15 sf
.878(x)A
f13_15 sf
.293<D3>A
f0_15 sf
1.556 .156( bound by )J
f13_15 sf
.293<D2>A
f9_15 sf
.878(let)A
f13_15 sf
<D3>S
226 406 :M
f0_15 sf
(\(similarly for )S
f13_15 sf
<D2>S
f9_15 sf
(var)S
f13_15 sf
<D3>S
f0_15 sf
(\).)S
199 437 :M
f9_15 sf
(proc\(x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(:A)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, )S
f0_15 sf
(...)S
f9_15 sf
(, x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(:A)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(\):A ! exc)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( )S
f0_15 sf
(...)S
f9_15 sf
( exc)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
( , b end )S
226 459 :M
f0_15 sf
.253 .025(\(As opposed to )J
f13_15 sf
<D2>S
f9_15 sf
.108(proc\(x)A
f9_10 sf
0 3 rm
.072(1)A
0 -3 rm
f9_15 sf
.28 .028(, .., x)J
f9_10 sf
0 3 rm
.072(n)A
0 -3 rm
f9_15 sf
.28 .028(\) b end)J
f13_15 sf
<D3>S
f0_15 sf
.338 .034(.\) A commented procedure heading; any)J
226 481 :M
.875 .087(of the )J
267 481 :M
f13_15 sf
.092<D2>A
f9_15 sf
.275(:A)A
f9_10 sf
0 3 rm
.183(i)A
0 -3 rm
f13_15 sf
.092<D3>A
f0_15 sf
.208 .021(, )J
306 481 :M
f13_15 sf
.141<D2>A
f9_15 sf
.423(:A)A
f13_15 sf
.141<D3>A
f0_15 sf
.595 .059(, and )J
f13_15 sf
.141<D2>A
f9_15 sf
.423(!)A
f0_15 sf
.176 .018( )J
382 481 :M
f9_15 sf
.303(exc)A
f9_10 sf
0 3 rm
.202(1)A
0 -3 rm
f0_15 sf
.252 .025( ... )J
f9_15 sf
.303(exc)A
f9_10 sf
0 3 rm
.202(n)A
0 -3 rm
f13_15 sf
.101<D3>A
f0_15 sf
.701 .07( \(the exceptions\) may be omitted. The last )J
f13_15 sf
.101<D2>A
f9_15 sf
.303(,)A
f13_15 sf
.101<D3>A
f0_15 sf
.385 .039( is)J
226 503 :M
(required only if the result type and/or the exception list is present. Similarly for methods.)S
199 534 :M
f9_15 sf
({x)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(:A)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(=>a)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
( )S
f0_15 sf
(...)S
f9_15 sf
(, x)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(:A)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(=>a)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(} )S
226 556 :M
f0_15 sf
.125 .013(\(As opposed to )J
f13_15 sf
<D2>S
f9_15 sf
.054({x)A
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
.054(=>a)A
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
.145 .014(, .., x)J
445 559 :M
f9_10 sf
(n)S
f9_15 sf
0 -3 rm
.061(=>a)A
0 3 rm
f9_10 sf
(n)S
f9_15 sf
0 -3 rm
.061(})A
0 3 rm
f13_15 sf
0 -3 rm
<D3>S
0 3 rm
f0_15 sf
0 -3 rm
.137 .014(.\) A commented object; any of the )J
0 3 rm
707 556 :M
f13_15 sf
<D2>S
f9_15 sf
.039(:A)A
f9_10 sf
0 3 rm
(i)S
0 -3 rm
f13_15 sf
<D3>S
f0_15 sf
.098 .01( may)J
226 578 :M
(be omitted.)S
199 609 :M
f9_15 sf
(All\(X\) proc\(x:X\):X, x end )S
226 631 :M
f0_15 sf
(The identity function which, for any argument of any type )S
579 631 :M
f13_15 sf
<D2>S
f9_15 sf
(T)S
f13_15 sf
<D3>S
f0_15 sf
(, returns its argument.)S
199 662 :M
f9_15 sf
(Some\(X\) Self\(S\) {x:X=>0, f:Int=>meth\(s:S\) s.x+1 end} )S
226 684 :M
f0_15 sf
.432 .043(An element of the \322abstract type\323 )J
435 684 :M
f13_15 sf
<D2>S
f9_15 sf
.058(Some\(X\)\312{x:X,\312f:Int})A
f13_15 sf
<D3>S
f0_15 sf
.177 .018( with hidden implemen)J
762 684 :M
(-)S
226 706 :M
(tation )S
264 706 :M
f13_15 sf
<D2>S
f9_15 sf
(X)S
f13_15 sf
<D3>S
f0_15 sf
( = )S
295 706 :M
f13_15 sf
<D2>S
f9_15 sf
(Int)S
f13_15 sf
<D3>S
f0_15 sf
(. Moreover, )S
f13_15 sf
<D2>S
f9_15 sf
(S)S
f13_15 sf
<D3>S
f0_15 sf
( is used as the type of self.)S
199 737 :M
f9_15 sf
(module M export type A=Int, x:A, f\(x:A,y:A\):Bool; ...)S
226 759 :M
f0_15 sf
(Emphasizing the intended exports of a module, and their types.)S
199 790 :M
f9_15 sf
(rd_open\(fs: FileSystem, t: Text\): Rd ! rd_failure)S
226 812 :M
f0_15 sf
(Describing the interface of a library routine.)S
172 840 :M
.341 .034(The value )J
f13_15 sf
<D2>S
f9_15 sf
.146(ok)A
f13_15 sf
<D3>S
f0_15 sf
.343 .034( should be considered as having every type, so it can be used to initialize variables.)J
145 858 :M
(However, its normal type is )S
315 858 :M
f13_15 sf
<D2>S
f9_15 sf
(Ok)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 902 :M
f2_18 sf
(A.5)S
185 902 :M
(Lexicon)S
172 930 :M
f0_15 sf
(The ASCII characters are divided into the following classes:)S
199 957 :M
(Blank)S
280 957 :M
f4_15 sf
(HT)S
f0_15 sf
( )S
303 957 :M
f4_15 sf
(LF)S
f0_15 sf
( )S
324 957 :M
f4_15 sf
(FF)S
343 957 :M
f0_15 sf
( )S
f4_15 sf
(CR)S
f0_15 sf
( )S
369 957 :M
f4_15 sf
(SP)S
199 975 :M
f0_15 sf
(Reserved)S
280 975 :M
(" ' ~)S
199 993 :M
(Delimiter)S
280 993 :M
(\( \) , . ; [ ] _ { } ? !)S
199 1011 :M
(Special)S
280 1011 :M
(# $ % & * + - / : < = > @ \\ ^ |)S
199 1029 :M
(Digit)S
280 1029 :M
(0 ... 9)S
endp
%%Page: 43 43
%%BeginPageSetup
initializepage
(luca; page: 43 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(43)S
199 160 :M
f0_15 sf
(Letter)S
280 160 :M
(A ... Z ` a ... z)S
199 178 :M
(Illegal)S
280 178 :M
(all the others)S
145 205 :M
(Moreover, we have the following pseudo-characters:)S
199 232 :M
(a StringChar is either:)S
226 250 :M
(- any single character that is not an Illegal character or one of )S
598 250 :M
f13_15 sf
<D2>S
f9_15 sf
(')S
f13_15 sf
<D3>S
f0_15 sf
(, )S
f13_15 sf
<D2>S
f9_15 sf
(")S
f13_15 sf
<D3>S
f0_15 sf
(, )S
643 250 :M
f13_15 sf
<D2>S
f9_15 sf
<5C>S
f13_15 sf
<D3>S
f0_15 sf
(.)S
226 268 :M
(- two characters )S
326 268 :M
f9_15 sf
<5C>S
f11_15 sf
(c)S
f0_15 sf
(, where )S
f11_15 sf
(c)S
f0_15 sf
( is any character that is not Illegal.)S
226 286 :M
(- four characters )S
f9_15 sf
<5C>S
f11_15 sf
(xxx)S
f0_15 sf
(, where )S
412 286 :M
f11_15 sf
(xxx)S
f0_15 sf
( is an octal number less than 256.)S
199 313 :M
(a Comment is, recursively, a sequence of non-Illegal characters and comments,)S
226 331 :M
(enclosed between )S
336 331 :M
f13_15 sf
<D2>S
f0_15 sf
<28>S
344 331 :M
f9_15 sf
(*)S
f13_15 sf
<D3>S
f0_15 sf
( and )S
f13_15 sf
<D2>S
f9_15 sf
(*\))S
f13_15 sf
<D3>S
f0_15 sf
(.)S
199 358 :M
(an EndOfFile is a fictitious character following the last character in a file or stream.)S
172 385 :M
(The following )S
f4_15 sf
(lexemes)S
309 385 :M
f0_15 sf
( are formed from characters and pseudo-characters:)S
199 412 :M
(Space)S
280 412 :M
(a sequence of Blanks and Comments.)S
199 430 :M
(AlphaNum)S
280 430 :M
(a sequence of Letters and Digits starting with a Letter.)S
199 448 :M
(Symbol)S
280 448 :M
(a sequence of Specials.)S
199 466 :M
(Char)S
280 466 :M
(a single StringChar enclosed between two )S
536 466 :M
f13_15 sf
<D2>S
f9_15 sf
(')S
f13_15 sf
<D3>S
f0_15 sf
(.)S
199 484 :M
(String)S
280 484 :M
(a sequence of StringChars enclosed between two )S
577 484 :M
f13_15 sf
<D2>S
f9_15 sf
(")S
f13_15 sf
<D3>S
f0_15 sf
(.)S
199 502 :M
(Nat)S
280 502 :M
(a sequence of Digits)S
199 520 :M
(Int)S
280 520 :M
(a Nat, possibly preceded by a single minus sign )S
f13_15 sf
<D2>S
f9_15 sf
(~)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
199 538 :M
(Real)S
280 538 :M
(an Int, and either: an )S
f13_15 sf
<D2>S
f0_15 sf
(e)S
417 538 :M
f13_15 sf
<D3>S
f0_15 sf
( and an Int; or a )S
f13_15 sf
<D2>S
f0_15 sf
(.)S
525 538 :M
f13_15 sf
<D3>S
f0_15 sf
(, an optional Nat,)S
280 556 :M
(and optionally an )S
388 556 :M
f13_15 sf
<D2>S
f0_15 sf
(e)S
398 556 :M
f13_15 sf
<D3>S
f0_15 sf
( and an Int.)S
199 574 :M
(Delimiter)S
280 574 :M
(a single Delimiter character.)S
199 592 :M
(EndOfFile)S
280 592 :M
(a single EndOfFile pseudo-character.)S
172 619 :M
.105 .011(A stream of characters is divided into lexemes by always extracting the longest prefix that is a lex)J
762 619 :M
(-)S
145 637 :M
-.007(eme. Note that Delimiters do not stick to each other or to other tokens even when they are not separated)A
145 655 :M
(by Space, but some care must be taken so that Symbols are not inadvertently merged.)S
172 682 :M
1.257 .126(A lexical )J
234 682 :M
f4_15 sf
.354(token)A
f0_15 sf
1.068 .107( is one of: Char, String, Int, Real, Delimiter, )J
551 682 :M
.872 .087(Identifier, Keyword, or EndOfFile.)J
145 700 :M
(Once a stream of characters has been split into lexemes, tokens are extracted as follows.)S
199 727 :M
(Space lexemes do not produce tokens.)S
199 745 :M
(Char, )S
236 745 :M
(String, Int, Real, Delimiter, and EndOfFile lexemes are also tokens.)S
199 763 :M
(AlphaNum and Symbol lexemes are Identifier tokens,)S
226 781 :M
(except when they have been declared to be )S
487 781 :M
f4_15 sf
(keywords)S
f0_15 sf
( \(see A.6\),)S
226 799 :M
(in which case they are Keyword tokens.)S
145 843 :M
f2_18 sf
(A.6)S
185 843 :M
(Syntax)S
172 871 :M
f0_15 sf
.148 .015(The grammar shown below is LL\(1\) and non-left-recursive. It is adapted, with minor editing, from)J
145 889 :M
(the Obliq metaparser input. See A.5 for the definition of lexical tokens.)S
172 907 :M
1.125 .113(Terminals are in double quotes )J
371 907 :M
f13_15 sf
.12<D2>A
f0_15 sf
.245(")A
f13_15 sf
.12<D3>A
f0_15 sf
.943 .094(. Non-terminals are declared by )J
f13_15 sf
.12<D2>A
f0_15 sf
.336(::=)A
605 907 :M
f13_15 sf
.14<D3>A
f0_15 sf
1.122 .112(, followed by a grammar.)J
145 925 :M
(Grammars have the following structure:)S
199 952 :M
({ g)S
f0_9 sf
0 3 rm
(1)S
0 -3 rm
222 952 :M
f0_15 sf
( .. g)S
245 955 :M
f0_9 sf
(n)S
250 952 :M
f0_15 sf
( })S
280 952 :M
(is a \(left-to-right\) choice of grammars g)S
f0_9 sf
0 3 rm
(i)S
0 -3 rm
521 952 :M
f0_15 sf
(.)S
199 970 :M
([ g)S
f0_9 sf
0 3 rm
(1)S
0 -3 rm
220 970 :M
f0_15 sf
( .. g)S
243 973 :M
f0_9 sf
(n)S
248 970 :M
f0_15 sf
( ])S
280 970 :M
(is a sequence of grammars g)S
f0_9 sf
0 3 rm
(i)S
0 -3 rm
453 970 :M
f0_15 sf
(.)S
199 988 :M
(\(g)S
f0_9 sf
0 3 rm
(1)S
0 -3 rm
216 988 :M
f0_15 sf
( * g)S
239 991 :M
f0_9 sf
(2)S
244 988 :M
f0_15 sf
<29>S
280 988 :M
(is g)S
f0_9 sf
0 3 rm
(1)S
0 -3 rm
306 988 :M
f0_15 sf
( followed by zero or more g)S
f0_9 sf
0 3 rm
(2)S
0 -3 rm
478 988 :M
f0_15 sf
(\325s, associating to the left.)S
199 1006 :M
(\(g\))S
280 1006 :M
(is grouping.)S
199 1033 :M
(ide)S
280 1033 :M
(recognizes an Identifier token)S
endp
%%Page: 44 44
%%BeginPageSetup
initializepage
(luca; page: 44 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(44)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
199 160 :M
f0_15 sf
(name)S
280 160 :M
(recognizes an Identifier or Keyword token)S
199 178 :M
(char)S
280 178 :M
(recognizes a Char token)S
199 196 :M
(string)S
280 196 :M
(recognizes a String token)S
199 214 :M
(int)S
280 214 :M
(recognizes an Int token)S
199 232 :M
(real)S
280 232 :M
(recognizes a Real token)S
199 250 :M
(EOF)S
280 250 :M
(recognizes an EndOfFile token)S
199 268 :M
("...")S
280 268 :M
(where )S
f13_15 sf
<D2>S
f0_15 sf
(...)S
335 268 :M
f13_15 sf
<D3>S
f0_15 sf
( is a Delimiter token: recognizes that Delimiter token)S
199 286 :M
("~...")S
280 286 :M
(where )S
f13_15 sf
<D2>S
f0_15 sf
(...)S
335 286 :M
f13_15 sf
<D3>S
f0_15 sf
( is an Identifier token: recognizes that Identifier token)S
199 304 :M
("...")S
280 304 :M
(where )S
f13_15 sf
<D2>S
f0_15 sf
(...)S
335 304 :M
f13_15 sf
<D3>S
f0_15 sf
( is an Identifier token: declares that identifier to be a keyword)S
307 322 :M
(and recognizes that Keyword token)S
172 349 :M
(The Obliq top-level syntax is an open-ended sequence of the non-terminal \322phrase\323:)S
145 378 :M
f9_10 sf
(phrase ::=)S
145 392 :M
(  { ";")S
145 406 :M
(    [ "~quit" ";" ])S
145 420 :M
(    [ "~help"  { name string [] } { name string [] } ";" ])S
145 434 :M
(    [ "~flag"  { name string [] } { name string [] } ";" ])S
145 448 :M
(    [ typDecl ";" ])S
145 462 :M
(    [ term { [ "!" { int [] } ] [] } ";" ])S
145 476 :M
(    [ "load"  { name string } ";"  ])S
145 490 :M
(    [ "import" name ";" ])S
145 504 :M
(    [ "module" name { [ "for" name ] [] })S
145 518 :M
(      { [ "import" importList  ]  [] } { [ "export" exportList ] [] } ";"  ])S
145 532 :M
(    [ "end" "module" ";" ])S
145 546 :M
(    [ "~establish" name { [ "for" name ] [] } ";" ])S
496 546 :M
(\(* reserved *\))S
145 560 :M
(    [ "~delete" name ";" ])S
496 560 :M
(\(* reserved *\))S
145 574 :M
(    [ "~save" name ";" ])S
496 574 :M
(\(* reserved *\))S
145 588 :M
(    [ "~qualify" ";" ])S
496 588 :M
(\(* reserved *\))S
145 602 :M
(    EOF })S
145 625 :M
(importList ::=)S
145 639 :M
(  { [ name  { [ "," importList ] [] } ]  [] })S
145 662 :M
(exportList ::=)S
145 676 :M
(  { [ typDecl { [ "," exportList ] [] } ] [ procDecl { [ "," exportList ] [] } ] [] })S
145 699 :M
(typDecl ::=)S
145 713 :M
(  [ "type" name { typParams [] } "=" typ ])S
145 736 :M
(typ ::=)S
145 750 :M
(  {)S
172 750 :M
([ "\(" typList "\)" { [ "->" typ excSpec ] [ "=>" typ excSpec ] [] } ])S
172 764 :M
([ "Option" typFields "end" ])S
172 778 :M
([ "{" typFields "}" ])S
172 792 :M
([ "[" { [ int "~*" ] [] } typ "]" ])S
172 806 :M
([ "All" "\(" name { [ "<:" typ ] [] } "\)" typ ])S
172 820 :M
([ "Some" "\(" name { [ "<:" typ ] [] } "\)" typ ])S
172 834 :M
([ "Self" "\(" name "\)" typ ])S
172 848 :M
([ name { [ "_" name { typParams [] } ] typParams [] } ] })S
145 871 :M
(typParams ::=)S
145 885 :M
(  [ "\(" typNameList "\)" ])S
145 908 :M
(typNameList ::=)S
145 922 :M
(  { [ name { [ "," typList ] [] } ] [] })S
145 945 :M
(typList ::=)S
145 959 :M
(  { [ typ { [ "," typList ] [] } ] [] })S
145 982 :M
(typFields ::=)S
145 996 :M
(  { [ name ":" typ { [ "," typFields ] [] } ] [] })S
145 1019 :M
(typSpec ::=)S
145 1033 :M
(  { [ ":" typ ] [] })S
endp
%%Page: 45 45
%%BeginPageSetup
initializepage
(luca; page: 45 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(45)S
145 166 :M
f9_10 sf
(excSpec ::=)S
145 180 :M
(  { [ "!" excList ] [] })S
145 203 :M
(typResSpec ::=)S
145 217 :M
(  { [ ":" typ { [ "!" excList ] [] } ] [ "!" excList ] })S
145 240 :M
(excList ::=)S
145 254 :M
(  { [ name { [ "_" name ] } excList ] [] })S
145 277 :M
(procDecl ::=)S
145 291 :M
(  { [ { "All" "Some" } "\(" name { typBound [] } "\)" procDecl ])S
145 305 :M
(    [ name { [ ":" typ ] [ "\(" ideList "\)" typResSpec ] [] } ] })S
145 328 :M
(termBinding ::=)S
145 342 :M
(  { [ ide typSpec "=" term { [ "," termBinding ] [] } ] [] })S
145 365 :M
(termSeq ::=)S
145 379 :M
(  [ term { [ ";" { termSeq [] } ] [] } ])S
145 402 :M
(termSeqOpt ::=)S
145 416 :M
(  { termSeq []  })S
145 439 :M
(term ::=)S
145 453 :M
(  \( termBase *)S
145 467 :M
(    { [ "\(" termList "\)" ])S
145 481 :M
(      [ "_" name { [ "\(" termList "\)" ])S
388 481 :M
([] } ])S
145 495 :M
(      [ "." name { [ ":=" termOrAlias ] [ "\(" termList "\)" ] [] } ])S
145 509 :M
(      [ ":=" term ])S
145 523 :M
(      [ "[" term)S
145 537 :M
(        { [ "]" { [ ":=" term ] [] } ])S
145 551 :M
(          [ "for" term "]" { [ ":=" term ] [] } ] } ])S
145 565 :M
(      [ ide term ])S
145 579 :M
(      [ "andif" term ])S
145 593 :M
(      [ "orif" term ])S
280 593 :M
(} \))S
145 616 :M
(termBase ::=)S
145 630 :M
(  {)S
145 644 :M
(    [ "~-" term ])S
145 658 :M
(    ide)S
145 672 :M
(    { "ok" "true" "false" char string int real })S
145 686 :M
(    [ "[" termList "]" ])S
145 700 :M
(    [ "{" { [ "protected" { "," [] } ] [] } { [ "serialized" { "," [] } ] [] })S
145 714 :M
(      termObjFields "}" ])S
145 728 :M
(    [ "option" name typSpec "=>" termSeqOpt "end" ])S
145 742 :M
(    [ "clone" "\(" termList "\)" ])S
145 756 :M
(    [ "redirect" termSeq "to" termSeq "end" ])S
145 770 :M
(    [ "proc" "\(" ideList "\)" { [ typResSpec "," ] [] } termSeqOpt "end" ])S
145 784 :M
(    [ "meth" "\(" ideList "\)" { [ typResSpec "," ] [] } termSeqOpt "end" ])S
145 798 :M
(    [ "\(" termSeqOpt "\)" ])S
145 812 :M
(    [ "let" { [ "rec" termBinding ] termBinding } ])S
145 826 :M
(    [ "var" { [ "rec" termBinding ] termBinding } ])S
145 840 :M
(    [ "if" termSeq "then" termSeqOpt termElsif ])S
145 854 :M
(    [ "case" termSeq "of" termCaseList ])S
145 868 :M
(    [ "loop" termSeqOpt "end" ])S
145 882 :M
(    "exit")S
145 896 :M
(    [ "for" ide typSpec "=" term "to" term "do" termSeqOpt "end" ])S
145 910 :M
(    [ "foreach" ide typSpec "in" term { [ "do" termSeqOpt ] [ "map" termSeqOpt ] } "end" ])S
145 924 :M
(    [ "exception")S
253 924 :M
("\(" term "\)" ])S
145 938 :M
(    [ "raise" "\(" term "\)" ])S
145 952 :M
(    [ "try" termSeqOpt)S
145 966 :M
(      { [ "except" termTryList "end" ])S
145 980 :M
(        [ "else" termSeqOpt "end" ])S
145 994 :M
(        [ "finally" termSeqOpt "end" ] } ])S
145 1008 :M
(    [ "lock" termSeq "do" termSeqOpt "end" ])S
145 1022 :M
(    [ "watch" termSeq "until" termSeq "end" ])S
endp
%%Page: 46 46
%%BeginPageSetup
initializepage
(luca; page: 46 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(46)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 157 :M
f9_10 sf
(    [ "All" "\(" name { [ "<:" typ ] [] } "\)" term ])S
145 171 :M
(    [ "Some" "\(" name { [ "<:" typ ] [] } "\)" term ])S
145 185 :M
(    [ "Self" "\(" name "\)" term ])S
145 199 :M
(  })S
145 222 :M
(termOrAlias ::=)S
145 236 :M
(  { term [ "alias" ide "of" termSeq "end" ] })S
145 259 :M
(termObjFields ::=)S
145 273 :M
(  { [ name typSpec "=>" termOrAlias { [ "," termObjFields ] [] } ] [] })S
145 296 :M
(termElsif ::=)S
145 310 :M
(  { [ "end" ])S
145 324 :M
(    [ "else" termSeqOpt "end" ])S
145 338 :M
(    [ "elsif" termSeq "then" termSeqOpt termElsif ] })S
145 361 :M
(termList ::=)S
145 375 :M
(  { [ term { [ "," termList ] [] } ] [] })S
145 398 :M
(ideList ::=)S
145 412 :M
(  { [ ide typSpec { [ "," ideList ] [] } ] [] })S
145 435 :M
(termCaseListEnd ::=)S
145 449 :M
(  { "end" [ "else" termSeqOpt "end" ] })S
145 472 :M
(termCaseList ::=)S
145 486 :M
(  { termCaseListEnd)S
145 500 :M
(    [ name)S
145 514 :M
(      { [ "\(" ide typSpec "\)" "=>" termSeqOpt { [ "," termCaseList ] termCaseListEnd } ])S
145 528 :M
(        [ "=>" termSeqOpt { [ "," termCaseList ] termCaseListEnd } ] } ] })S
145 551 :M
(termTryList ::=)S
145 565 :M
(  { [ "else" termSeqOpt ])S
145 579 :M
(    [ term "=>" termSeqOpt { [ "," termTryList ] [ "else" termSeqOpt ] [] } ])S
145 593 :M
(    [] })S
endp
%%Page: 47 47
%%BeginPageSetup
initializepage
(luca; page: 47 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(47)S
145 188 :M
f2_21 sf
(B.)S
172 188 :M
(System Reference)S
172 217 :M
f0_15 sf
.497 .05(This section contains information about running Obliq executables, handling source files, and us)J
762 217 :M
(-)S
145 235 :M
(ing built-in libraries.)S
145 279 :M
f2_18 sf
(B.1)S
185 279 :M
(The Executables)S
172 307 :M
f0_15 sf
.107 .011(The )J
f13_15 sf
<D2>S
f9_15 sf
.05(obliq)A
f13_15 sf
<D3>S
f0_15 sf
.115 .012( Unix shell command is a script that runs one of several versions of Obliq linked with)J
145 325 :M
.502 .05(different Modula-3 libraries, providing different built-in Obliq libraries. Network capabilities are sup)J
762 325 :M
(-)S
145 343 :M
(ported in all versions of Obliq.)S
172 361 :M
(Here are the executables currently provided, along with the supported built-in libraries:)S
199 388 :M
f9_15 sf
(obliq -min)S
334 388 :M
f0_15 sf
(\(array, ascii, bool, int, math, net, real, sys, text\))S
658 388 :M
(\322minimal\323 obliq)S
199 406 :M
f9_15 sf
(obliq -std)S
334 406 :M
f0_15 sf
(\(min + rd, wr, lex, fmt, pickle, process, thread\))S
658 406 :M
(\322standard\323 obliq)S
199 424 :M
f9_15 sf
(obliq -ui)S
334 424 :M
f0_15 sf
(\(std + color, form\))S
658 424 :M
(\322windows\323 obliq)S
199 442 :M
f9_15 sf
(obliq -anim)S
334 442 :M
f0_15 sf
(\(ui + graph, zeus\))S
658 442 :M
(\322animation\323 obliq)S
145 469 :M
(By default, )S
f13_15 sf
<D2>S
f9_15 sf
(obliq)S
f13_15 sf
<D3>S
f0_15 sf
( means )S
312 469 :M
f13_15 sf
<D2>S
f9_15 sf
(obliq -std)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 487 :M
.669 .067(The reason for these separate versions is that the size of the binaries varies greatly depending on)J
145 505 :M
(how many libraries are linked. The size affects linking time, startup-time, and paging behavior.)S
172 523 :M
1.202 .12(A typical Obliq network server needs to be only an )J
500 523 :M
f13_15 sf
.059<D2>A
f9_15 sf
.936 .094(obliq -min)J
595 523 :M
f13_15 sf
.162<D3>A
f0_15 sf
.554 .055( or an )J
f13_15 sf
.162<D2>A
f9_15 sf
2.562 .256(obliq -std)J
736 523 :M
f13_15 sf
.188<D3>A
f0_15 sf
1.243 .124(. An)J
145 541 :M
(Obliq network client will often be an )S
f13_15 sf
<D2>S
f9_15 sf
(obliq -ui)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 585 :M
f2_18 sf
(B.2)S
185 585 :M
(The Top-Level)S
172 613 :M
f0_15 sf
.429 .043(The )J
f13_15 sf
.067<D2>A
f9_15 sf
.2(obliq)A
f13_15 sf
.067<D3>A
f0_15 sf
.553 .055( program, when executed, enters an interactive evaluation loop, which can be exited)J
145 631 :M
1.178 .118(by typing Control-D or )J
295 631 :M
f13_15 sf
.16<D2>A
f9_15 sf
.481(quit;)A
f13_15 sf
.16<D3>A
f0_15 sf
.929 .093(. At the prompt, )J
f13_15 sf
.16<D2>A
f9_15 sf
.874 .087(- )J
475 631 :M
f13_15 sf
.251<D3>A
f0_15 sf
1.304 .13(, the user can input a )J
617 631 :M
f4_15 sf
(phrase)S
658 631 :M
f0_15 sf
1.192 .119(, which is always)J
145 649 :M
(terminated by a semicolon )S
f13_15 sf
<D2>S
f9_15 sf
(;)S
f13_15 sf
<D3>S
f0_15 sf
(. The first phrase to try out is probably:)S
199 679 :M
f9_15 sf
(- help;)S
145 707 :M
f0_15 sf
(which provides basic on-line help on various aspects of the system.)S
172 725 :M
.074 .007(The most common kind of input phrase is a )J
438 725 :M
f4_15 sf
.082 .008(term phrase)J
f0_15 sf
.06 .006(, which causes the parsing, evaluation, and)J
145 743 :M
(printing of the result of an expression. Examples of term phrases \(and comments\) are:)S
199 773 :M
f9_15 sf
(- 3+4;       )S
496 773 :M
(\(* question *\))S
199 795 :M
(7             )S
496 795 :M
(\(* answer *\))S
199 826 :M
(- "this is" & " a single text";)S
496 826 :M
(\(* text concatenation *\))S
199 848 :M
("this is a single text")S
199 879 :M
(- 3 is 4;      )S
496 879 :M
(\(* identity test *\))S
199 901 :M
(false)S
172 929 :M
f4_15 sf
.826 .083(Definition phrases)J
f0_15 sf
.403 .04( are used to bind identifiers to values in the top-level scope. One can use )J
f13_15 sf
.062<D2>A
f9_15 sf
.187(var)A
f13_15 sf
<D3>S
145 947 :M
f0_15 sf
.769 .077(for binding values to updatable variables, )J
405 947 :M
f13_15 sf
.078<D2>A
f9_15 sf
.234(let)A
f13_15 sf
.078<D3>A
f0_15 sf
.676 .068( for binding values, including procedures, to constant)J
145 965 :M
(identifiers, and )S
239 965 :M
f13_15 sf
<D2>S
f9_15 sf
(let rec)S
f13_15 sf
<D3>S
f0_15 sf
( for defining recursive procedures.)S
199 995 :M
f9_15 sf
(- var x = 3;)S
endp
%%Page: 48 48
%%BeginPageSetup
initializepage
(luca; page: 48 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(48)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
199 163 :M
f9_15 sf
(- x := x+1;)S
199 194 :M
(- let y = x+1;)S
199 225 :M
(- let rec fact =)S
199 247 :M
(    proc\(n\))S
199 269 :M
(      if n is 0 then 1 else n * fact\(n-1\) end)S
199 291 :M
(    end;)S
172 319 :M
f0_15 sf
1.102 .11(The Obliq top-level is statically scoped, just like the rest of the language. Hence, redefining an)J
145 337 :M
-.005(identifier at the top-level simply hides its previous incarnation and does not affect terms that already re)A
762 337 :M
(-)S
145 355 :M
(fer to it.)S
172 373 :M
.13 .013(When a top-level phrase finishes executing, the interpreter pretty-prints the result up to a small de)J
762 373 :M
(-)S
145 391 :M
.259 .026(fault depth, printing ellipses after that depth. One can require a larger \(but finite\) print depth by insert)J
761 391 :M
(-)S
145 409 :M
.914 .091(ing an exclamation mark before the final semicolon of a phrase; for example: )J
631 409 :M
f13_15 sf
.066<D2>A
f9_15 sf
.198(fact!;)A
f13_15 sf
.066<D3>A
f0_15 sf
.501 .05(. This larger)J
145 427 :M
.165 .016(default depth is sufficient in most situations. Otherwise, a given print depth )J
604 427 :M
f13_15 sf
<D2>S
f9_15 sf
.076(n)A
f13_15 sf
<D3>S
f0_15 sf
.168 .017( can be forced by saying)J
145 445 :M
f13_15 sf
<D2>S
f9_15 sf
(fact!n;)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 463 :M
.318 .032(Closures are printed by printing their program text only. If there are global variables, these are in)J
762 463 :M
(-)S
145 481 :M
.331 .033(dicated by )J
f13_15 sf
<D2>S
f9_15 sf
.14(global\(x)A
f9_14 sf
0 3 rm
.131(1)A
0 -3 rm
f9_15 sf
.14(,...,x)A
f9_14 sf
0 3 rm
.131(n)A
0 -3 rm
f9_15 sf
.14<29>A
f13_15 sf
<D3>S
f0_15 sf
.325 .033( followed by the program text. To print the values of global vari)J
761 481 :M
(-)S
145 499 :M
(ables, see )S
f13_15 sf
<D2>S
f9_15 sf
(help flags;)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 543 :M
f2_18 sf
(B.3)S
185 543 :M
(Program Files)S
172 571 :M
f0_15 sf
1.013 .101(Obliq programs should be stored in files with extension )J
524 571 :M
f13_15 sf
.129<D2>A
f9_15 sf
.386(.obl)A
f13_15 sf
.129<D3>A
f0_15 sf
.888 .089(. Such files may contain any se)J
762 571 :M
(-)S
145 589 :M
.804 .08(quence of top-level phrases. Files can then be loaded into the system, with the same effect as if they)J
145 607 :M
(were typed in at the top-level.)S
172 625 :M
(The top-level phrase:)S
199 655 :M
f9_15 sf
(- load Foo;)S
145 683 :M
f0_15 sf
-.005(attempts to load the file )A
f13_15 sf
<D2>S
f9_15 sf
-.008(Foo.obl)A
f13_15 sf
<D3>S
f0_15 sf
-.006( along the current search path. Alternatively, one can use an explicit)A
145 701 :M
(text string containing a file name \(relative to the current search path\), or an explicit file path:)S
199 731 :M
f9_15 sf
(- load "Foo.obl";)S
199 753 :M
(- load "/udir/luca/Foo.obl";)S
145 781 :M
f0_15 sf
.553 .055(The search path for loading is set by the environment variable )J
530 781 :M
.528 .053(OBLIQPATH, and can be changed via)J
145 799 :M
(the )S
f13_15 sf
<D2>S
f9_15 sf
(sys)S
f13_15 sf
<D3>S
f0_15 sf
( built-in library \(see B.6.1, or )S
380 799 :M
f13_15 sf
<D2>S
f9_15 sf
(help sys;)S
f13_15 sf
<D3>S
f0_15 sf
(\).)S
172 817 :M
.569 .057(At startup time, the Obliq system looks for a file called )J
516 817 :M
f13_15 sf
.053<D2>A
f9_15 sf
.159(.obliq)A
f13_15 sf
.053<D3>A
f0_15 sf
.417 .042( in the user\325s HOME directory,)J
145 835 :M
(and loads it if it finds it.)S
145 879 :M
f2_18 sf
(B.4)S
185 879 :M
(Modules)S
172 907 :M
f0_15 sf
.611 .061(Obliq modules are used for: \(1\) organizing, loading, and reloading collections of definitions, and)J
145 925 :M
.617 .062(\(2\) for turning collections of definitions into libraries, so that qualified names can be used for the de)J
762 925 :M
(-)S
145 943 :M
.88 .088(fined identifiers. Modules neither hide nor create scopes, except for turning identifiers into qualified)J
145 961 :M
(identifiers when a module is closed.)S
172 979 :M
.643 .064(An Obliq source file should normally contain a single module. But, in general, multiple modules)J
145 997 :M
.489 .049(can be stored in the same file, and modules can also be entered directly at the top-level. Both the top-)J
145 1015 :M
(level and the source files may contain definitions that are not grouped into modules.)S
endp
%%Page: 49 49
%%BeginPageSetup
initializepage
(luca; page: 49 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(49)S
172 160 :M
f0_15 sf
.872 .087(Modules can be used to record source file dependencies: when loading a module, the dependent)J
145 178 :M
.498 .05(modules are automatically loaded while avoiding duplicated loading. Modules also help keep the top-)J
145 196 :M
.17 .017(level consistent when reloading, for example after a bug fix. Reloading a module is like rolling back in)J
145 214 :M
.547 .055(time to the point when the module was first loaded: all intervening top-level definitions are discarded)J
145 232 :M
(before the module is reloaded.)S
172 250 :M
(It is recommended that a program file )S
f9_15 sf
(Foo.obl)S
f0_15 sf
( start with the line:)S
199 280 :M
f9_15 sf
(module Foo;)S
145 308 :M
f0_15 sf
(and end with the line:)S
199 338 :M
f9_15 sf
(end module;)S
172 366 :M
f0_15 sf
1.419 .142(A module named )J
f13_15 sf
.179<D2>A
f9_15 sf
.537(Foo)A
f13_15 sf
.179<D3>A
f0_15 sf
1.359 .136( terminating with )J
434 366 :M
f13_15 sf
.2<D2>A
f9_15 sf
3.136 .314(end module;)J
f13_15 sf
.2<D3>A
f0_15 sf
.806 .081( is said to be )J
f4_15 sf
.51(closed)A
671 366 :M
f0_15 sf
1.045 .104(. Closing )J
f13_15 sf
.163<D2>A
f9_15 sf
.487(Foo)A
f13_15 sf
<D3>S
145 384 :M
f0_15 sf
.138 .014(means erasing its definitions from the current scope, and adding back a library named )J
f13_15 sf
<D2>S
f9_15 sf
.054(Foo)A
f13_15 sf
<D3>S
f0_15 sf
.202 .02( containing)J
145 402 :M
.397 .04(those definitions. Hence, any top-level identifier )J
f13_15 sf
<D2>S
f9_15 sf
.135(x)A
f13_15 sf
<D3>S
f0_15 sf
.327 .033( declared within )J
561 402 :M
f13_15 sf
.051<D2>A
f9_15 sf
.153(Foo)A
f13_15 sf
.051<D3>A
f0_15 sf
.287 .029( is accessible as )J
f13_15 sf
.051<D2>A
f9_15 sf
.153(Foo_x)A
f13_15 sf
.051<D3>A
f0_15 sf
.266 .027( af-)J
145 420 :M
(ter closing. \(The syntax )S
f13_15 sf
<D2>S
f9_15 sf
(m)S
f0_15 sf
(_)S
310 420 :M
f9_15 sf
(x)S
f13_15 sf
<D3>S
f0_15 sf
( is the same as for the built-in libraries.\))S
172 438 :M
.142 .014(If )J
f13_15 sf
<D2>S
f9_15 sf
.666 .067(end module;)J
289 438 :M
f13_15 sf
.093<D3>A
f0_15 sf
.529 .053( is omitted, the module is said to be )J
516 438 :M
f4_15 sf
.112(open)A
f0_15 sf
.381 .038(: its identifiers are accessible simply)J
145 456 :M
.606 .061(as )J
162 456 :M
f13_15 sf
.055<D2>A
f9_15 sf
.165(x)A
f13_15 sf
.055<D3>A
f0_15 sf
.436 .044(. Closed modules should be the norm, but open modules are useful for importing definitions into)J
145 474 :M
(the top level, and for allowing pervasive unqualified definitions.)S
172 492 :M
.751 .075(If a module )J
248 492 :M
f13_15 sf
.073<D2>A
f9_15 sf
.22(Foo)A
f13_15 sf
.073<D3>A
f0_15 sf
.575 .057( relies on definitions stored in other program files \(which should similarly start)J
145 510 :M
(with )S
f13_15 sf
<D2>S
f9_15 sf
(module)S
f13_15 sf
<D3>S
f0_15 sf
( lines\), then )S
310 510 :M
f13_15 sf
<D2>S
f9_15 sf
(Foo)S
f13_15 sf
<D3>S
f0_15 sf
( can begin with the line:)S
199 540 :M
f9_15 sf
(module Foo import Foo2,Foo3;)S
145 568 :M
f0_15 sf
.38 .038(The way the imported definitions are used within )J
449 568 :M
f13_15 sf
<D2>S
f9_15 sf
.122(Foo)A
f13_15 sf
<D3>S
f0_15 sf
.337 .034( depends on whether the imported modules are)J
145 586 :M
(open or closed.)S
172 604 :M
.047 .005(When issuing the top-level command )J
f13_15 sf
<D2>S
f9_15 sf
.074 .007(load Foo;)J
f13_15 sf
<D3>S
f0_15 sf
.047 .005(, the module declaration above guarantees two)J
145 622 :M
.854 .085(properties: \(1\) if the modules )J
331 622 :M
f9_15 sf
.321(Foo2)A
f0_15 sf
.416 .042( and )J
f9_15 sf
.321(Foo3)A
f0_15 sf
.804 .08( have not been loaded already, they are loaded before)J
145 640 :M
f9_15 sf
.037(Foo)A
f0_15 sf
.071 .007( is loaded; \(2\) if the module )J
f9_15 sf
.037(Foo)A
f0_15 sf
.079 .008( is already loaded, )J
484 640 :M
f9_15 sf
.032(Foo)A
f0_15 sf
.075 .008( and all the modules that were loaded after)J
145 658 :M
.615 .062(it are erased from the top level before reloading )J
443 658 :M
f9_15 sf
.193(Foo)A
f0_15 sf
.512 .051(. This roll-back affects only the top-level defini)J
761 658 :M
(-)S
145 676 :M
(tion environment: it does not undo state changes.)S
172 694 :M
.305 .03(The form )J
233 694 :M
f13_15 sf
<D2>S
f9_15 sf
.338 .034(module Foo for L)J
f0_15 sf
.125 .012( ...)J
397 694 :M
f13_15 sf
<D3>S
f0_15 sf
.258 .026( indicates a collection of definitions named )J
665 694 :M
f13_15 sf
<D2>S
f9_15 sf
.077(Foo)A
f13_15 sf
<D3>S
f0_15 sf
.188 .019( that gener-)J
145 712 :M
.93 .093(ates a library named )J
276 712 :M
f13_15 sf
.115<D2>A
f9_15 sf
.345(L)A
f13_15 sf
.115<D3>A
f0_15 sf
.71 .071( \(instead of the default )J
f13_15 sf
.115<D2>A
f9_15 sf
.345(Foo)A
f13_15 sf
.115<D3>A
f0_15 sf
.886 .089(\) when the module is closed. Module names are)J
145 730 :M
1.259 .126(unique at the top level \(any repetition triggers roll-back\), but library names can be repeated. When)J
145 748 :M
.248 .025(multiple modules generate the same library )J
411 748 :M
f13_15 sf
<D2>S
f9_15 sf
.097(L)A
f13_15 sf
<D3>S
f0_15 sf
.245 .025(, their definitions are merged, with the latter ones taking)J
145 766 :M
.296 .03(precedence. Using this mechanism, it is possible to add definitions to built-in libraries, for example by)J
145 784 :M
f13_15 sf
<D2>S
f9_15 sf
(module text2 for text;)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 828 :M
f2_18 sf
(B.5)S
185 828 :M
(The Network Objects Daemon)S
172 856 :M
f0_15 sf
.853 .085( A name server must be running before )J
f13_15 sf
.127<D2>A
f9_15 sf
.38(net_export)A
f13_15 sf
.127<D3>A
f0_15 sf
1.025 .103( and similar operations can work. Obliq)J
145 874 :M
.554 .055(uses the name server provided with Modula-3 Network Objects )J
538 874 :M
.486 .049([Birrell, )J
591 874 :M
f4_15 sf
.498 .05(et al.)J
f0_15 sf
.686 .069( 1994])J
661 874 :M
.63 .063(, it can be started)J
145 892 :M
(by the Unix command )S
f13_15 sf
<D2>S
f9_15 sf
(netobjd)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 910 :M
.657 .066(To start a name server on your machine every time the Obliq interpreter starts, put the following)J
145 928 :M
(line in the )S
209 928 :M
f13_15 sf
<D2>S
f9_15 sf
(.obliq)S
f13_15 sf
<D3>S
f0_15 sf
( file in your home directory \(make sure the )S
f13_15 sf
<D2>S
f9_15 sf
(netobjd)S
f13_15 sf
<D3>S
f0_15 sf
( path is appropriate\):)S
199 958 :M
f9_15 sf
(process_new\(processor, ["/proj/mips/bin/netobjd"], true\);)S
145 986 :M
f0_15 sf
(The server process exits if it finds another copy of itself already running.)S
endp
%%Page: 50 50
%%BeginPageSetup
initializepage
(luca; page: 50 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(50)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
172 160 :M
f0_15 sf
.32 .032(Note that objects and engines exported via the )J
457 160 :M
f13_15 sf
<D2>S
f9_15 sf
.104(net)A
f13_15 sf
<D3>S
f0_15 sf
.271 .027( interface are not inherent security risks, even)J
145 178 :M
.994 .099(when they blindly execute client code. The operating system and file system of a server site are not)J
145 196 :M
(necessarily available \(see section A.2.9\); lexical scoping prevents any unauthorized access.)S
145 240 :M
f2_18 sf
(B.6)S
185 240 :M
(Built-in Libraries)S
172 268 :M
f0_15 sf
.918 .092(In this appendix we list the Obliq built-in )J
435 268 :M
.849 .085(libraries, many of which are entry points into popular)J
145 286 :M
.694 .069(Modula-3 libraries [Horning, )J
327 286 :M
f4_15 sf
.709 .071(et al.)J
f0_15 sf
.85 .085( 1993]. We use an informal typing notation in the specification of)J
145 304 :M
.151 .015(the operations, including a specification of the exceptions that may be raised \(see section A.4.1\). Many)J
145 322 :M
(operations raise errors as well, but these are not made explicit.)S
172 340 :M
.5 .05(We use the type comments of section A.4.1; all the exception conditions are documented, but the)J
145 358 :M
.906 .091(more obvious error conditions are not. We often provide informal English descriptions of the opera)J
762 358 :M
(-)S
145 376 :M
.834 .083(tions. For details of some operations one should look at the specification of the respective Modula-3)J
145 394 :M
(interfaces [Horning, )S
f4_15 sf
(et al.)S
299 394 :M
f0_15 sf
( 1993])S
338 394 :M
(.)S
172 412 :M
.365 .037(The )J
200 412 :M
f13_15 sf
<D2>S
f9_15 sf
.115(sys)A
f13_15 sf
<D3>S
f0_15 sf
.281 .028( library is special: it contains entry points into the implementation of Obliq and its com-)J
145 430 :M
(puting environment.)S
145 462 :M
f2_15 sf
(B.6.1)S
185 462 :M
(Sys)S
144 496 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(sys_copy)S
245 496 :M
f9_12 sf
(\(x: T\): T ! net_failure)S
469 496 :M
f13_12 sf
<C5>S
482 496 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(copy\(x\))S
562 496 :M
f13_15 sf
<D3>S
f0_12 sf
<29>S
569 496 :M
f9_12 sf
( )S
f0_12 sf
(Make a local copy of a value, including)S
482 510 :M
(most distributed values.)S
144 524 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(sys_print)S
252 524 :M
f9_12 sf
(\(x: T, depth: Int\): Ok)S
469 524 :M
f13_12 sf
<C5>S
482 524 :M
f0_12 sf
(Print an arbitrary value to stdout, up to some print depth.)S
482 538 :M
(\(Only available on-line.\))S
144 552 :M
f12_12 sf
(sys_printText)S
238 552 :M
f9_12 sf
(\(t: Text\): Ok)S
469 552 :M
f13_12 sf
<C5>S
482 552 :M
f0_12 sf
(Print a text to stdout. \(Only available on-line.\))S
144 566 :M
f12_12 sf
(sys_printFlush)S
245 566 :M
f9_12 sf
(\(\): Ok)S
469 566 :M
f13_12 sf
<C5>S
482 566 :M
f0_12 sf
(Flush stdout. \(Only available on-line.\))S
144 580 :M
f12_12 sf
(sys_pushSilence)S
f9_12 sf
(\(\): Ok)S
469 580 :M
f13_12 sf
<C5>S
482 580 :M
f0_12 sf
(Push the silence stack; when non-empty nothing is printed.)S
482 594 :M
(\(Only available on-line.\))S
144 608 :M
f12_12 sf
(sys_popSilence)S
245 608 :M
f9_12 sf
(\(\): Ok)S
469 608 :M
f13_12 sf
<C5>S
482 608 :M
f0_12 sf
(Pop the silence stack \(no-op on empty stack\). \(Only avail-)S
482 622 :M
(able on-line.\))S
144 636 :M
f12_12 sf
(sys_setPrompt)S
238 636 :M
f9_12 sf
(\(first: Text, next: Text\): Ok)S
469 636 :M
f13_12 sf
<C5>S
482 636 :M
f0_12 sf
(Set the interactive prompts \(defaults: first=)S
f13_15 sf
<D2>S
f0_15 sf
(")S
698 636 :M
f0_12 sf
(- )S
705 636 :M
f0_15 sf
(")S
f13_15 sf
<D3>S
f0_12 sf
(,)S
482 650 :M
(next=)S
f13_15 sf
<D2>S
f0_15 sf
(")S
519 650 :M
f0_12 sf
<CACA>S
f0_15 sf
(")S
f13_15 sf
<D3>S
f0_12 sf
(\). \(Only available on-line.\))S
144 664 :M
f12_12 sf
(sys_address)S
f9_12 sf
(: Text)S
469 664 :M
f13_12 sf
<C5>S
482 664 :M
f0_12 sf
(The current machine\325s network address.)S
144 678 :M
f12_12 sf
(sys_getSearchPath)S
f9_12 sf
(\(\): Text)S
469 678 :M
f13_12 sf
<C5>S
482 678 :M
f0_12 sf
(Get the current search path for )S
f13_15 sf
<D2>S
f9_12 sf
(load)S
663 678 :M
f13_15 sf
<D3>S
f0_12 sf
( and such. \(Only)S
482 692 :M
(available on-line.\))S
144 706 :M
f12_12 sf
(sys_setSearchPath)S
f9_12 sf
(\(t: Text\): Ok)S
469 706 :M
f13_12 sf
<C5>S
482 706 :M
f0_12 sf
(Set the current search path for )S
f13_15 sf
<D2>S
f9_12 sf
(load)S
661 706 :M
f13_15 sf
<D3>S
f0_12 sf
( and such. \(Only)S
482 720 :M
(available on-line.\))S
144 734 :M
f12_12 sf
(sys_getEnvVar)S
238 734 :M
f9_12 sf
(\(t: Text\): Text)S
469 734 :M
f13_12 sf
<C5>S
482 734 :M
f0_12 sf
(Return the value of the env variable whose name is )S
731 734 :M
f9_12 sf
(t)S
f0_12 sf
(, or)S
482 748 :M
f13_15 sf
<D2>S
f9_12 sf
("")S
f13_15 sf
<D3>S
f0_12 sf
( if there is no such variable.)S
144 762 :M
f12_12 sf
(sys_paramCount)S
245 762 :M
f9_12 sf
(: Int)S
469 762 :M
f13_12 sf
<C5>S
482 762 :M
f0_12 sf
(The number of program parameters.)S
144 776 :M
f12_12 sf
(sys_getParam)S
f9_12 sf
(\(n: Int\): Text)S
469 776 :M
f13_12 sf
<C5>S
482 776 :M
f0_12 sf
(Return the n-th program parameter \(indexed from 0\).)S
144 790 :M
f12_12 sf
(sys_callFailure)S
f9_12 sf
(: Exception)S
469 790 :M
f13_12 sf
<C5>S
482 790 :M
f0_12 sf
(Can be raised by Modula-3 code during a sys_call.)S
144 804 :M
f9_12 sf
(Some\(T\)Some\(U\))S
245 804 :M
f12_12 sf
(sys_call)S
f9_12 sf
(\(name: Text, args: [T]\): U ! sys_callFailure)S
469 818 :M
f13_12 sf
<C5>S
482 818 :M
f0_12 sf
(Call a pre-registered Modula-3 procedure.)S
145 858 :M
f2_15 sf
(B.6.2)S
185 858 :M
(Bool)S
144 892 :M
f12_12 sf
(true)S
173 892 :M
f9_12 sf
(: Bool)S
469 892 :M
f13_12 sf
<C5>S
482 892 :M
f0_12 sf
(The constant true.)S
144 906 :M
f12_12 sf
(false)S
f9_12 sf
(: Bool)S
469 906 :M
f13_12 sf
<C5>S
482 906 :M
f0_12 sf
(The constant false.)S
144 920 :M
f9_12 sf
(All\(T\)All\(U\))S
f12_12 sf
(bool_is)S
281 920 :M
f9_12 sf
(\(x: T, y: U\): Bool)S
469 920 :M
f13_12 sf
<C5>S
482 920 :M
f0_12 sf
(\(also infix )S
534 920 :M
f13_15 sf
<D2>S
f9_12 sf
(is)S
f13_15 sf
<D3>S
f0_12 sf
<29>S
558 920 :M
f9_12 sf
( )S
566 920 :M
f0_12 sf
(Identity predicate: value equality for Ok,)S
482 934 :M
(Bool, Int, Real, Char, Text, Exception; pointer equality)S
482 948 :M
(otherwise.)S
144 962 :M
f9_12 sf
(All\(T\)All\(U\))S
f12_12 sf
(bool_isnot)S
f9_12 sf
(\(x: T, y: U\): Bool)S
469 962 :M
f13_12 sf
<C5>S
482 962 :M
f0_12 sf
(\(also infix )S
534 962 :M
f13_15 sf
<D2>S
f9_12 sf
(isnot)S
f13_15 sf
<D3>S
f0_12 sf
<29>S
580 962 :M
f9_12 sf
( )S
f0_12 sf
(Negation of )S
647 962 :M
f13_15 sf
<D2>S
f9_12 sf
(is)S
665 962 :M
f13_15 sf
<D3>S
f0_12 sf
(.)S
144 976 :M
f12_12 sf
(bool_not)S
202 976 :M
f9_12 sf
(\(b: Bool\): Bool)S
469 976 :M
f13_12 sf
<C5>S
482 976 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(not\(b\))S
555 976 :M
f13_15 sf
<D3>S
f0_12 sf
<29>S
144 990 :M
f12_12 sf
(bool_and)S
202 990 :M
f9_12 sf
(\(b1: Bool, b2: Bool\): Bool)S
469 990 :M
f13_12 sf
<C5>S
482 990 :M
f0_12 sf
(\(also infix )S
534 990 :M
f13_15 sf
<D2>S
f9_12 sf
(and)S
559 990 :M
f13_15 sf
<D3>S
f0_12 sf
<29>S
144 1004 :M
f12_12 sf
(bool_or)S
f9_12 sf
(\(b1: Bool, b2: Bool\): Bool)S
469 1004 :M
f13_12 sf
<C5>S
482 1004 :M
f0_12 sf
(\(also infix )S
534 1004 :M
f13_15 sf
<D2>S
f9_12 sf
(or)S
f13_15 sf
<D3>S
f0_12 sf
<29>S
endp
%%Page: 51 51
%%BeginPageSetup
initializepage
(luca; page: 51 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(51)S
145 156 :M
f2_15 sf
(B.6.3)S
185 156 :M
(Int)S
144 190 :M
f12_12 sf
(n)S
f9_12 sf
(: Int)S
469 190 :M
f13_12 sf
<C5>S
482 190 :M
f0_12 sf
(Positive integer constants.)S
144 204 :M
f12_12 sf
(~n)S
f9_12 sf
(: Int)S
469 204 :M
f13_12 sf
<C5>S
482 204 :M
f0_12 sf
(Negative integer constants.)S
144 218 :M
f12_12 sf
(int_minus)S
209 218 :M
f9_12 sf
(\(n: Int\): Int)S
469 218 :M
f13_12 sf
<C5>S
482 218 :M
f0_12 sf
(Integer negation.)S
144 232 :M
f12_12 sf
(int_+)S
f9_12 sf
(\(n1: Int, n2: Int\): Int)S
469 232 :M
f13_12 sf
<C5>S
482 232 :M
f0_12 sf
(Integer addition.)S
144 246 :M
f12_12 sf
(int_-)S
f9_12 sf
(\(n1: Int, n2: Int\): Int)S
469 246 :M
f13_12 sf
<C5>S
482 246 :M
f0_12 sf
(Integer difference.)S
144 260 :M
f12_12 sf
(int_*)S
f9_12 sf
(\(n1: Int, n2: Int\): Int)S
469 260 :M
f13_12 sf
<C5>S
482 260 :M
f0_12 sf
(Integer multiplication.)S
144 274 :M
f12_12 sf
(int_/)S
f9_12 sf
(\(n1: Int, n2: Int\): Int)S
469 274 :M
f13_12 sf
<C5>S
482 274 :M
f0_12 sf
(Integer division.)S
144 288 :M
f12_12 sf
(int_%)S
f9_12 sf
(\(n1: Int, n2: Int\): Int)S
469 288 :M
f13_12 sf
<C5>S
482 288 :M
f0_12 sf
(\(also infix )S
534 288 :M
f13_15 sf
<D2>S
f9_12 sf
(%)S
f13_15 sf
<D3>S
f0_12 sf
<29>S
551 288 :M
f9_12 sf
( )S
f0_12 sf
(Integer modulo.)S
144 302 :M
f12_12 sf
(int_<)S
f9_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 302 :M
f13_12 sf
<C5>S
482 302 :M
f0_12 sf
(Integer less-than predicate.)S
144 316 :M
f12_12 sf
(int_>)S
f9_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 316 :M
f13_12 sf
<C5>S
482 316 :M
f0_12 sf
(Integer greater-than predicate.)S
144 330 :M
f12_12 sf
(int_<=)S
f9_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 330 :M
f13_12 sf
<C5>S
482 330 :M
f0_12 sf
(Integer no-greater-than predicate.)S
144 344 :M
f12_12 sf
(int_>=)S
f9_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 344 :M
f13_12 sf
<C5>S
482 344 :M
f0_12 sf
(Integer no-less-than predicate.)S
145 384 :M
f2_15 sf
(B.6.4)S
185 384 :M
(Real)S
144 418 :M
f12_12 sf
(n.m)S
166 418 :M
f9_12 sf
(: Int)S
469 418 :M
f13_12 sf
<C5>S
482 418 :M
f0_12 sf
(Positive real constants; m is optional.)S
144 432 :M
f12_12 sf
(~n.m)S
173 432 :M
f9_12 sf
(: Int)S
469 432 :M
f13_12 sf
<C5>S
482 432 :M
f0_12 sf
(Negative real constants; m is optional.)S
144 446 :M
f12_12 sf
(real_minus)S
f9_12 sf
(\(n: Real\): Real)S
469 446 :M
f13_12 sf
<C5>S
482 446 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(-n)S
526 446 :M
f13_15 sf
<D3>S
f0_12 sf
(\) Real negation.)S
144 460 :M
f12_12 sf
(real_minus)S
f9_12 sf
(\(n: Int\): Int)S
469 460 :M
f13_12 sf
<C5>S
482 460 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(-n)S
526 460 :M
f13_15 sf
<D3>S
f0_12 sf
(\) Overloaded integer negation.)S
144 474 :M
f12_12 sf
(real_+)S
f9_12 sf
(\(n1: Real, n2: Real\): Real)S
469 474 :M
f13_12 sf
<C5>S
482 474 :M
f0_12 sf
(\(also infix )S
534 474 :M
f13_15 sf
<D2>S
f9_12 sf
(+)S
f13_15 sf
<D3>S
f0_12 sf
(\) Real addition.)S
144 488 :M
f12_12 sf
(real_+)S
f9_12 sf
(\(n1: Int, n2: Int\): Int)S
469 488 :M
f13_12 sf
<C5>S
482 488 :M
f0_12 sf
(\(also infix )S
534 488 :M
f13_15 sf
<D2>S
f9_12 sf
(+)S
f13_15 sf
<D3>S
f0_12 sf
(\) Overloaded integer addition.)S
144 502 :M
f12_12 sf
(real_-)S
f9_12 sf
(\(n1: Real, n2: Real\): Real)S
469 502 :M
f13_12 sf
<C5>S
482 502 :M
f0_12 sf
(\(also infix )S
534 502 :M
f13_15 sf
<D2>S
f9_12 sf
(-)S
f13_15 sf
<D3>S
f0_12 sf
(\) Real difference.)S
144 516 :M
f12_12 sf
(real_-)S
f9_12 sf
(\(n1: Int, n2: Int\): Int)S
469 516 :M
f13_12 sf
<C5>S
482 516 :M
f0_12 sf
(\(also infix )S
534 516 :M
f13_15 sf
<D2>S
f9_12 sf
(-)S
f13_15 sf
<D3>S
f0_12 sf
(\) Overloaded integer difference.)S
144 530 :M
f12_12 sf
(real_*)S
f9_12 sf
(\(n1: Real, n2: Real\): Real)S
469 530 :M
f13_12 sf
<C5>S
482 530 :M
f0_12 sf
(\(also infix )S
534 530 :M
f13_15 sf
<D2>S
f9_12 sf
(*)S
f13_15 sf
<D3>S
f0_12 sf
(\) Real multiplication.)S
144 544 :M
f12_12 sf
(real_*)S
f9_12 sf
(\(n1: Int, n2: Int\): Int)S
469 544 :M
f13_12 sf
<C5>S
482 544 :M
f0_12 sf
(\(also infix )S
534 544 :M
f13_15 sf
<D2>S
f9_12 sf
(*)S
f13_15 sf
<D3>S
f0_12 sf
(\) Overloaded integer multiplication.)S
144 558 :M
f12_12 sf
(real_/)S
f9_12 sf
(\(n1: Real, n2: Real\): Real)S
469 558 :M
f13_12 sf
<C5>S
482 558 :M
f0_12 sf
(\(also infix )S
534 558 :M
f13_15 sf
<D2>S
f9_12 sf
(/)S
f13_15 sf
<D3>S
f0_12 sf
(\) Real division.)S
144 572 :M
f12_12 sf
(real_/)S
f9_12 sf
(\(n1: Int, n2: Int\): Int)S
469 572 :M
f13_12 sf
<C5>S
482 572 :M
f0_12 sf
(\(also infix )S
534 572 :M
f13_15 sf
<D2>S
f9_12 sf
(/)S
f13_15 sf
<D3>S
f0_12 sf
(\) Overloaded integer division.)S
144 586 :M
f12_12 sf
(real_<)S
f9_12 sf
(\(n1: Real, n2: Real\): Bool)S
469 586 :M
f13_12 sf
<C5>S
482 586 :M
f0_12 sf
(\(also infix )S
534 586 :M
f13_15 sf
<D2>S
f9_12 sf
(<)S
f13_15 sf
<D3>S
f0_12 sf
(\) Real less-than predicate)S
144 600 :M
f12_12 sf
(real_<)S
f9_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 600 :M
f13_12 sf
<C5>S
482 600 :M
f0_12 sf
(\(also infix )S
534 600 :M
f13_15 sf
<D2>S
f9_12 sf
(<)S
f13_15 sf
<D3>S
f0_12 sf
(\) Overloaded integer less-than predicate)S
144 614 :M
f12_12 sf
(real_>)S
f9_12 sf
(\(n1: Real, n2: Real\): Bool)S
469 614 :M
f13_12 sf
<C5>S
482 614 :M
f0_12 sf
(\(also infix )S
534 614 :M
f13_15 sf
<D2>S
f9_12 sf
(>)S
f13_15 sf
<D3>S
f0_12 sf
(\) Real greater-than predicate)S
144 628 :M
f12_12 sf
(real_>)S
f9_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 628 :M
f13_12 sf
<C5>S
482 628 :M
f0_12 sf
(\(also infix )S
534 628 :M
f13_15 sf
<D2>S
f9_12 sf
(>)S
f13_15 sf
<D3>S
f0_12 sf
(\) Overloaded integer greater-than predicate)S
144 642 :M
f12_12 sf
(real_<=)S
f9_12 sf
(\(n1: Real, n2: Real\): Bool)S
469 642 :M
f13_12 sf
<C5>S
482 642 :M
f0_12 sf
(\(also infix )S
534 642 :M
f13_15 sf
<D2>S
f9_12 sf
(<=)S
f13_15 sf
<D3>S
f0_12 sf
(\) Real no-greater-than predicate)S
144 656 :M
f12_12 sf
(real_<=)S
f9_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 656 :M
f13_12 sf
<C5>S
482 656 :M
f0_12 sf
(\(also infix )S
534 656 :M
f13_15 sf
<D2>S
f9_12 sf
(<=)S
f13_15 sf
<D3>S
f0_12 sf
(\) Overloaded integer no-greater-than pred.)S
144 670 :M
f12_12 sf
(real_>=)S
f9_12 sf
(\(n1: Real, n2: Real\): Bool)S
469 670 :M
f13_12 sf
<C5>S
482 670 :M
f0_12 sf
(\(also infix )S
534 670 :M
f13_15 sf
<D2>S
f9_12 sf
(>=)S
f13_15 sf
<D3>S
f0_12 sf
(\) Real no-less-than predicate.)S
144 684 :M
f12_12 sf
(real_>=)S
f9_12 sf
(\(n1: Int, n2: Int\): Bool)S
469 684 :M
f13_12 sf
<C5>S
482 684 :M
f0_12 sf
(\(also infix )S
534 684 :M
f13_15 sf
<D2>S
f9_12 sf
(>=)S
f13_15 sf
<D3>S
f0_12 sf
(\) Overloaded integer no-less-than pred.)S
144 698 :M
f12_12 sf
(real_float)S
f9_12 sf
(\(n: Int\): Real)S
469 698 :M
f13_12 sf
<C5>S
482 698 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(float\(n\))S
569 698 :M
f13_15 sf
<D3>S
f0_12 sf
(\) Integer-to-real conversion.)S
144 712 :M
f12_12 sf
(real_float)S
f9_12 sf
(\(n: Real\): Real)S
469 712 :M
f13_12 sf
<C5>S
482 712 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(float\(n\))S
569 712 :M
f13_15 sf
<D3>S
f0_12 sf
(\) Overloaded; identity on reals.)S
144 726 :M
f12_12 sf
(real_round)S
f9_12 sf
(\(n: Real\): Int)S
469 726 :M
f13_12 sf
<C5>S
482 726 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(round\(n\))S
569 726 :M
f13_15 sf
<D3>S
f0_12 sf
(\) Real-to-integer rounding.)S
144 740 :M
f12_12 sf
(real_round)S
f9_12 sf
(\(n: Int\): Int)S
469 740 :M
f13_12 sf
<C5>S
482 740 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(round\(n\))S
569 740 :M
f13_15 sf
<D3>S
f0_12 sf
(\) Overloaded; identity on integers.)S
144 754 :M
f12_12 sf
(real_floor)S
f9_12 sf
(\(n: Real\): Int)S
469 754 :M
f13_12 sf
<C5>S
482 754 :M
f0_12 sf
(Greatest integers no greater than n.)S
144 768 :M
f12_12 sf
(real_floor)S
f9_12 sf
(\(n: Int\): Int)S
469 768 :M
f13_12 sf
<C5>S
482 768 :M
f0_12 sf
(Overloaded; identity on integers.)S
144 782 :M
f12_12 sf
(real_ceiling)S
f9_12 sf
(\(n: Real\): Int)S
469 782 :M
f13_12 sf
<C5>S
482 782 :M
f0_12 sf
(Least integers no less than n.)S
144 796 :M
f12_12 sf
(real_ceiling)S
f9_12 sf
(\(n: Int\): Int)S
469 796 :M
f13_12 sf
<C5>S
482 796 :M
f0_12 sf
(Overloaded; identity on integers.)S
145 836 :M
f2_15 sf
(B.6.5)S
185 836 :M
(Math)S
144 870 :M
f12_12 sf
(math_pi)S
f9_12 sf
(: Real)S
469 870 :M
f13_12 sf
<C5>S
482 870 :M
f0_12 sf
(3.1415926535897932384626433833.)S
144 884 :M
f12_12 sf
(math_e)S
f9_12 sf
(: Real)S
469 884 :M
f13_12 sf
<C5>S
482 884 :M
f0_12 sf
(2.7182818284590452353602874714.)S
144 898 :M
f12_12 sf
(math_degree)S
f9_12 sf
(: Real)S
469 898 :M
f13_12 sf
<C5>S
482 898 :M
f0_12 sf
(0.017453292519943295769236907684;)S
482 912 :M
(1 degree in radiants.)S
144 926 :M
f12_12 sf
(math_exp)S
202 926 :M
f9_12 sf
(\(n: Real\): Real)S
469 926 :M
f13_12 sf
<C5>S
482 926 :M
f4_12 sf
(e)S
f0_12 sf
( to the n-th power.)S
144 940 :M
f12_12 sf
(math_log)S
202 940 :M
f9_12 sf
(\(n: Real\): Real)S
469 940 :M
f13_12 sf
<C5>S
482 940 :M
f0_12 sf
(log base )S
525 940 :M
f4_12 sf
(e)S
f0_12 sf
(.)S
144 954 :M
f12_12 sf
(math_sqrt)S
209 954 :M
f9_12 sf
(\(n: Real\): Real)S
469 954 :M
f13_12 sf
<C5>S
482 954 :M
f0_12 sf
(Square root.)S
144 968 :M
f12_12 sf
(math_hypot)S
f9_12 sf
(\(n: Real, m: Real\): Real)S
469 968 :M
f13_12 sf
<C5>S
482 968 :M
f0_12 sf
(sqrt\(\(n*n\)+\(m*m\)\).)S
144 982 :M
f12_12 sf
(math_pow)S
202 982 :M
f9_12 sf
(\(n: Real, m: Real\): Real)S
469 982 :M
f13_12 sf
<C5>S
482 982 :M
f0_12 sf
(n to the m-th power.)S
144 996 :M
f12_12 sf
(math_cos)S
202 996 :M
f9_12 sf
(\(n: Real\): Real)S
469 996 :M
f13_12 sf
<C5>S
482 996 :M
f0_12 sf
(Cosine in radians.)S
144 1010 :M
f12_12 sf
(math_sin)S
202 1010 :M
f9_12 sf
(\(n: Real\): Real)S
469 1010 :M
f13_12 sf
<C5>S
482 1010 :M
f0_12 sf
(Sine in radians.)S
144 1024 :M
f12_12 sf
(math_tan)S
202 1024 :M
f9_12 sf
(\(n: Real\): Real)S
469 1024 :M
f13_12 sf
<C5>S
482 1024 :M
f0_12 sf
(Tangent in radians.)S
endp
%%Page: 52 52
%%BeginPageSetup
initializepage
(luca; page: 52 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(52)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
144 157 :M
f12_12 sf
(math_acos)S
209 157 :M
f9_12 sf
(\(n: Real\): Real)S
469 157 :M
f13_12 sf
<C5>S
482 157 :M
f0_12 sf
(Arc cosine in radians.)S
144 171 :M
f12_12 sf
(math_asin)S
209 171 :M
f9_12 sf
(\(n: Real\): Real)S
469 171 :M
f13_12 sf
<C5>S
482 171 :M
f0_12 sf
(Arc sine in radians.)S
144 185 :M
f12_12 sf
(math_atan)S
209 185 :M
f9_12 sf
(\(n: Real\): Real)S
469 185 :M
f13_12 sf
<C5>S
482 185 :M
f0_12 sf
(Arc tangent in radians.)S
144 199 :M
f12_12 sf
(math_atan2)S
f9_12 sf
(\(n: Real, m: Real\): Real)S
469 199 :M
f13_12 sf
<C5>S
482 199 :M
f0_12 sf
(Arc tangent of n/m in radians.)S
145 239 :M
f2_15 sf
(B.6.6)S
185 239 :M
(Ascii)S
144 273 :M
f12_12 sf
(c)S
f9_12 sf
(: Char)S
469 273 :M
f13_12 sf
<C5>S
482 273 :M
f0_12 sf
(A character in single quotes.)S
144 287 :M
f12_12 sf
(ascii_char)S
f9_12 sf
(\(n: Int\): Char)S
469 287 :M
f13_12 sf
<C5>S
482 287 :M
f0_12 sf
(The ascii character of integer code )S
651 287 :M
f13_15 sf
<D2>S
f9_12 sf
(n)S
f13_15 sf
<D3>S
f0_12 sf
(.)S
144 301 :M
f12_12 sf
(ascii_val)S
209 301 :M
f9_12 sf
(\(c: Char\): Int)S
469 301 :M
f13_12 sf
<C5>S
482 301 :M
f0_12 sf
(The integer code of the ascii character )S
f13_15 sf
<D2>S
f9_12 sf
(c)S
f13_15 sf
<D3>S
f0_12 sf
(.)S
145 341 :M
f2_15 sf
(B.6.7)S
185 341 :M
(Text)S
145 375 :M
f12_12 sf
(t)S
f9_12 sf
(: Text)S
469 375 :M
f13_12 sf
<C5>S
482 375 :M
f0_12 sf
(A string in double quotes.)S
145 389 :M
f12_12 sf
(text_new)S
203 389 :M
f9_12 sf
(\(size: Int, init: Char\): Text)S
469 389 :M
f13_12 sf
<C5>S
482 389 :M
f0_12 sf
(A text of size )S
f13_15 sf
<D2>S
f9_12 sf
(size)S
581 389 :M
f13_15 sf
<D3>S
f0_12 sf
(, all filled with )S
658 389 :M
f13_15 sf
<D2>S
f9_12 sf
(init)S
690 389 :M
f13_15 sf
<D3>S
f0_12 sf
(.)S
145 403 :M
f12_12 sf
(text_empty)S
f9_12 sf
(\(t: Text\): Bool)S
469 403 :M
f13_12 sf
<C5>S
482 403 :M
f0_12 sf
(Test for empty text.)S
145 417 :M
f12_12 sf
(text_length)S
f9_12 sf
(\(t: Text\): Int)S
469 417 :M
f13_12 sf
<C5>S
482 417 :M
f0_12 sf
(Length of a text.)S
145 431 :M
f12_12 sf
(text_equal)S
f9_12 sf
(\(t1: Text, t2: Text\): Bool)S
469 431 :M
f13_12 sf
<C5>S
482 431 :M
f0_12 sf
(Text equality \(case sensitive\).)S
145 445 :M
f12_12 sf
(text_char)S
210 445 :M
f9_12 sf
(\(t: Text, i: Int\): Char)S
469 445 :M
f13_12 sf
<C5>S
482 445 :M
f0_12 sf
(The i-th character of a text \(if it exists\); zero-indexed.)S
145 459 :M
f12_12 sf
(text_sub)S
203 459 :M
f9_12 sf
(\(t: Text, start: Int, size: Int\): Text)S
482 459 :M
f0_12 sf
(The subtext beginning at )S
604 459 :M
f13_15 sf
<D2>S
f9_12 sf
(start)S
f13_15 sf
<D3>S
f0_12 sf
(, and of size )S
707 459 :M
f13_15 sf
<D2>S
f9_12 sf
(size)S
739 459 :M
f13_15 sf
<D3>S
f0_12 sf
( \(if it)S
482 473 :M
(exists\).)S
145 487 :M
f12_12 sf
(text_&)S
f9_12 sf
(\(t1: Text, t2: Text\): Text)S
469 487 :M
f13_12 sf
<C5>S
482 487 :M
f0_12 sf
(\(also infix )S
534 487 :M
f13_15 sf
<D2>S
f9_12 sf
(&)S
f13_15 sf
<D3>S
f0_12 sf
<29>S
551 487 :M
f9_12 sf
( )S
f0_12 sf
(The concatenation of two texts.)S
145 501 :M
f12_12 sf
(text_precedes)S
239 501 :M
f9_12 sf
(\(t1: Text, t2: Text\): Bool)S
469 501 :M
f13_12 sf
<C5>S
482 501 :M
f0_12 sf
(Whether )S
f13_15 sf
<D2>S
f9_12 sf
(t1)S
544 501 :M
f13_15 sf
<D3>S
f0_12 sf
( precedes )S
595 501 :M
f13_15 sf
<D2>S
f9_12 sf
(t2)S
f13_15 sf
<D3>S
f0_12 sf
( in lexicographic \(ascii\) order.)S
145 515 :M
f12_12 sf
(text_decode)S
f9_12 sf
(\(t: Text\): Text)S
469 515 :M
f13_12 sf
<C5>S
482 515 :M
f0_12 sf
(Every occurrence of an escape sequence is replaced by the)S
482 529 :M
(corresponding non-printing formatting character: )S
721 529 :M
f13_15 sf
<D2>S
f9_12 sf
<5C5C>S
f13_15 sf
<D3>S
f0_12 sf
( =)S
482 543 :M
f13_15 sf
<D2>S
f9_12 sf
<5C>S
f13_15 sf
<D3>S
f0_12 sf
(;  )S
505 543 :M
f13_15 sf
<D2>S
f9_12 sf
(\\')S
f13_15 sf
<D3>S
f0_12 sf
<CA3D20>S
538 543 :M
f13_15 sf
<D2>S
f9_12 sf
(')S
f13_15 sf
<D3>S
f0_12 sf
(;  )S
f13_15 sf
<D2>S
f9_12 sf
<5C>S
f9_14 sf
(")S
579 543 :M
f13_15 sf
<D3>S
f0_12 sf
( = )S
595 543 :M
f13_15 sf
<D2>S
f9_14 sf
(")S
f13_15 sf
<D3>S
f0_12 sf
(;  )S
f13_15 sf
<D2>S
f9_12 sf
<5C>S
629 543 :M
f9_14 sf
(n)S
f13_15 sf
<D3>S
f0_12 sf
( = )S
653 543 :M
f13_15 sf
<D2>S
f11_14 sf
(LF)S
673 543 :M
f13_15 sf
<D3>S
f0_12 sf
(;  )S
f13_15 sf
<D2>S
f9_12 sf
<5C>S
f9_14 sf
(r)S
f13_15 sf
<D3>S
f0_12 sf
( = )S
719 543 :M
f13_15 sf
<D2>S
f11_14 sf
(CR)S
739 543 :M
f13_15 sf
<D3>S
f0_12 sf
(;)S
482 557 :M
f13_15 sf
<D2>S
f9_12 sf
<5C>S
f9_14 sf
(t)S
501 557 :M
f13_15 sf
<D3>S
f0_12 sf
( = )S
f13_15 sf
<D2>S
f11_14 sf
(HT)S
536 557 :M
f13_15 sf
<D3>S
f0_12 sf
(;  )S
549 557 :M
f13_15 sf
<D2>S
f9_12 sf
<5C>S
f9_14 sf
(f)S
f13_15 sf
<D3>S
f0_12 sf
( = )S
583 557 :M
f13_15 sf
<D2>S
f11_14 sf
(FF)S
603 557 :M
f13_15 sf
<D3>S
f0_12 sf
(;  )S
f13_15 sf
<D2>S
f9_12 sf
<5C>S
f9_14 sf
(t)S
634 557 :M
f13_15 sf
<D3>S
f0_12 sf
( = )S
f13_15 sf
<D2>S
f11_14 sf
(HT)S
669 557 :M
f13_15 sf
<D3>S
f0_12 sf
(;  )S
682 557 :M
f13_15 sf
<D2>S
f9_12 sf
<5C>S
f11_14 sf
(xxx)S
f13_15 sf
<D3>S
f0_12 sf
( = )S
733 557 :M
f13_15 sf
<D2>S
f11_14 sf
(xxx)S
f13_15 sf
<D3>S
482 571 :M
f0_12 sf
(\(octals )S
517 571 :M
f13_15 sf
<D2>S
f0_12 sf
(000)S
f13_15 sf
<D3>S
f0_12 sf
(..)S
f13_15 sf
<D2>S
f0_12 sf
(177)S
f13_15 sf
<D3>S
f0_12 sf
(\);  )S
f13_15 sf
<D2>S
f9_12 sf
<5C>S
595 571 :M
f11_14 sf
(c)S
f13_15 sf
<D3>S
f0_12 sf
( = )S
619 571 :M
f13_15 sf
<D2>S
f11_14 sf
(c)S
f0_12 sf
( )S
f13_15 sf
<D3>S
f0_12 sf
( \(otherwise\).)S
145 585 :M
f12_12 sf
(text_encode)S
f9_12 sf
(\(t: Text\): Text)S
469 585 :M
f13_12 sf
<C5>S
482 585 :M
f0_12 sf
(Every occurrence of a non-printing formatting character is)S
482 599 :M
(replaced by an escape sequence.)S
145 613 :M
f12_12 sf
(text_explode)S
f9_12 sf
(\(seps: Text, t: Text\): [Text])S
469 613 :M
f13_12 sf
<C5>S
482 613 :M
f0_12 sf
(Splits an input text into a similarly ordered array of texts,)S
482 627 :M
(each a maximal subsequence of the input text not contain)S
757 627 :M
(-)S
482 641 :M
(ing sep chars. The empty text is exploded as a singleton ar)S
762 641 :M
(-)S
482 655 :M
(ray of the empty text. Each sep char in the input produces a)S
482 669 :M
(break, so the size of the result is 1 + the number of sep)S
482 683 :M
(chars in the text.)S
f9_12 sf
( )S
569 683 :M
f13_15 sf
<D2>S
f9_12 sf
(implode\(explode\()S
482 697 :M
f9_14 sf
(")S
f9_12 sf
(c)S
498 697 :M
f9_14 sf
(",)S
f9_12 sf
(text\),'c'\))S
f13_15 sf
<D3>S
f0_12 sf
( is the identity.)S
145 711 :M
f12_12 sf
(text_implode)S
f9_12 sf
(\(sep: Char, a: [Text]\): Text ! net_failure)S
469 725 :M
f13_12 sf
<C5>S
482 725 :M
f0_12 sf
(Concatenate an array of texts into a single text, separating)S
482 739 :M
(the pieces by a single sep char. A zero-length array is im)S
754 739 :M
(-)S
482 753 :M
(ploded as the empty text. )S
f13_15 sf
<D2>S
f9_12 sf
(explode\()S
666 753 :M
f9_14 sf
(")S
f9_12 sf
(c)S
682 753 :M
f9_14 sf
(",)S
f9_12 sf
(implode\()S
482 767 :M
('c')S
504 767 :M
f9_14 sf
(,)S
f9_12 sf
(text\)\))S
f13_15 sf
<D3>S
f0_12 sf
( is the identity provided that the array has)S
482 781 :M
(positive size and sep does not occur in the array elements.)S
145 795 :M
f12_12 sf
(text_hash)S
210 795 :M
f9_12 sf
(\(t: Text\): Int)S
469 795 :M
f13_12 sf
<C5>S
482 795 :M
f0_12 sf
(A hash function.)S
145 809 :M
f12_12 sf
(text_toInt)S
f9_12 sf
(\(t: Text\): Int)S
469 809 :M
f13_12 sf
<C5>S
482 809 :M
f0_12 sf
(Convert a text to an integer \(see also fmt_\).)S
145 823 :M
f12_12 sf
(text_fromInt)S
f9_12 sf
(\(n: Int\): Text)S
469 823 :M
f13_12 sf
<C5>S
482 823 :M
f0_12 sf
(Convert an integer to a text \(see also lex_\).)S
145 837 :M
f12_12 sf
(text_findFirstChar)S
275 837 :M
f9_12 sf
(\(c: Char, t: Text, n: Int\): Int)S
469 851 :M
f13_12 sf
<C5>S
482 851 :M
f0_12 sf
(The index of the first occurrence of )S
655 851 :M
f13_15 sf
<D2>S
f9_12 sf
(c)S
f13_15 sf
<D3>S
f0_12 sf
( in )S
f13_15 sf
<D2>S
f9_12 sf
(t)S
694 851 :M
f13_15 sf
<D3>S
f0_12 sf
(, past )S
f13_15 sf
<D2>S
f9_12 sf
(n)S
f13_15 sf
<D3>S
f0_12 sf
(. )S
f9_12 sf
(-1)S
482 865 :M
f0_12 sf
(if not found.)S
145 879 :M
f12_12 sf
(text_findLastChar)S
f9_12 sf
(\(c: Char, t: Text, n: Int\): Int)S
469 893 :M
f13_12 sf
<C5>S
482 893 :M
f0_12 sf
(The index of the last occurrence of )S
f13_15 sf
<D2>S
f9_12 sf
(c)S
f13_15 sf
<D3>S
f0_12 sf
( in )S
681 893 :M
f13_15 sf
<D2>S
f9_12 sf
(t)S
f13_15 sf
<D3>S
f0_12 sf
(, before )S
734 893 :M
f13_15 sf
<D2>S
f9_12 sf
(n)S
f13_15 sf
<D3>S
f0_12 sf
(. )S
f9_12 sf
(-1)S
482 907 :M
f0_12 sf
(if not found.)S
145 921 :M
f12_12 sf
(text_findFirst)S
246 921 :M
f9_12 sf
(\(p: Text, t: Text, n: Int\): Int)S
482 921 :M
f13_12 sf
<C5>S
496 921 :M
f0_12 sf
(The index of the first char of the first occurrence of )S
746 921 :M
f13_15 sf
<D2>S
f9_12 sf
(p)S
f13_15 sf
<D3>S
482 935 :M
f0_12 sf
(in )S
f13_15 sf
<D2>S
f9_12 sf
(t)S
505 935 :M
f13_15 sf
<D3>S
f0_12 sf
(, past )S
f13_15 sf
<D2>S
f9_12 sf
(n)S
f13_15 sf
<D3>S
f0_12 sf
(. )S
f9_12 sf
(-1)S
f0_12 sf
( if not found.)S
145 949 :M
f12_12 sf
(text_findLast)S
239 949 :M
f9_12 sf
(\(p: Text, t: Text, n: Int\): Int)S
469 949 :M
f13_12 sf
<C5>S
482 949 :M
f0_12 sf
(The index of the first char of the last occurrence of )S
729 949 :M
f13_15 sf
<D2>S
f9_12 sf
(p)S
f13_15 sf
<D3>S
f0_12 sf
( in)S
482 963 :M
f13_15 sf
<D2>S
f9_12 sf
(t)S
f13_15 sf
<D3>S
f0_12 sf
(, before )S
535 963 :M
f13_15 sf
<D2>S
f9_12 sf
(n)S
f13_15 sf
<D3>S
f0_12 sf
(. )S
f9_12 sf
(-1)S
f0_12 sf
( if not found.)S
145 977 :M
f12_12 sf
(text_replaceAll)S
f9_12 sf
(\(old: Text, new: Text, t: Text\): Text)S
469 991 :M
f13_12 sf
<C5>S
482 991 :M
f0_12 sf
(Replace all occurrences of )S
612 991 :M
f13_15 sf
<D2>S
f9_12 sf
(old)S
637 991 :M
f13_15 sf
<D3>S
f0_12 sf
( by )S
f13_15 sf
<D2>S
f9_12 sf
(new)S
f13_15 sf
<D3>S
f0_12 sf
( in )S
f13_15 sf
<D2>S
f9_12 sf
(t)S
711 991 :M
f13_15 sf
<D3>S
f0_12 sf
(, as found)S
482 1005 :M
(by iterating )S
540 1005 :M
f13_15 sf
<D2>S
f9_12 sf
(findFirst)S
608 1005 :M
f13_15 sf
<D3>S
f0_12 sf
(.)S
endp
%%Page: 53 53
%%BeginPageSetup
initializepage
(luca; page: 53 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(53)S
145 156 :M
f2_15 sf
(B.6.8)S
185 156 :M
(Array)S
145 190 :M
f12_12 sf
([e)S
f12_9 sf
0 3 rm
(1)S
0 -3 rm
f12_12 sf
(, ..., e)S
222 193 :M
f12_9 sf
(n)S
f12_12 sf
0 -3 rm
(])S
0 3 rm
f9_12 sf
0 -3 rm
(: [T])S
0 3 rm
469 190 :M
f13_12 sf
<C5>S
482 190 :M
f0_12 sf
(\(for )S
503 190 :M
f9_12 sf
(e1...en: T)S
f0_12 sf
<29>S
145 204 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(array_new)S
253 204 :M
f9_12 sf
(\(size: Int, init: T\): [T])S
469 204 :M
f13_12 sf
<C5>S
482 204 :M
f0_12 sf
(An array of size )S
562 204 :M
f13_15 sf
<D2>S
f9_12 sf
(size)S
594 204 :M
f13_15 sf
<D3>S
f0_12 sf
(, all filled with )S
f13_15 sf
<D2>S
f9_12 sf
(init)S
702 204 :M
f13_15 sf
<D3>S
f0_12 sf
(.)S
145 218 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(array_gen)S
253 218 :M
f9_12 sf
(\(size: Int, proc: \(Int\)->T\): [T])S
469 232 :M
f13_12 sf
<C5>S
482 232 :M
f0_12 sf
(An array of size )S
562 232 :M
f13_15 sf
<D2>S
f9_12 sf
(size)S
594 232 :M
f13_15 sf
<D3>S
f0_12 sf
(, filled with )S
f13_15 sf
<D2>S
f9_12 sf
(proc\(i\))S
709 232 :M
f13_15 sf
<D3>S
f0_12 sf
( for )S
732 232 :M
f13_15 sf
<D2>S
f9_12 sf
(i)S
f13_15 sf
<D3>S
482 246 :M
f0_12 sf
(between )S
525 246 :M
f13_15 sf
<D2>S
f9_12 sf
(0)S
f13_15 sf
<D3>S
f0_12 sf
( and )S
562 246 :M
f13_15 sf
<D2>S
f9_12 sf
(size-1)S
f13_15 sf
<D3>S
f0_12 sf
(.)S
145 260 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(array_#)S
239 260 :M
f9_12 sf
(\(a: [T]\): Int ! net_failure)S
469 260 :M
f13_12 sf
<C5>S
482 260 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(#\(a\))S
540 260 :M
f13_15 sf
<D3>S
f0_12 sf
<29>S
547 260 :M
f9_12 sf
( )S
f0_12 sf
(Size of an array.)S
145 274 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(array_get)S
253 274 :M
f9_12 sf
(\(a: [T], i: Int\): T ! net_failure)S
469 288 :M
f13_12 sf
<C5>S
482 288 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(a[i])S
540 288 :M
f13_15 sf
<D3>S
f0_12 sf
<29>S
547 288 :M
f9_12 sf
( )S
f0_12 sf
(The i-th element \(if it exists\), zero-based.)S
145 302 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(array_set)S
253 302 :M
f9_12 sf
(\(a: [T], i: Int, b: T\): Ok ! net_failure)S
469 316 :M
f13_12 sf
<C5>S
482 316 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(a[i]:=b)S
562 316 :M
f13_15 sf
<D3>S
f0_12 sf
<29>S
569 316 :M
f9_12 sf
( )S
f0_12 sf
(Update the i-th element \(if it exists\).)S
145 330 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(array_sub)S
253 330 :M
f9_12 sf
(\(a: [T], i: Int, n: Int\): [T] ! net_failure)S
469 344 :M
f13_12 sf
<C5>S
482 344 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(a[i for n])S
f13_15 sf
<D3>S
f0_12 sf
<29>S
590 344 :M
f9_12 sf
( )S
598 344 :M
f0_12 sf
(A new array, filled with the ele-)S
482 358 :M
(ments of )S
527 358 :M
f13_15 sf
<D2>S
f9_12 sf
(a)S
f13_15 sf
<D3>S
f0_12 sf
( beginning at )S
606 358 :M
f13_15 sf
<D2>S
f9_12 sf
(i)S
f13_15 sf
<D3>S
f0_12 sf
(, and of size )S
680 358 :M
f13_15 sf
<D2>S
f9_12 sf
(n)S
f13_15 sf
<D3>S
f0_12 sf
( \(if it exists\).)S
145 372 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(array_upd)S
253 372 :M
f9_12 sf
(\(a: [T], i: Int, n: Int, b: [T]\): Ok ! net_failure)S
469 386 :M
f13_12 sf
<C5>S
482 386 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(a[i for n]:=b)S
605 386 :M
f13_15 sf
<D3>S
f0_12 sf
<29>S
612 386 :M
f9_12 sf
( )S
f0_12 sf
(Same as )S
662 386 :M
f13_15 sf
<D2>S
f9_12 sf
(a[n+i]:=b[n];)S
482 400 :M
(... ; a[i]:=b[0])S
f13_15 sf
<D3>S
f0_12 sf
(. I.e. )S
625 400 :M
f13_15 sf
<D2>S
f9_12 sf
(a[i for n])S
f13_15 sf
<D3>S
f0_12 sf
( gets )S
f13_15 sf
<D2>S
f9_12 sf
(b[0)S
482 414 :M
(for n])S
f13_15 sf
<D3>S
f0_12 sf
(.)S
145 428 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(array_@)S
239 428 :M
f9_12 sf
(\(a1: [T], a2: [T]\): [T] ! net_failure)S
469 442 :M
f13_12 sf
<C5>S
482 442 :M
f0_12 sf
(\(also infix )S
534 442 :M
f13_15 sf
<D2>S
f9_12 sf
(@)S
f13_15 sf
<D3>S
f0_12 sf
<29>S
551 442 :M
f9_12 sf
( )S
f0_12 sf
(A new array, filled with the concatenation)S
482 456 :M
(of the elements of )S
f13_15 sf
<D2>S
f9_12 sf
(a1)S
589 456 :M
f13_15 sf
<D3>S
f0_12 sf
( and )S
f13_15 sf
<D2>S
f9_12 sf
(a2)S
f13_15 sf
<D3>S
f0_12 sf
(.)S
145 496 :M
f2_15 sf
(B.6.9)S
185 496 :M
(Net)S
145 530 :M
f12_12 sf
(net_failure)S
f9_12 sf
(: Exception)S
145 544 :M
(All\(T\))S
f12_12 sf
(net_who)S
239 544 :M
f9_12 sf
(\(o: T\): Text ! net_failure thread_alerted)S
469 558 :M
f13_12 sf
<C5>S
482 558 :M
f0_12 sf
(Return a text indicating where a network object or engine)S
482 572 :M
(is registered, or the empty text if the argument is an object)S
482 586 :M
(that has not been registered with a name server.)S
145 600 :M
f9_12 sf
(All\(T<:{}\))S
f12_12 sf
(net_export)S
f9_12 sf
(\(name: Text, server: Text, o: T\): T ! net_failure thread_alerted)S
469 614 :M
f13_12 sf
<C5>S
482 614 :M
f0_12 sf
(Export an object under name )S
624 614 :M
f13_15 sf
<D2>S
f9_12 sf
(name)S
f13_15 sf
<D3>S
f0_12 sf
(, to the name server at)S
482 628 :M
(IP address )S
535 628 :M
f13_15 sf
<D2>S
f9_12 sf
(server)S
f13_15 sf
<D3>S
f0_12 sf
(. The empty text denotes the local IP)S
482 642 :M
(address.)S
145 656 :M
f9_12 sf
(Some\(T<:{}\))S
f12_12 sf
(net_import)S
f9_12 sf
(\(name: Text, server: Text\): T ! net_failure thread_alerted)S
469 670 :M
f13_12 sf
<C5>S
482 670 :M
f0_12 sf
(Import the object of name )S
610 670 :M
f13_15 sf
<D2>S
f9_12 sf
(name)S
f13_15 sf
<D3>S
f0_12 sf
(, from the name server at)S
482 684 :M
(IP address )S
535 684 :M
f13_15 sf
<D2>S
f9_12 sf
(server)S
f13_15 sf
<D3>S
f0_12 sf
(. The empty text denotes the local IP)S
482 698 :M
(address.)S
145 712 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(net_exportEngine)S
f9_12 sf
(\(name: Text, server: Text, arg: T\): Ok)S
482 726 :M
(! net_failure thread_alerted)S
469 740 :M
f13_12 sf
<C5>S
482 740 :M
f0_12 sf
(Export an engine under name )S
f13_15 sf
<D2>S
f9_12 sf
(name)S
658 740 :M
f13_15 sf
<D3>S
f0_12 sf
(, to the name server at)S
482 754 :M
(IP address )S
535 754 :M
f13_15 sf
<D2>S
f9_12 sf
(server)S
f13_15 sf
<D3>S
f0_12 sf
(. The empty text denotes the local IP)S
482 768 :M
(address. The )S
546 768 :M
f13_15 sf
<D2>S
f9_12 sf
(arg)S
f13_15 sf
<D3>S
f0_12 sf
( is given as an argument to all proce)S
747 768 :M
(-)S
482 782 :M
(dures received by the engine to execute.)S
145 796 :M
f9_12 sf
(Some\(T\)All\(U\))S
239 796 :M
f12_12 sf
(net_importEngine)S
f9_12 sf
(\(name: Text, server: Text\): \(\(T\)->U\)->U)S
482 810 :M
(! net_failure thread_alerted)S
469 824 :M
f13_12 sf
<C5>S
482 824 :M
f0_12 sf
(Import the object of name )S
610 824 :M
f13_15 sf
<D2>S
f9_12 sf
(name)S
f13_15 sf
<D3>S
f0_12 sf
(, from the name server at)S
482 838 :M
(IP address )S
535 838 :M
f13_15 sf
<D2>S
f9_12 sf
(server)S
f13_15 sf
<D3>S
f0_12 sf
(. The empty text denotes the local IP)S
482 852 :M
(address.)S
145 892 :M
f2_15 sf
(B.6.10)S
199 892 :M
(Thread)S
145 926 :M
f12_12 sf
(thread_mutex)S
f9_12 sf
(\(\): Mutex)S
469 926 :M
f13_12 sf
<C5>S
482 926 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(mutex\(\))S
562 926 :M
f13_15 sf
<D3>S
f0_12 sf
(\) A new mutex.)S
145 940 :M
f12_12 sf
(thread_condition)S
f9_12 sf
(\(\): Condition)S
469 940 :M
f13_12 sf
<C5>S
482 940 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(condition\(\))S
591 940 :M
f13_15 sf
<D3>S
f0_12 sf
(\) A new condition.)S
145 954 :M
f9_12 sf
(Some\(T\))S
f12_12 sf
(thread_self)S
275 954 :M
f9_12 sf
(\(\): Thread\(T\))S
469 954 :M
f13_12 sf
<C5>S
482 954 :M
f0_12 sf
(The current thread.)S
145 968 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(thread_fork)S
f9_12 sf
(\(f: \(\)->T, stackSize: Int\): Thread\(T\))S
469 982 :M
f13_12 sf
<C5>S
482 982 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(fork\(f,n\))S
576 982 :M
f13_15 sf
<D3>S
f0_12 sf
<29>S
583 982 :M
f9_12 sf
( )S
f0_12 sf
(Fork a new thread executing f. If)S
482 996 :M
(stackSize is zero, a small default size is used.)S
145 1010 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(thread_join)S
f9_12 sf
(\(th: Thread\(T\)\): T)S
469 1010 :M
f13_12 sf
<C5>S
482 1010 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(join\(th\))S
569 1010 :M
f13_15 sf
<D3>S
f0_12 sf
(\) Wait for a thread to complete, and re)S
756 1010 :M
(-)S
482 1024 :M
(turn the result of its procedure.)S
endp
%%Page: 54 54
%%BeginPageSetup
initializepage
(luca; page: 54 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(54)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 157 :M
f12_12 sf
(thread_wait)S
f9_12 sf
(\(mx: Mutex, cd: Condition\): Ok)S
469 157 :M
f13_12 sf
<C5>S
482 157 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(wait\(mx,cd\))S
591 157 :M
f13_15 sf
<D3>S
f0_12 sf
(\) Wait on a mutex and a condition.)S
145 171 :M
f12_12 sf
(thread_acquire)S
246 171 :M
f9_12 sf
(\(mx: Mutex\): Ok)S
469 171 :M
f13_12 sf
<C5>S
482 171 :M
f0_12 sf
(Acquire a mutex \(use lock ... end instead\).)S
145 185 :M
f12_12 sf
(thread_release)S
246 185 :M
f9_12 sf
(\(mx: Mutex\): Ok)S
469 185 :M
f13_12 sf
<C5>S
482 185 :M
f0_12 sf
(Release a mutex \(use lock ... end instead\))S
145 199 :M
f12_12 sf
(thread_broadcast)S
f9_12 sf
(\(cd: Condition\): Ok)S
469 199 :M
f13_12 sf
<C5>S
482 199 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(broadcast\(cd\))S
605 199 :M
f13_15 sf
<D3>S
f0_12 sf
(\) Wake-up to all threads waiting)S
482 213 :M
(on a condition.)S
145 227 :M
f12_12 sf
(thread_signal)S
239 227 :M
f9_12 sf
(\(cd: Condition\): Ok)S
469 227 :M
f13_12 sf
<C5>S
482 227 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(signal\(cd\))S
f13_15 sf
<D3>S
f0_12 sf
(\) Wake-up at least one thread waiting)S
482 241 :M
(on a condition.)S
145 255 :M
f12_12 sf
(thread_pause)S
f9_12 sf
(\(r: Real\): Ok)S
469 255 :M
f13_12 sf
<C5>S
482 255 :M
f0_12 sf
(\(also )S
f13_15 sf
<D2>S
f9_12 sf
(pause\(r\))S
569 255 :M
f13_15 sf
<D3>S
f0_12 sf
(\) Pause the current thread for r seconds.)S
145 269 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(thread_lock)S
f9_12 sf
(\(m: Mutex, body: \(\)->T\): T)S
469 269 :M
f13_12 sf
<C5>S
482 269 :M
f0_12 sf
(Execute under a locked mutex \(use lock ... end instead\).)S
145 283 :M
f12_12 sf
(thread_alerted)S
246 283 :M
f9_12 sf
(: Exception)S
469 283 :M
f13_12 sf
<C5>S
482 283 :M
f0_12 sf
(\(See the threads spec.\))S
145 297 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(thread_alert)S
275 297 :M
f9_12 sf
(\(t: Thread\(T\)\): Ok)S
469 297 :M
f13_12 sf
<C5>S
482 297 :M
f0_12 sf
(\(See the threads spec.\))S
145 311 :M
f12_12 sf
(thread_testAlert)S
f9_12 sf
(\(\): Bool)S
469 311 :M
f13_12 sf
<C5>S
482 311 :M
f0_12 sf
(\(See the threads spec.\))S
145 325 :M
f12_12 sf
(thread_alertWait)S
f9_12 sf
(\(mx: Mutex, cd: Condition\): Ok ! thread_alerted)S
469 339 :M
f13_12 sf
<C5>S
482 339 :M
f0_12 sf
(\(See the threads spec.\))S
145 353 :M
f9_12 sf
(All\(T\))S
f12_12 sf
(thread_alertJoin)S
f9_12 sf
(\(th: Thread\(T\)\): Ok ! thread_alerted)S
469 367 :M
f13_12 sf
<C5>S
482 367 :M
f0_12 sf
(\(See the threads spec.\))S
145 381 :M
f12_12 sf
(thread_alertPause)S
f9_12 sf
(\(r: Real\): Ok ! thread_alerted)S
469 395 :M
f13_12 sf
<C5>S
482 395 :M
f0_12 sf
(\(See the threads spec.\))S
145 435 :M
f2_15 sf
(B.6.11)S
199 435 :M
(Rd)S
145 469 :M
f12_12 sf
(rd_failure)S
f9_12 sf
(: Exception)S
145 483 :M
f12_12 sf
(rd_eofFailure)S
239 483 :M
f9_12 sf
(: Exception)S
145 497 :M
f12_12 sf
(rd_new)S
f9_12 sf
(\(t: Text\): Rd)S
469 497 :M
f13_12 sf
<C5>S
482 497 :M
f0_12 sf
(A reader on a text \(a Modula-3 TextRd\).)S
145 511 :M
f12_12 sf
(rd_stdin)S
203 511 :M
f9_12 sf
(: Rd)S
469 511 :M
f13_12 sf
<C5>S
482 511 :M
f0_12 sf
(The standard input \(the Modula-3 Stdio.Stdin\).)S
145 525 :M
f12_12 sf
(rd_open)S
f9_12 sf
(\(fs: FileSystem, t: Text\): Rd ! rd_failure)S
469 539 :M
f13_12 sf
<C5>S
482 539 :M
f0_12 sf
(Given a file system and a file name, returns a reader on a)S
482 553 :M
(file \(a Modula-3 FileRd, open for read\). The local file sys)S
759 553 :M
(-)S
482 567 :M
(tem is available through the predefined lexically scoped)S
482 581 :M
(identifier )S
529 581 :M
f13_15 sf
<D2>S
f9_12 sf
(fileSys)S
f13_15 sf
<D3>S
f0_12 sf
(. Moreover, )S
645 581 :M
f13_15 sf
<D2>S
f9_12 sf
(fileSysReader)S
f13_15 sf
<D3>S
f0_12 sf
( is a)S
482 595 :M
(read-only version of the local file system.)S
145 609 :M
f12_12 sf
(rd_getChar)S
f9_12 sf
(\(r: Rd\): Char ! rd_failure rd_eofFailure thread_alerted)S
469 623 :M
f13_12 sf
<C5>S
482 623 :M
f0_12 sf
(Get the next character from a reader.)S
145 637 :M
f12_12 sf
(rd_eof)S
f9_12 sf
(\(r: Rd\): Bool ! rd_failure thread_alerted)S
469 651 :M
f13_12 sf
<C5>S
482 651 :M
f0_12 sf
(Test for the end-of-stream on a reader.)S
145 665 :M
f12_12 sf
(rd_unGetChar)S
f9_12 sf
(\(r: Rd\): Ok)S
469 665 :M
f13_12 sf
<C5>S
482 665 :M
f0_12 sf
(Put the last character obtained by getChar back into the)S
482 679 :M
(reader \(unfortunately, it may crash if misused!\).)S
145 693 :M
f12_12 sf
(rd_charsReady)S
239 693 :M
f9_12 sf
(\(r: Rd\): Int ! rd_failure)S
469 693 :M
f13_12 sf
<C5>S
482 693 :M
f0_12 sf
(The number of characters that can be read without block)S
753 693 :M
(-)S
482 707 :M
(ing.)S
145 721 :M
f12_12 sf
(rd_getText)S
f9_12 sf
(\(r: Rd, n: Int\): Text ! rd_failure thread_alerted)S
469 735 :M
f13_12 sf
<C5>S
482 735 :M
f0_12 sf
(Read the next n characters, or at most n on end-of-file.)S
145 749 :M
f12_12 sf
(rd_getLine)S
f9_12 sf
(\(r: Rd\): Text ! rd_failure rd_eofFailure thread_alerted)S
469 763 :M
f13_12 sf
<C5>S
482 763 :M
f0_12 sf
(Read the next line and return it without including the end)S
757 763 :M
(-)S
482 777 :M
(of-line character.)S
145 791 :M
f12_12 sf
(rd_index)S
203 791 :M
f9_12 sf
(\(r: Rd\): Int)S
469 791 :M
f13_12 sf
<C5>S
482 791 :M
f0_12 sf
(The current reader position.)S
145 805 :M
f12_12 sf
(rd_length)S
210 805 :M
f9_12 sf
(\(r: Rd\): Int ! rd_failure thread_alerted)S
469 819 :M
f13_12 sf
<C5>S
482 819 :M
f0_12 sf
(Length of a reader \(including read part\).)S
145 833 :M
f12_12 sf
(rd_seek)S
f9_12 sf
(\(r: Rd, n: Int\): Ok ! rd_failure thread_alerted)S
469 847 :M
f13_12 sf
<C5>S
482 847 :M
f0_12 sf
(Reposition a reader.)S
145 861 :M
f12_12 sf
(rd_close)S
203 861 :M
f9_12 sf
(\(r: Rd\): Ok ! rd_failure thread_alerted)S
469 875 :M
f13_12 sf
<C5>S
482 875 :M
f0_12 sf
(Close a reader.)S
145 889 :M
f12_12 sf
(rd_intermittent)S
f9_12 sf
(\(r: Rd\): Bool)S
469 889 :M
f13_12 sf
<C5>S
482 889 :M
f0_12 sf
(Whether the reader is stream-like \(not file-like\).)S
145 903 :M
f12_12 sf
(rd_seekable)S
f9_12 sf
(\(r: Rd\): Bool)S
469 903 :M
f13_12 sf
<C5>S
482 903 :M
f0_12 sf
(Whether the reader can be repositioned.)S
145 917 :M
f12_12 sf
(rd_closed)S
210 917 :M
f9_12 sf
(\(r: Rd\): Bool)S
469 917 :M
f13_12 sf
<C5>S
482 917 :M
f0_12 sf
(Whether the reader is closed.)S
145 957 :M
f2_15 sf
(B.6.12)S
199 957 :M
(Wr)S
145 991 :M
f12_12 sf
(wr_failure)S
f9_12 sf
(: Exception)S
145 1005 :M
f12_12 sf
(wr_new)S
f9_12 sf
(\(\): Wr)S
469 1005 :M
f13_12 sf
<C5>S
482 1005 :M
f0_12 sf
(A writer to a text \(a Modula-3 TextWr\).)S
145 1019 :M
f12_12 sf
(wr_toText)S
210 1019 :M
f9_12 sf
(\(w: Wr\): Text)S
469 1019 :M
f13_12 sf
<C5>S
482 1019 :M
f0_12 sf
(Emptying a writer to a text..)S
145 1033 :M
f12_12 sf
(wr_stdout)S
210 1033 :M
f9_12 sf
(: Wr)S
469 1033 :M
f13_12 sf
<C5>S
482 1033 :M
f0_12 sf
(The standard output \(the Modula-3 Stdio.Stdout\).)S
endp
%%Page: 55 55
%%BeginPageSetup
initializepage
(luca; page: 55 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(55)S
145 157 :M
f12_12 sf
(wr_stderr)S
210 157 :M
f9_12 sf
(: Wr)S
469 157 :M
f13_12 sf
<C5>S
482 157 :M
f0_12 sf
(The standard error \(the Modula-3 Stdio.Stderr\).)S
145 171 :M
f12_12 sf
(wr_open)S
f9_12 sf
(\(fs: FileSystem, t: Text\): Wr ! wr_failure)S
469 185 :M
f13_12 sf
<C5>S
482 185 :M
f0_12 sf
(Given a file system and a file name, returns a writer to the)S
482 199 :M
(beginning of a file \(a Modula-3 FileWr, open for write\).)S
482 213 :M
(The local file system is available through the predefined)S
482 227 :M
(lexically scoped identifier )S
610 227 :M
f13_15 sf
<D2>S
f9_12 sf
(fileSys)S
f13_15 sf
<D3>S
f0_12 sf
(.)S
145 241 :M
f12_12 sf
(wr_openAppend)S
239 241 :M
f9_12 sf
(\(fs: FileSystem, t: Text\): Wr ! wr_failure)S
469 255 :M
f13_12 sf
<C5>S
482 255 :M
f0_12 sf
(Given a file system and a file name, returns a writer to the)S
482 269 :M
(end of file \(a Modula-3 FileWr, open for append\). The lo)S
756 269 :M
(-)S
482 283 :M
(cal file system is available through the predefined lexically)S
482 297 :M
(scoped identifier )S
f13_15 sf
<D2>S
f9_12 sf
(fileSys)S
619 297 :M
f13_15 sf
<D3>S
f0_12 sf
(.)S
145 311 :M
f12_12 sf
(wr_putChar)S
f9_12 sf
(\(w: Wr, c: Char\): Ok ! wr_failure thread_alerted)S
469 325 :M
f13_12 sf
<C5>S
482 325 :M
f0_12 sf
(Put a character to a writer .)S
145 339 :M
f12_12 sf
(wr_putText)S
f9_12 sf
(\(w: Wr, t: Text\): Ok ! wr_failure thread_alerted)S
469 353 :M
f13_12 sf
<C5>S
482 353 :M
f0_12 sf
(Put a text to a writer .)S
145 367 :M
f12_12 sf
(wr_flush)S
203 367 :M
f9_12 sf
(\(w: Wr\): Ok ! wr_failure thread_alerted)S
469 381 :M
f13_12 sf
<C5>S
482 381 :M
f0_12 sf
(Flush a writer: all buffered writes to their final destination.)S
145 395 :M
f12_12 sf
(wr_index)S
203 395 :M
f9_12 sf
(\(w: Wr\): Int)S
469 395 :M
f13_12 sf
<C5>S
482 395 :M
f0_12 sf
(The current writer position)S
145 409 :M
f12_12 sf
(wr_length)S
210 409 :M
f9_12 sf
(\(w: Wr\): Int ! wr_failure thread_alerted)S
469 423 :M
f13_12 sf
<C5>S
482 423 :M
f0_12 sf
(Length of a writer.)S
145 437 :M
f12_12 sf
(wr_seek)S
f9_12 sf
(\(w: Wr, n: Int\): Ok ! wr_failure thread_alerted)S
469 451 :M
f13_12 sf
<C5>S
482 451 :M
f0_12 sf
(Reposition a writer.)S
145 465 :M
f12_12 sf
(wr_close)S
203 465 :M
f9_12 sf
(\(w: Wr\): Ok ! wr_failure thread_alerted)S
469 479 :M
f13_12 sf
<C5>S
482 479 :M
f0_12 sf
(Close a writer.)S
145 493 :M
f12_12 sf
(wr_buffered)S
f9_12 sf
(\(w: Wr\): Bool)S
469 493 :M
f13_12 sf
<C5>S
482 493 :M
f0_12 sf
(Whether the writer is buffered.)S
145 507 :M
f12_12 sf
(wr_seekable)S
f9_12 sf
(\(w: Wr\): Bool)S
469 507 :M
f13_12 sf
<C5>S
482 507 :M
f0_12 sf
(Whether the writer can be repositioned.)S
145 521 :M
f12_12 sf
(wr_closed)S
210 521 :M
f9_12 sf
(\(w: Wr\): Bool)S
469 521 :M
f13_12 sf
<C5>S
482 521 :M
f0_12 sf
(Whether the writer is closed.)S
145 561 :M
f2_15 sf
(B.6.13)S
199 561 :M
(Pickle)S
145 595 :M
f12_12 sf
(pickle_failure)S
246 595 :M
f9_12 sf
(: Exception)S
145 609 :M
(All\(T\))S
f12_12 sf
(pickle_write)S
275 609 :M
f9_12 sf
(\(w: Wr, v: T\): Ok ! pickle_failure wr_failure thread_alerted)S
469 623 :M
f13_12 sf
<C5>S
482 623 :M
f0_12 sf
(Copy a value to a writer, similarly to sys_copy.)S
145 637 :M
f9_12 sf
(Some\(T\))S
f12_12 sf
(pickle_read)S
275 637 :M
f9_12 sf
(\(r: Rd\): T ! pickle_failure rd_failure rd_eofFailure thread_alerted)S
469 651 :M
f13_12 sf
<C5>S
482 651 :M
f0_12 sf
(Copy a value from a reader, similarly to sys_copy.)S
145 691 :M
f2_15 sf
(B.6.14)S
199 691 :M
(Lex)S
145 725 :M
f12_12 sf
(lex_failure)S
f9_12 sf
(: Exception)S
145 739 :M
f12_12 sf
(lex_scan)S
203 739 :M
f9_12 sf
(\(r: Rd, t: Text\): Text ! rd_failure thread_alerted)S
469 753 :M
f13_12 sf
<C5>S
482 753 :M
f0_12 sf
(Read from r the longest prefix formed of characters listed)S
482 767 :M
(in t, and return it.)S
145 781 :M
f12_12 sf
(lex_skip)S
203 781 :M
f9_12 sf
(\(r: Rd, t: Text\): Ok ! rd_failure thread_alerted)S
469 795 :M
f13_12 sf
<C5>S
482 795 :M
f0_12 sf
(Read from r the longest prefix formed of characters listed)S
482 809 :M
(in t, and discard it.)S
145 823 :M
f12_12 sf
(lex_match)S
210 823 :M
f9_12 sf
(\(r: Rd, t: Text\): Ok ! lex_failure rd_failure thread_alerted)S
469 837 :M
f13_12 sf
<C5>S
482 837 :M
f0_12 sf
(Read from r the string t and discard it; raise failure if not)S
482 851 :M
(found.)S
145 865 :M
f12_12 sf
(lex_bool)S
203 865 :M
f9_12 sf
(\(r: Rd\): Bool ! lex_failure rd_failure thread_alerted)S
469 879 :M
f13_12 sf
<C5>S
482 879 :M
f0_12 sf
(Skip blanks, and attempt to read a boolean from r.)S
145 893 :M
f12_12 sf
(lex_int)S
f9_12 sf
(\(r: Rd\): Int ! lex_failure rd_failure thread_alerted)S
469 907 :M
f13_12 sf
<C5>S
482 907 :M
f0_12 sf
(Skip blanks, and attempt to read an integer from r.)S
145 921 :M
f12_12 sf
(lex_real)S
203 921 :M
f9_12 sf
(\(r: Rd\): Real ! lex_failure rd_failure thread_alerted)S
469 935 :M
f13_12 sf
<C5>S
482 935 :M
f0_12 sf
(Skip blanks, and attempt to read a real from r.)S
145 975 :M
f2_15 sf
(B.6.15)S
199 975 :M
(Fmt)S
145 1009 :M
f12_12 sf
(fmt_padLft)S
f9_12 sf
(\(t: Text, length: Int\): Text)S
469 1009 :M
f13_12 sf
<C5>S
482 1009 :M
f0_12 sf
(If t is shorted then length, pad t with blanks on the left so)S
482 1023 :M
(that it has the given length.)S
endp
%%Page: 56 56
%%BeginPageSetup
initializepage
(luca; page: 56 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(56)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 157 :M
f12_12 sf
(fmt_padRht)S
f9_12 sf
(\(t: Text, length: Int\): Text)S
469 157 :M
f13_12 sf
<C5>S
482 157 :M
f0_12 sf
(If t is shorted then length, pad t with blanks on the right so)S
482 171 :M
(that it has the given length.)S
145 185 :M
f12_12 sf
(fmt_bool)S
203 185 :M
f9_12 sf
(\(b: Bool\): Text)S
469 185 :M
f13_12 sf
<C5>S
482 185 :M
f0_12 sf
(Convert a boolean to its printable form.)S
145 199 :M
f12_12 sf
(fmt_int)S
f9_12 sf
(\(n: Int\): Text)S
469 199 :M
f13_12 sf
<C5>S
482 199 :M
f0_12 sf
(Convert an integer to its printable form.)S
145 213 :M
f12_12 sf
(fmt_real)S
203 213 :M
f9_12 sf
(\(r: Real\): Text)S
469 213 :M
f13_12 sf
<C5>S
482 213 :M
f0_12 sf
(Convert a real to its printable form.)S
145 253 :M
f2_15 sf
(B.6.16)S
199 253 :M
(Process)S
145 287 :M
f12_12 sf
(process_new)S
f9_12 sf
(\(pr: Processor, nameAndArgs: [Text], mergeOut: Bool\): Process)S
469 301 :M
f13_12 sf
<C5>S
482 301 :M
f0_12 sf
(Create a process from a processor and the given process)S
482 315 :M
(name and arguments. The local processor is available as)S
482 329 :M
(the lexically scoped identifier )S
f13_15 sf
<D2>S
f9_12 sf
(processor)S
695 329 :M
f13_15 sf
<D3>S
f0_12 sf
(. If mergeOut)S
482 343 :M
(is true, use a single pipe for stdout and stderr.)S
145 357 :M
f12_12 sf
(process_in)S
f9_12 sf
(\(p: Process\): Wr)S
469 357 :M
f13_12 sf
<C5>S
482 357 :M
f0_12 sf
(The stdin pipe of a process.)S
145 371 :M
f12_12 sf
(process_out)S
f9_12 sf
(\(p: Process\): Rd)S
469 371 :M
f13_12 sf
<C5>S
482 371 :M
f0_12 sf
(The stdout pipe of a process.)S
145 385 :M
f12_12 sf
(process_err)S
f9_12 sf
(\(p: Process\): Rd)S
469 385 :M
f13_12 sf
<C5>S
482 385 :M
f0_12 sf
(The stderr pipe of a process.)S
145 399 :M
f12_12 sf
(process_complete)S
f9_12 sf
(\(p: Process\): Int)S
469 399 :M
f13_12 sf
<C5>S
482 399 :M
f0_12 sf
(Wait for the process to exit, close all its pipes, and return)S
482 413 :M
(the exit code.)S
145 427 :M
f12_12 sf
(process_filter)S
246 427 :M
f9_12 sf
(\(pr: Processor, nameAndArgs: [Text], input: Text\): Text ! net_failure)S
469 441 :M
f13_12 sf
<C5>S
482 441 :M
f0_12 sf
(Create a process from a processor and the given process)S
482 455 :M
(name and arguments. The local processor is available as)S
482 469 :M
(the lexically scoped identifier )S
f13_15 sf
<D2>S
f9_12 sf
(processor)S
695 469 :M
f13_15 sf
<D3>S
f0_12 sf
(. The stderr)S
482 483 :M
(output is merged stdout. Usage: feed the input to its stdin)S
482 497 :M
(pipe and close it; read all the output from its stdout pipe)S
482 511 :M
(and close it; return the output.)S
145 551 :M
f2_15 sf
(B.6.17)S
199 551 :M
(Color)S
145 585 :M
f12_12 sf
(color_named)S
f9_12 sf
(\(name: Text\): Color)S
469 585 :M
f13_12 sf
<C5>S
482 585 :M
f0_12 sf
(Get a color from its name \(see the ColorName Modula-3)S
482 599 :M
(interface\).)S
145 613 :M
f12_12 sf
(color_rgb)S
210 613 :M
f9_12 sf
(\(r: Real, g: Real b: Real\): Color)S
469 613 :M
f13_12 sf
<C5>S
482 613 :M
f0_12 sf
(Get a color from rgb \(each 0.0 .. 1.0\).)S
145 627 :M
f12_12 sf
(color_hsv)S
210 627 :M
f9_12 sf
(\(h: Real, s: Real v: Real\): Color)S
469 627 :M
f13_12 sf
<C5>S
482 627 :M
f0_12 sf
(Get a color from hsv \(each 0.0 .. 1.0\).)S
145 641 :M
f12_12 sf
(color_r)S
f9_12 sf
(\(c: Color\): Real)S
469 641 :M
f13_12 sf
<C5>S
482 641 :M
f0_12 sf
(The red color component.)S
145 655 :M
f12_12 sf
(color_g)S
f9_12 sf
(\(c: Color\): Real)S
469 655 :M
f13_12 sf
<C5>S
482 655 :M
f0_12 sf
(The green color component.)S
145 669 :M
f12_12 sf
(color_b)S
f9_12 sf
(\(c: Color\): Real)S
469 669 :M
f13_12 sf
<C5>S
482 669 :M
f0_12 sf
(The blue color component.)S
145 683 :M
f12_12 sf
(color_h)S
f9_12 sf
(\(c: Color\): Real)S
469 683 :M
f13_12 sf
<C5>S
482 683 :M
f0_12 sf
(The hue color component.)S
145 697 :M
f12_12 sf
(color_s)S
f9_12 sf
(\(c: Color\): Real)S
469 697 :M
f13_12 sf
<C5>S
482 697 :M
f0_12 sf
(The saturation color component.)S
145 711 :M
f12_12 sf
(color_v)S
f9_12 sf
(\(c: Color\): Real)S
469 711 :M
f13_12 sf
<C5>S
482 711 :M
f0_12 sf
(The value color component.)S
145 725 :M
f12_12 sf
(color_brightness)S
f9_12 sf
(\(c: Color\): Real)S
469 725 :M
f13_12 sf
<C5>S
482 725 :M
f0_12 sf
(The total brightness \(0.0 .. 1.0\).)S
145 765 :M
f2_15 sf
(B.6.18)S
199 765 :M
(Form)S
145 799 :M
f12_12 sf
(form_failure)S
f9_12 sf
(: Exception)S
145 813 :M
f12_12 sf
(form_new)S
203 813 :M
f9_12 sf
(\(t: Text\): Form ! form_failure)S
469 813 :M
f13_12 sf
<C5>S
482 813 :M
f0_12 sf
(Read a form description from a text.)S
145 827 :M
f12_12 sf
(form_fromFile)S
239 827 :M
f9_12 sf
(\(file: Text\): Form ! form_failure thread_alerted)S
469 841 :M
f13_12 sf
<C5>S
482 841 :M
f0_12 sf
(Read a form description from a file.)S
145 855 :M
f12_12 sf
(form_attach)S
f9_12 sf
(\(fv: Form, name: Text, f: \(Form\)->Ok\): Ok ! form_failure)S
469 869 :M
f13_12 sf
<C5>S
482 869 :M
f0_12 sf
(Attach a procedure to an event, under a form. The proce-)S
482 883 :M
(dure is passed back the form when the event happens.)S
145 897 :M
f12_12 sf
(form_getBool)S
f9_12 sf
(\(fv: Form, name: Text, property: Text\): Bool ! form_failure)S
469 911 :M
f13_12 sf
<C5>S
482 911 :M
f0_12 sf
(Get the boolean value of the named property of the named)S
482 925 :M
(interactor. \(Do not confuse with form_getBoolean.\))S
145 939 :M
f12_12 sf
(form_putBool)S
f9_12 sf
(\(fv: Form, name: Text, property: Text, b: Bool\): Ok ! form_failure)S
469 953 :M
f13_12 sf
<C5>S
482 953 :M
f0_12 sf
(Set the boolean value of the named property of the named)S
482 967 :M
(interactor. \(Do not confuse with form_putBoolean.\))S
145 981 :M
f12_12 sf
(form_getInt)S
f9_12 sf
(\(fv: Form, name: Text, property: Text\): Int ! form_failure)S
469 995 :M
f13_12 sf
<C5>S
482 995 :M
f0_12 sf
(Get the integer value of the named property of the named)S
482 1009 :M
(interactor. If property is the empty text, get the )S
710 1009 :M
f13_15 sf
<D2>S
f0_12 sf
("value")S
f13_15 sf
<D3>S
482 1023 :M
f0_12 sf
(property.)S
endp
%%Page: 57 57
%%BeginPageSetup
initializepage
(luca; page: 57 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(57)S
145 157 :M
f12_12 sf
(form_putInt)S
f9_12 sf
(\(fv: Form, name: Text, property: Text, n: Int\): Ok ! form_failure)S
469 171 :M
f13_12 sf
<C5>S
482 171 :M
f0_12 sf
(Set the integer value of the named property of the named)S
482 185 :M
(interactor. If property is the empty text, set the )S
f13_15 sf
<D2>S
f0_12 sf
("value")S
747 185 :M
f13_15 sf
<D3>S
482 199 :M
f0_12 sf
(property.)S
145 213 :M
f12_12 sf
(form_getText)S
f9_12 sf
(\(fv: Form, name: Text, property: Text\): Text ! form_failure)S
469 227 :M
f13_12 sf
<C5>S
482 227 :M
f0_12 sf
(Get the text value of the named property of the named in-)S
482 241 :M
(teractor. If property is the empty text, get the )S
f13_15 sf
<D2>S
f0_12 sf
("value")S
739 241 :M
f13_15 sf
<D3>S
482 255 :M
f0_12 sf
(property.)S
145 269 :M
f12_12 sf
(form_putText)S
f9_12 sf
(\(fv: Form, name: Text, property: Text, t: Text, append: Bool\): Ok !)S
482 283 :M
(form_failure)S
469 297 :M
f13_12 sf
<C5>S
482 297 :M
f0_12 sf
(Set the text value of the named property of the named in-)S
482 311 :M
(teractor. If property is the empty text, set the )S
699 311 :M
f13_15 sf
<D2>S
f0_12 sf
("value")S
738 311 :M
f13_15 sf
<D3>S
482 325 :M
f0_12 sf
(property.)S
145 339 :M
f12_12 sf
(form_getBoolean)S
f9_12 sf
(\(fv: Form, name: Text\): Bool ! form_failure)S
469 353 :M
f13_12 sf
<C5>S
482 353 :M
f0_12 sf
(Get the boolean value of the named boolean-choice inter)S
754 353 :M
(-)S
482 367 :M
(actor.)S
145 381 :M
f12_12 sf
(form_putBoolean)S
f9_12 sf
(\(fv: Form, name: Text, b: Bool\): Ok ! form_failure)S
469 395 :M
f13_12 sf
<C5>S
482 395 :M
f0_12 sf
(Set the boolean value of the named boolean-choice interac)S
763 395 :M
(-)S
482 409 :M
(tor.)S
145 423 :M
f12_12 sf
(form_getChoice)S
246 423 :M
f9_12 sf
(\(fv: Form, radioName: Text\): Text ! form_failure)S
469 437 :M
f13_12 sf
<C5>S
482 437 :M
f0_12 sf
(Get the choice value of the named radio interactor.)S
145 451 :M
f12_12 sf
(form_putChoice)S
246 451 :M
f9_12 sf
(\(fv: Form, radioName: Text, choiceName: Text\): Ok ! form_failure)S
469 465 :M
f13_12 sf
<C5>S
482 465 :M
f0_12 sf
(Set the choice value of the named radio interactor.)S
145 479 :M
f12_12 sf
(form_getReactivity)S
275 479 :M
f9_12 sf
(\(fv: Form, name: Text\): Text ! form_failure)S
469 493 :M
f13_12 sf
<C5>S
482 493 :M
f0_12 sf
(Get the reactivity of the named interactor. It can be)S
482 507 :M
f13_15 sf
<D2>S
f0_12 sf
("active")S
f13_15 sf
<D3>S
f0_12 sf
(, )S
f13_15 sf
<D2>S
f0_12 sf
("passive")S
581 507 :M
f13_15 sf
<D3>S
f0_12 sf
(, )S
f13_15 sf
<D2>S
f0_12 sf
("dormant")S
f13_15 sf
<D3>S
f0_12 sf
(, or )S
664 507 :M
f13_15 sf
<D2>S
f0_12 sf
("vanished")S
720 507 :M
f13_15 sf
<D3>S
f0_12 sf
(.)S
145 521 :M
f12_12 sf
(form_putReactivity)S
275 521 :M
f9_12 sf
(\(fv: Form, name: Text, r: Text\): Ok ! form_failure)S
469 535 :M
f13_12 sf
<C5>S
482 535 :M
f0_12 sf
(Set the reactivity of the named interactor. It can be)S
482 549 :M
f13_15 sf
<D2>S
f0_12 sf
("active")S
f13_15 sf
<D3>S
f0_12 sf
(, )S
f13_15 sf
<D2>S
f0_12 sf
("passive")S
581 549 :M
f13_15 sf
<D3>S
f0_12 sf
(, )S
f13_15 sf
<D2>S
f0_12 sf
("dormant")S
f13_15 sf
<D3>S
f0_12 sf
(, or )S
664 549 :M
f13_15 sf
<D2>S
f0_12 sf
("vanished")S
720 549 :M
f13_15 sf
<D3>S
f0_12 sf
(.)S
145 563 :M
f12_12 sf
(form_popUp)S
f9_12 sf
(\(fv: Form, name: Text\): Ok ! form_failure)S
469 577 :M
f13_12 sf
<C5>S
482 577 :M
f0_12 sf
(Pop up the named interactor.)S
145 591 :M
f12_12 sf
(form_popDown)S
f9_12 sf
(\(fv: Form, name: Text\): Ok ! form_failure)S
469 605 :M
f13_12 sf
<C5>S
482 605 :M
f0_12 sf
(Pop down the named interactor.)S
145 619 :M
f12_12 sf
(form_insert)S
f9_12 sf
(\(fv: Form, parent: Text, t: Text, n: Int\): Ok ! form_failure)S
469 633 :M
f13_12 sf
<C5>S
482 633 :M
f0_12 sf
(Insert the form described by t as child n of parent.)S
145 647 :M
f12_12 sf
(form_move)S
210 647 :M
f9_12 sf
(\(fv: Form, parent: Text, child: Text, toChild: Text, before: Bool\): Ok !)S
482 661 :M
(form_failure)S
469 675 :M
f13_12 sf
<C5>S
482 675 :M
f0_12 sf
(Move child before or after toChild of parent; after )S
725 675 :M
f13_15 sf
<D2>S
f0_12 sf
("")S
738 675 :M
f13_15 sf
<D3>S
482 689 :M
f0_12 sf
(means first, before)S
572 689 :M
f13_15 sf
<D2>S
f0_12 sf
("")S
f13_15 sf
<D3>S
f0_12 sf
( means last.)S
145 703 :M
f12_12 sf
(form_delete)S
f9_12 sf
(\(fv: Form, parent: Text, child: Text\): Ok ! form_failure)S
469 717 :M
f13_12 sf
<C5>S
482 717 :M
f0_12 sf
(Delete the named child of parent.)S
145 731 :M
f12_12 sf
(form_deleteRange)S
f9_12 sf
(\(fv: Form, parent: Text, n: Int, count: Int\): Ok ! form_failure)S
469 745 :M
f13_12 sf
<C5>S
482 745 :M
f0_12 sf
(Delete count children of parent, from child n.)S
145 759 :M
f12_12 sf
(form_takeFocus)S
246 759 :M
f9_12 sf
(\(fv: Form, name: Text, select: Bool\): Ok ! form_failure)S
469 773 :M
f13_12 sf
<C5>S
482 773 :M
f0_12 sf
(Make the named interactor acquire the keyboard focus, and)S
482 787 :M
(optionally select its entire text contents.)S
145 801 :M
f12_12 sf
(form_show)S
210 801 :M
f9_12 sf
(\(fv: Form\): Ok ! form_failure)S
469 801 :M
f13_12 sf
<C5>S
482 801 :M
f0_12 sf
(Show a window containing the form on the default display.)S
145 815 :M
f12_12 sf
(form_showAt)S
f9_12 sf
(\(fv: Form, at: Text, title: Text\): Ok ! form_failure)S
469 829 :M
f13_12 sf
<C5>S
482 829 :M
f0_12 sf
(Show a window containing the form on a display. For an X)S
482 843 :M
(display: at=)S
f13_15 sf
<D2>S
f0_12 sf
(")S
546 843 :M
f4_12 sf
(machineName)S
615 843 :M
f0_12 sf
<28D43AD57CD43A3AD529>S
f4_12 sf
(num)S
672 843 :M
f0_12 sf
<28D4D57CD42ED5>S
f4_12 sf
(num)S
718 843 :M
f0_12 sf
(\)")S
727 843 :M
f13_15 sf
<D3>S
f0_12 sf
(;)S
482 857 :M
(at=)S
f13_15 sf
<D2>S
f0_12 sf
("")S
510 857 :M
f13_15 sf
<D3>S
f0_12 sf
( is the default display. The title is shown in the)S
482 871 :M
(window header.)S
145 885 :M
f12_12 sf
(form_hide)S
210 885 :M
f9_12 sf
(\(fv: Form\): Ok ! form_failure)S
469 885 :M
f13_12 sf
<C5>S
482 885 :M
f0_12 sf
(Hide the window containing the form.)S
endp
%%Page: 58 58
%%BeginPageSetup
initializepage
(luca; page: 58 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(58)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 188 :M
f2_21 sf
(C.)S
172 188 :M
(Programming Reference)S
172 217 :M
f0_15 sf
.599 .06(In this section we provide information useful to programmers who want to call Obliq from Mod)J
762 217 :M
(-)S
145 235 :M
(ula-3, or vice versa.)S
145 279 :M
f2_18 sf
(C.1)S
185 279 :M
(The Package Hierarchy)S
172 307 :M
f0_15 sf
.498 .05(One of our goals is that Obliq should be easily embeddable in Modula-3 applications. Obliq adds)J
145 325 :M
.763 .076(only a small size overhead to typical Modula-3 applications, but we still want to minimize this over)J
762 325 :M
(-)S
145 343 :M
.71 .071(head. To this end, the Obliq implementation is partitioned into several packages, with a Modula-3 li)J
762 343 :M
(-)S
145 361 :M
.46 .046(brary in each package, so that each application can link only the appropriate libraries. Another advan)J
762 361 :M
(-)S
145 379 :M
.366 .037(tage of this organization, is that we can generate minimal Obliq interpreters that can act as \(relatively\))J
145 397 :M
(small network servers.)S
172 415 :M
.609 .061(Here is the package structure. Each node is a package \(a collection of interfaces\), which uses the)J
145 433 :M
.308 .031(connected packages above it. The nodes in italic represent packages external to the Obliq implementa)J
762 433 :M
(-)S
145 451 :M
(tion.)S
199 463 534 335 rC
222 491 :M
(synloc)S
457 512 :M
f4_15 sf
(netobj)S
371 555 :M
f2_15 sf
-.193(obliqrt)A
272 490 -1 1 362 546 1 272 489 @a
-.25 -.25 419.25 540.25 .25 .25 472 517 @b
260 603 :M
f0_15 sf
(obliqparse)S
478 605 :M
(obliqprint)S
-1 -1 309 588 1 1 360 559 @b
428 561 -1 1 493 589 1 428 560 @a
257 555 -1 1 293 586 1 257 554 @a
376 642 :M
(obliq)S
305 610 -1 1 365 633 1 305 609 @a
-1 -1 420 636 1 1 486 610 @b
472 675 :M
(obliqlibm3)S
473 705 :M
(obliqlibui)S
472 734 :M
(obliqlibanim)S
406 563 -1 1 471 663 1 406 562 @a
398 563 -1 1 472 693 1 398 562 @a
391 563 -1 1 471 722 1 391 562 @a
675 658 :M
f4_15 sf
(formsvbt)S
678 693 :M
(mgkit)S
-.25 -.25 545.25 698.25 .25 .25 665 653 @b
-.25 -.25 554.25 729.25 .25 .25 669 693 @b
674 623 :M
(\(m3lib\))S
-.25 -.25 545.25 666.25 .25 .25 667 620 @b
271 694 :M
f0_15 sf
15 f7_1 :p
73.337 :m
(obliqbinmin)S
272 719 :M
67.504 :m
(obliqbinstd)S
-1 -1 361 681 1 1 377 651 @b
-1 -1 364 708 1 1 384 651 @b
-1 -1 361 736 1 1 390 652 @b
-1 -1 371 758 1 1 396 652 @b
-1 -1 364 716 1 1 468 672 @b
271 743 :M
61.67 :m
(obliqbinui)S
271 768 :M
79.995 :m
(obliqbinanim)S
-1 -1 362 742 1 1 469 702 @b
-1 -1 376 765 1 1 467 731 @b
222 518 :M
(synex)S
223 547 :M
(metasyn)S
584 566 :M
f4_15 sf
(formatter)S
-.25 -.25 524.25 588.25 .25 .25 577 566 @b
-1 -1 248 508 1 1 247 494 @b
-1 -1 248 536 1 1 247 522 @b
501 759 :M
f2_15 sf
-.438(. . .)A
302 793 :M
-.438(. . .)A
688 720 :M
-.438(. . .)A
580 695 :M
f0_15 sf
66.661 :m
(obliqsrvstd)S
582 730 :M
60.828 :m
(obliqsrvui)S
544 672 -1 1 573 685 1 544 671 @a
544 704 -1 1 574 718 1 544 703 @a
605 757 :M
f2_15 sf
-.438(. . .)A
gR
gS 46 46 824 1090 rC
172 822 :M
f0_15 sf
.208 .021(Each package has a principal interface; that interface contains a )J
f13_15 sf
<D2>S
f9_15 sf
.081(PackageSetup\(\))A
f13_15 sf
<D3>S
f0_15 sf
.203 .02( routine that)J
145 840 :M
(must be called at least once to initialize all the modules in the package.)S
172 858 :M
1.322 .132(The )J
201 858 :M
f13_15 sf
<D2>S
f0_15 sf
(obliqrt)S
244 858 :M
f13_15 sf
.134<D3>A
f0_15 sf
1.054 .105( package implements the Obliq run-time kernel, which is the smallest part of Obliq)J
145 876 :M
.752 .075(that can be usefully embedded in an application. Note that this does not include parsers and printers;)J
145 894 :M
(these are separately provided in )S
339 894 :M
f13_15 sf
<D2>S
f0_15 sf
(obliqparse)S
f13_15 sf
<D3>S
f0_15 sf
( and )S
f13_15 sf
<D2>S
f0_15 sf
(obliqprint)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 912 :M
.064 .006(The )J
f13_15 sf
<D2>S
f0_15 sf
.025(obliq)A
233 912 :M
f13_15 sf
<D3>S
f0_15 sf
.114 .011( package brings together everything needed to build stand-alone Obliq interpreters. This)J
145 930 :M
(package can be linked with various library packages to produce various flavors of Obliq interpreters.)S
172 948 :M
.311 .031(Each underlined package contains a short Main program and a binary for an interpreter \()J
710 948 :M
f13_15 sf
<D2>S
f0_15 sf
.053(-bin-)A
f13_15 sf
<D3>S
f0_15 sf
.148 .015(\) or)J
145 966 :M
(a server \()S
201 966 :M
f13_15 sf
<D2>S
f0_15 sf
(-srv-)S
f13_15 sf
<D3>S
f0_15 sf
(\).)S
172 984 :M
(Modula-3 programmers can extend the hierarchy along the dotted lines.)S
endp
%%Page: 59 59
%%BeginPageSetup
initializepage
(luca; page: 59 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(59)S
145 159 :M
f2_18 sf
(C.2)S
185 159 :M
(The Interfaces)S
172 187 :M
f0_15 sf
.497 .05(The main client interface is )J
344 187 :M
f13_15 sf
<D2>S
f0_15 sf
.065(obliqrt/src/Obliq.i3)A
f13_15 sf
<D3>S
f0_15 sf
.196 .02(, which refers to )J
f13_15 sf
<D2>S
f0_15 sf
.068(obliqrt/src/ObTree.i3)A
f13_15 sf
<D3>S
f0_15 sf
.234 .023( \(the parse)J
145 205 :M
.805 .08(trees\) and )J
210 205 :M
f13_15 sf
.052<D2>A
f0_15 sf
.107(obliqrt/src/ObValue.i3)A
f13_15 sf
.052<D3>A
f0_15 sf
.378 .038( \(the run-time values\). )J
493 205 :M
f13_15 sf
<D2>S
f0_15 sf
(Obliq.i3)S
546 205 :M
f13_15 sf
.104<D3>A
f0_15 sf
.75 .075( contains: routines to create and in)J
762 205 :M
(-)S
145 223 :M
.093 .009(spect Obliq values \(including operations on remote objects\), exceptions, and errors; \322Eval\323 routines for)J
145 241 :M
(Obliq parse trees; and )S
280 241 :M
f13_15 sf
<D2>S
f9_15 sf
(sys_call)S
f13_15 sf
<D3>S
f0_15 sf
( registration to invoke Modula-3 routines from Obliq.)S
172 259 :M
.436 .044(The Obliq parser and printer are separate from the run-time, and need not be linked into an appli)J
762 259 :M
(-)S
145 277 :M
.429 .043(cation, since an application may access evaluated objects and closures over the network. The main in)J
762 277 :M
(-)S
145 295 :M
.581 .058(terface to the parser is )J
f13_15 sf
.096<D2>A
f0_15 sf
.2(obliqparse/src/ObliqParser.i3)A
470 295 :M
f13_15 sf
.149<D3>A
f0_15 sf
1.197 .12(, which contains routines to parse and evaluate)J
145 313 :M
.524 .052(Obliq phrases from a reader. The interface gives an example of a simple read-eval loop. The main in)J
762 313 :M
(-)S
145 331 :M
(terface to the printer, which performs pretty-printing, is )S
482 331 :M
f13_15 sf
<D2>S
f0_15 sf
(obliqprint/src/ObliqPrinter.i3)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
145 375 :M
f2_18 sf
(C.3)S
185 375 :M
(The Libraries)S
172 403 :M
f0_15 sf
.61 .061(Every Obliq client must link with )J
383 403 :M
f13_15 sf
.086<D2>A
f0_15 sf
.159(libobliqrt)A
f13_15 sf
.086<D3>A
f0_15 sf
.437 .044(. The parser is in )J
553 403 :M
f13_15 sf
<D2>S
f0_15 sf
(libobliqparse)S
635 403 :M
f13_15 sf
.112<D3>A
f0_15 sf
.641 .064(, and the printer is in)J
145 421 :M
f13_15 sf
<D2>S
f0_15 sf
(libobliqprint)S
f13_15 sf
<D3>S
f0_15 sf
(. For building interpreters, link with )S
f13_15 sf
<D2>S
f0_15 sf
(libobliq)S
495 421 :M
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 439 :M
1.356 .136(In every case, one must include whatever libraries are needed to get the desired Obliq built-in)J
145 457 :M
(packages and features, as described below:)S
199 484 :M
(libobliqrt:)S
388 484 :M
(array, ascii, bool, int, math, net, real, sys, text)S
199 502 :M
(libobliq:)S
388 502 :M
(sys on-line extensions, on-line help)S
199 520 :M
(libobliqlibm3:)S
388 520 :M
(rd, wr, lex, fmt, pickle, process, thread)S
199 538 :M
(libobliqlibui:)S
388 538 :M
(color, form)S
199 556 :M
(libobliqlibanim:)S
388 556 :M
(graph, zeus)S
145 609 :M
f2_18 sf
(C.4)S
185 609 :M
(Embedding Obliq in an Application)S
172 637 :M
f0_15 sf
1.837 .184(The appropriate client interfaces are )J
f13_15 sf
.22<D2>A
f0_15 sf
.446(obliqrt/src/Obliq.i3)A
536 637 :M
f13_15 sf
.135<D3>A
f0_15 sf
.282 .028(, )J
f13_15 sf
.135<D2>A
f0_15 sf
.273(obliqparse/src/ObliqParser.i3)A
f13_15 sf
.135<D3>A
f0_15 sf
.939 .094(, and)J
145 655 :M
f13_15 sf
<D2>S
f0_15 sf
(obliqprint/src/ObliqPrinter.i3)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 673 :M
1.062 .106(One may have to refer to other interfaces as well, particularly )J
563 673 :M
f13_15 sf
.102<D2>A
f0_15 sf
.231(ObTree.i3)A
f13_15 sf
.102<D3>A
f0_15 sf
.712 .071( \(the parser trees\) and)J
145 691 :M
f13_15 sf
<D2>S
f0_15 sf
(ObValue.i3)S
218 691 :M
f13_15 sf
.093<D3>A
f0_15 sf
.67 .067( \(the run-time values\). Note though that )J
f13_15 sf
.093<D2>A
f0_15 sf
.21(ObTree.i3)A
f13_15 sf
.093<D3>A
f0_15 sf
.687 .069( is particularly specific to the current)J
145 709 :M
1.37 .137(Obliq implementation, and should be used as \322abstractly\323 as possible; the )J
615 709 :M
f13_15 sf
<D2>S
f0_15 sf
.096(ObliqParser.i3)A
f13_15 sf
<D3>S
f0_15 sf
.456 .046( interface)J
145 727 :M
.061 .006(should isolate clients from any such dependencies. )J
f13_15 sf
<D2>S
f0_15 sf
.019(ObValue.i3)A
526 727 :M
f13_15 sf
<D3>S
f0_15 sf
.084 .008( is also likely to evolve over time; most)J
145 745 :M
(of its facilities can be accessed safely from )S
406 745 :M
f13_15 sf
<D2>S
f0_15 sf
(Obliq.i3)S
f13_15 sf
<D3>S
f0_15 sf
(.)S
172 763 :M
1.662 .166(The Obliq evaluator takes as arguments a syntax tree, and an environment. The environment,)J
145 781 :M
.818 .082(mapping identifiers to Obliq values, is particularly important. By manipulating the environment, one)J
145 799 :M
(can submit values to Obliq for evaluation, and can recover the results of an evaluation.)S
145 843 :M
f2_18 sf
(C.5)S
185 843 :M
(Extending Obliq with sys_calls)S
172 871 :M
f0_15 sf
.553 .055(A )J
f13_15 sf
.137<D2>A
f9_15 sf
.409(sys_call)A
f13_15 sf
.137<D3>A
f0_15 sf
.946 .095( is a cheap way of extending the functionality of an Obliq interpeter with a new)J
145 889 :M
(\322built-in\323 operation that invokes Modula-3 code. For more ambitious extensions, see section C.6.)S
172 907 :M
.072 .007(The interface )J
256 907 :M
f13_15 sf
<D2>S
f0_15 sf
.016(obliqrt/src/Obliq.i3)A
f13_15 sf
<D3>S
f0_15 sf
.059 .006( describes how to register a Modula-3 procedure so that it can be)J
145 925 :M
(invoked from Obliq. For a procedure registered under the name )S
f13_15 sf
<D2>S
f9_15 sf
("foo")S
f13_15 sf
<D3>S
f0_15 sf
(, the Obliq syntax is:)S
199 955 :M
f9_15 sf
(sys_call\("foo", [arg)S
f9_10 sf
0 3 rm
(1)S
0 -3 rm
f9_15 sf
(, ..., arg)S
f9_10 sf
0 3 rm
(n)S
0 -3 rm
f9_15 sf
(]\))S
172 983 :M
f0_15 sf
-.004(The interface )A
f13_15 sf
<D2>S
f0_15 sf
-.004(obliqrt/src/ObLib.i3)A
379 983 :M
f13_15 sf
<D3>S
f0_15 sf
-.011( contains examples of how to analyze the argument array passed)A
145 1001 :M
(by Obliq to Modula-3.)S
endp
%%Page: 60 60
%%BeginPageSetup
initializepage
(luca; page: 60 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(60)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
172 160 :M
f0_15 sf
1.124 .112(One must then link the Modula-3 code implementing )J
509 160 :M
f13_15 sf
.133<D2>A
f9_15 sf
.397(foo)A
f13_15 sf
.133<D3>A
f0_15 sf
.982 .098( with Obliq, either in an application)J
145 178 :M
(\(section C.4\) or in a custom interpreter \(section C.7\).)S
145 222 :M
f2_18 sf
(C.6)S
185 222 :M
(Extending Obliq with new Packages)S
172 250 :M
f0_15 sf
.808 .081(The interface )J
258 250 :M
f13_15 sf
.106<D2>A
f0_15 sf
.212(obliqrt/src/ObLib.i3)A
f13_15 sf
.106<D3>A
f0_15 sf
.68 .068( can be used to add a new built-in package to Obliq. One can)J
145 268 :M
.782 .078(extend Obliq with new built-in types, exceptions, and operations. All the built-in Obliq packages are)J
145 286 :M
(implemented through this interface.)S
172 304 :M
(The interface contains a detailed example of how to write and register such a package.)S
145 348 :M
f2_18 sf
(C.7)S
185 348 :M
(Building a Customized Obliq Interpreter)S
172 376 :M
f0_15 sf
.309 .031(A new package, created as described in section C.6, can be embedded into a customized Obliq in)J
762 376 :M
(-)S
145 394 :M
1.178 .118(terpreter. Follow the example given by )J
f13_15 sf
.148<D2>A
f0_15 sf
.331(obliqbinstd/src/Main.m3)A
552 394 :M
f13_15 sf
.293<D3>A
f0_15 sf
2.019 .202(: this is the 20-line program that)J
145 412 :M
.26 .026(builds the standard Obliq interpreter. The other )J
435 412 :M
f13_15 sf
<D2>S
f0_15 sf
.041(obliqbin.../src/Main.m3)A
f13_15 sf
<D3>S
f0_15 sf
.15 .015( files contain other versions of)J
145 430 :M
(the interpreter.)S
endp
%%Page: 61 61
%%BeginPageSetup
initializepage
(luca; page: 61 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(61)S
145 188 :M
f2_21 sf
(References)S
145 226 :M
f0_15 sf
([Abadi, Cardelli 1994] M. Abadi and L. Cardelli. )S
f2_15 sf
(A theory of primitive objects: untyped and first)S
748 226 :M
(-)S
172 244 :M
(order systems)S
261 244 :M
f0_15 sf
(. )S
f4_15 sf
(Proc. Theoretical Aspects of Computer Software)S
560 244 :M
f0_15 sf
(. Springer-Verlag.)S
145 271 :M
([Apple 1993] Apple, )S
f2_15 sf
(AppleScript Language Guide)S
461 271 :M
f0_15 sf
(. Addison Wesley.)S
145 298 :M
([Avrahami, Brooks, Brown 1989] G. Avrahami, K.P. Brooks, and M.H. Brown, )S
628 298 :M
f2_15 sf
(A two-view approach)S
172 316 :M
(to constructing user interfaces)S
366 316 :M
f4_15 sf
(.)S
f0_15 sf
( )S
373 316 :M
f4_15 sf
(Computer Graphics)S
493 316 :M
f0_15 sf
( )S
497 316 :M
f2_15 sf
(23)S
f0_15 sf
(\(3\), 137-146.)S
145 343 :M
([Bal, Kaashoek, Tanenbaum 1992] H.E. Bal, M.F. Kaashoek, and A.S. Tanenbaum, )S
652 343 :M
f2_15 sf
(Orca: a language)S
172 361 :M
(for parallel programming of distributed systems)S
481 361 :M
f4_15 sf
(.)S
f0_15 sf
( )S
488 361 :M
f4_15 sf
(IEEE Transactions on Software Engineering)S
172 379 :M
f2_15 sf
(18)S
f0_15 sf
(\(3\), 190-205.)S
145 406 :M
([Bharat, Brown 1994] K. Bharat and M.H. Brown. )S
f2_15 sf
(Building distributed applications by direct)S
172 424 :M
(manipulation)S
258 424 :M
f0_15 sf
(. )S
f4_15 sf
(Proc. UIST\32594)S
354 424 :M
f0_15 sf
(.)S
145 451 :M
([Birrell 1991] A.D. Birrell, )S
f2_15 sf
(An introduction to programming with threads)S
f0_15 sf
(. In )S
631 451 :M
f4_15 sf
(Systems Programming)S
172 469 :M
(with Modula-3, Chapter 4,)S
f0_15 sf
( G. Nelson, ed. Prentice Hall.)S
145 496 :M
([Birrell, )S
197 496 :M
f4_15 sf
(et al.)S
227 496 :M
f0_15 sf
( 1993a] A.D. Birrell, D. Evers, G. Nelson, S. Owicki, and E. Wobber. )S
f2_15 sf
(Distributed)S
172 514 :M
(garbage collection for network objects)S
417 514 :M
f0_15 sf
(. Report 116. Digital Equipment Corporation, Systems)S
172 532 :M
(Research Center.)S
145 559 :M
([Birrell, )S
197 559 :M
f4_15 sf
(et al.)S
227 559 :M
f0_15 sf
( 1993b] A.D. Birrell, G. Nelson, S. Owicki, and E. Wobber. )S
f2_15 sf
(Network objects)S
f0_15 sf
(. )S
702 559 :M
f4_15 sf
(Proc. 14th)S
172 577 :M
(Symposium on Operating Systems Principles)S
f0_15 sf
(.)S
145 604 :M
([Birrell, )S
197 604 :M
f4_15 sf
(et al.)S
227 604 :M
f0_15 sf
( 1994] A.D. Birrell, G. Nelson, S. Owicki, and E. Wobber. )S
f2_15 sf
(Network objects)S
687 604 :M
f0_15 sf
(. Report 115.)S
172 622 :M
(Digital Equipment Corporation, Systems Research Center.)S
145 649 :M
([Brewer, Waldspurger 1992] E.A. Brewer and C.A. Waldspurger. )S
f2_15 sf
(Preventing recursion deadlock in)S
172 667 :M
(concurrent object-oriented systems)S
397 667 :M
f0_15 sf
(. )S
f4_15 sf
(Proc. 1992 International Parallel Processing Symposium,)S
172 685 :M
(Beverly Hills, California.  \(Also, Report MIT/LCS/TR-526.\))S
f0_15 sf
(.)S
145 712 :M
([Brockschmidt 1994] K. Brockschmidt, )S
387 712 :M
f2_15 sf
(Inside OLE2)S
f0_15 sf
(. Microsoft Press.)S
145 739 :M
([Brown 1994] M.H. Brown. )S
f2_15 sf
(Report on the 1993 SRC algorithm animation festival)S
f0_15 sf
(. Report n.126.)S
172 757 :M
(Digital Equipment Corporation, Systems Research Center. To appear.)S
145 784 :M
([Brown, Meehan 1994] M.H. Brown and J.R. Meehan. )S
f2_15 sf
(The FormsVBT Reference Manual)S
700 784 :M
f0_15 sf
(.)S
172 802 :M
(Unpublished. Digital Equipment Corporation, Systems Research Center.)S
145 829 :M
([Fort\216 1994] Fort\216. )S
f2_15 sf
(TOOL reference manual)S
f0_15 sf
(. Fort\216, Inc.)S
145 856 :M
([Horning, )S
f4_15 sf
(et al.)S
237 856 :M
f0_15 sf
( 1993] J. Horning, B. Kalsow, P. McJones, and G. Nelson. )S
592 856 :M
f2_15 sf
(Some useful Modula-3)S
172 874 :M
(interfaces)S
f0_15 sf
(. Report 113. Digital Equipment Corporation, Systems Research Center.)S
145 901 :M
([Mansfield 1994] R. Mansfield, )S
f2_15 sf
(Visual Basic for Applications)S
f0_15 sf
(. Ventana Press.)S
145 928 :M
([Milner, Tofte, Harper 1989] R. Milner, M. Tofte, and R. Harper, )S
f2_15 sf
(The definition of Standard ML)S
f0_15 sf
(.)S
172 946 :M
(MIT Press.)S
145 973 :M
([Najork, Brown 1994] M. Najork and M.H. Brown. )S
458 973 :M
f2_15 sf
(A library for visualizing combinatorial)S
172 991 :M
(structures)S
237 991 :M
f0_15 sf
(. )S
f4_15 sf
(Proc. IEEE Visualization\32594)S
417 991 :M
f0_15 sf
(.)S
145 1018 :M
([Nelson 1991] G. Nelson, ed. )S
325 1018 :M
f2_15 sf
(Systems programming with Modula-3)S
568 1018 :M
f0_15 sf
(. Prentice Hall.)S
endp
%%Page: 62 62
%%BeginPageSetup
initializepage
(luca; page: 62 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(62)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
145 160 :M
f0_15 sf
([Ousterhout 1994] J.K. Ousterhout, )S
f2_15 sf
(Tcl and the Tk toolkit)S
f0_15 sf
(. Addison-Wesley.)S
145 187 :M
([Reppy 1991] Reppy. )S
f2_15 sf
(A higher-order concurrent language)S
511 187 :M
f0_15 sf
(. )S
519 187 :M
f4_15 sf
(Proc. SIGPLAN\32591 Conference on)S
172 205 :M
(Programming Language Design and Implementation)S
f0_15 sf
(. ACM Press.)S
145 232 :M
([Thomsen, )S
f4_15 sf
(et al.)S
243 232 :M
f0_15 sf
( 1993] B. Thomsen, L. Leth, S. Prasad, T.-M. Kuo, A. Kramer, F. Knabe, and A.)S
172 250 :M
(Giacalone. )S
f2_15 sf
(Facile Antigua Release Programming Guide)S
523 250 :M
f0_15 sf
(. ECRC-93-20. European Computer-)S
172 268 :M
(Industry Research Centre.)S
145 295 :M
([Ungar, Smith 1987] D. Ungar and R.B. Smith. )S
433 295 :M
f2_15 sf
(Self: the power of simplicity)S
f0_15 sf
(. )S
620 295 :M
f4_15 sf
(Proc. OOPSLA\32587)S
f0_15 sf
(.)S
172 313 :M
(ACM SIGPLAN Notices 2\(12\).)S
145 340 :M
([White 1994] J.E. White. )S
300 340 :M
f2_15 sf
(Telescript technology: the foundation for the electronic marketplace)S
f0_15 sf
(.)S
172 358 :M
(White Paper. General Magic, Inc.)S
endp
%%Page: 63 63
%%BeginPageSetup
initializepage
(luca; page: 63 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_6 sf
(May 30, 1995   )S
183 1071 :M
(11:11 PM)S
724 1071 :M
f0_13 sf
(Page )S
753 1071 :M
(63)S
145 188 :M
f2_21 sf
(Index)S
145 231 :M
f0_15 sf
(agents 4, 6, 23)S
163 246 :M
(agent migration 25)S
145 261 :M
(aliases 7, 8, 12)S
163 276 :M
(alias fields 6, 33)S
145 291 :M
(andif construct 38)S
145 306 :M
(application embedding 59)S
145 321 :M
(array library 53)S
145 336 :M
(arrays 5)S
163 351 :M
(constructs 33)S
163 366 :M
(operators 32)S
145 381 :M
(ascii library 52)S
145 396 :M
(assignment construct 37)S
145 411 :M
(bool library 50)S
145 426 :M
(booleans)S
163 441 :M
(constants 32)S
163 456 :M
(operators 32)S
145 471 :M
(broadcast construct 39)S
145 486 :M
(built-in libraries 50)S
145 501 :M
(built-in operators 31)S
145 516 :M
(case construct 38)S
145 531 :M
(characters)S
163 546 :M
(constants 43)S
145 561 :M
(classes 8)S
163 576 :M
(abstract 8)S
145 591 :M
(cloning 6, 8, 11, 18, 34)S
145 606 :M
(closures 5, 10)S
145 621 :M
(color library 56)S
145 636 :M
(commas 30)S
145 651 :M
(comments 43)S
145 666 :M
(compute server 21)S
145 681 :M
(condition construct 39)S
145 696 :M
(conditional construct 38)S
145 711 :M
(constants 32)S
145 726 :M
(control structures 36)S
145 741 :M
(copy construct 25)S
145 756 :M
(current method 12, 35)S
145 771 :M
(current site 5)S
145 786 :M
(database servers 22)S
145 801 :M
(definition phrases 47)S
145 816 :M
(definitions 30, 37)S
145 831 :M
(distributed computation 11)S
145 846 :M
(distributed state 9)S
145 861 :M
(embedded locations 6)S
145 876 :M
(enablers 36)S
145 891 :M
(engines 16, 35)S
163 906 :M
(exporting 16, 35)S
163 921 :M
(importing 16, 36)S
145 936 :M
(errors 40)S
145 951 :M
(exception construct 40)S
145 966 :M
(exceptions 40)S
145 981 :M
(executables 47)S
145 996 :M
(exit construct 38)S
145 1011 :M
(extending Obliq 59)S
145 1026 :M
(fields 6, 33)S
501 231 :M
(alias fields 6)S
501 246 :M
(field names 6, 30, 33)S
501 261 :M
(method fields 6)S
501 276 :M
(private fields 7)S
501 291 :M
(value fields 6)S
483 306 :M
(file system enablers 36)S
483 321 :M
(files 48)S
483 336 :M
(fmt library 55)S
483 351 :M
(for construct 38)S
483 366 :M
(foreach construct 39)S
483 381 :M
(fork construct 21, 39)S
483 396 :M
(form library 56)S
483 411 :M
(host object 7)S
483 426 :M
(I/O 54, 55)S
483 441 :M
(identifiers 30, 43)S
501 456 :M
(constant 5)S
501 471 :M
(free 4, 5, 6, 10, 22)S
501 486 :M
(qualified 30, 49)S
501 501 :M
(scoping 30)S
501 516 :M
(syntax 43)S
501 531 :M
(unqualified 30)S
501 546 :M
(variable 5)S
483 561 :M
(identity 31)S
483 576 :M
(inheritance 7, 8)S
501 591 :M
(multiple 8)S
483 606 :M
(int library 51)S
483 621 :M
(integers)S
501 636 :M
(constants 43)S
501 651 :M
(operators 32)S
483 666 :M
(interpreters 60)S
483 681 :M
(invocation 7, 11, 34)S
483 696 :M
(is construct 31)S
483 711 :M
(isnot construct 31)S
483 726 :M
(iteration constructs 38)S
483 741 :M
(join construct 21, 39)S
483 756 :M
(keywords 43, 44)S
483 771 :M
(lex library 55)S
483 786 :M
(lexicon 42)S
483 801 :M
(libraries 30, 48, 49, 50)S
483 816 :M
(load construct 48)S
483 831 :M
(local site 5)S
483 846 :M
(locations 5)S
483 861 :M
(lock construct 39)S
483 876 :M
(loop construct 38)S
483 891 :M
(math library 51)S
483 906 :M
(methods 7, 37)S
501 921 :M
(method fields 6, 33)S
501 936 :M
(overriding 18)S
483 951 :M
(mixins 8)S
483 966 :M
(Modula-3)S
501 981 :M
(interfaces 59)S
501 996 :M
(libraries 59)S
501 1011 :M
(packages 58)S
483 1026 :M
(modules 48)S
endp
%%Page: 64 64
%%BeginPageSetup
initializepage
(luca; page: 64 of 64)setjob
%%EndPageSetup
-46 -46 :T
gS 46 46 824 1090 rC
145 1071 :M
f0_13 sf
(Page )S
174 1071 :M
(64)S
704 1071 :M
f0_6 sf
(May 30, 1995   )S
742 1071 :M
(11:11 PM)S
163 156 :M
f0_15 sf
(closed modules 49)S
163 171 :M
(end module 49)S
163 186 :M
(import 49)S
163 201 :M
(loading 49)S
163 216 :M
(open modules 49)S
145 231 :M
(mutex construct 39)S
145 246 :M
(mutexes 13)S
145 261 :M
(name servers 14, 49)S
145 276 :M
(net library 53)S
145 291 :M
(netobjd program 49)S
145 306 :M
(network)S
163 321 :M
(network objects daemon 49)S
163 336 :M
(objects 4)S
163 351 :M
(references 4)S
145 366 :M
(objects 4, 5, 6, 33)S
163 381 :M
(exporting 15, 35)S
163 396 :M
(importing 15, 35)S
163 411 :M
(migration 4, 25, 27)S
163 426 :M
(mutexes 13)S
163 441 :M
(new 8)S
163 456 :M
(operations 7)S
163 471 :M
(protected 12)S
163 486 :M
(remote 9)S
163 501 :M
(serialized 13)S
163 516 :M
(surrogates 9, 20)S
163 531 :M
(views 7)S
145 546 :M
(obliq program 47)S
145 561 :M
(OBLIQPATH search path 48)S
145 576 :M
(ok constant 32)S
145 591 :M
(operations)S
163 606 :M
(external 12, 13)S
163 621 :M
(self-inflicted 12, 13, 35)S
145 636 :M
(operators 30, 32)S
163 651 :M
(built-in 31)S
163 666 :M
(precedence 31)S
145 681 :M
(option construct 33)S
145 696 :M
(orif construct 38)S
145 711 :M
(overriding 8, 11, 34)S
145 726 :M
(pause construct 39)S
145 741 :M
(phrases 47)S
145 756 :M
(pickle library 55)S
145 771 :M
(procedures 7, 37)S
145 786 :M
(process library 56)S
145 801 :M
(processor enablers 36)S
145 816 :M
(program files 48, 49)S
145 831 :M
(protection 33, 35)S
145 846 :M
(prototypes 8)S
163 861 :M
(partial 8)S
145 876 :M
(quit 47)S
145 891 :M
(raise construct 40)S
483 156 :M
(rd library 54)S
483 171 :M
(readers 54)S
483 186 :M
(real library 51)S
483 201 :M
(reals)S
501 216 :M
(constants 43)S
501 231 :M
(operators 32)S
483 246 :M
(redirection 8, 12, 34)S
483 261 :M
(remote site 5)S
483 276 :M
(scoping 30)S
483 291 :M
(selection 7, 11, 34)S
483 306 :M
(self 7)S
483 321 :M
(semicolons 30)S
483 336 :M
(sequencing construct 37)S
483 351 :M
(serialization 13, 20, 33, 35)S
483 366 :M
(sibling fields 7)S
483 381 :M
(signal construct 21, 39)S
483 396 :M
(sites 5)S
483 411 :M
(state 4, 10)S
483 426 :M
(surrogates 9, 20)S
483 441 :M
(syntactic structures 30)S
483 456 :M
(syntax 43)S
483 471 :M
(syntax overview 27)S
483 486 :M
(sys library 50)S
483 501 :M
(sys_call construct 59)S
483 516 :M
(term phrases 47)S
483 531 :M
(term sequences 30, 31)S
483 546 :M
(terms 30)S
483 561 :M
(text library 52)S
483 576 :M
(texts)S
501 591 :M
(constants 43)S
501 606 :M
(operators 32)S
483 621 :M
(thread library 53)S
483 636 :M
(threads 5, 20)S
483 651 :M
(top-level interaction 47)S
483 666 :M
(transmission 6, 10)S
483 681 :M
(try-except construct 40)S
483 696 :M
(try-finally construct 40)S
483 711 :M
(types)S
501 726 :M
(strong typing 5)S
501 741 :M
(type comments 40)S
483 756 :M
(updating 8, 11, 34)S
483 771 :M
(user interfaces 56)S
483 786 :M
(values 5)S
501 801 :M
(basic values 5)S
501 816 :M
(value fields 6, 33)S
483 831 :M
(wait construct 39)S
483 846 :M
(watch construct 14, 21, 39)S
483 861 :M
(wr library 54)S
483 876 :M
(writers 54)S
endp
%%Trailer
end
%%EOF
